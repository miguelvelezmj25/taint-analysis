    static void <clinit>()
    {
        int $i0, $i1, $i2, $i3;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/txn/Txn";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.txn.Txn: boolean $assertionsDisabled> = $z1;

        $i1 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHSET_ENTRY_OVERHEAD>;

        <berkeley.com.sleepycat.je.txn.Txn: int READ_LOCK_OVERHEAD> = $i1;

        $i2 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHMAP_ENTRY_OVERHEAD>;

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int WRITE_LOCKINFO_OVERHEAD>;

        $i3 = $i2 + $i0;

        <berkeley.com.sleepycat.je.txn.Txn: int WRITE_LOCK_OVERHEAD> = $i3;

        <berkeley.com.sleepycat.je.txn.Txn: int ACCUMULATED_LIMIT> = 10000;

        return;
    }

    public void setPrepared(boolean)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean prepared;
        byte $b0, $b1, $b2, $b3, $b4, $b5;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        prepared := @parameter0: boolean;

        if prepared == 0 goto label1;

        $b0 = this.<berkeley.com.sleepycat.je.txn.Txn: byte txnFlags>;

        $b1 = $b0 | 1;

        $b2 = (byte) $b1;

        this.<berkeley.com.sleepycat.je.txn.Txn: byte txnFlags> = $b2;

        goto label2;

     label1:
        $b3 = this.<berkeley.com.sleepycat.je.txn.Txn: byte txnFlags>;

        $b4 = $b3 & -2;

        $b5 = (byte) $b4;

        this.<berkeley.com.sleepycat.je.txn.Txn: byte txnFlags> = $b5;

     label2:
        return;
    }

    protected void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.TransactionConfig, berkeley.com.sleepycat.je.log.ReplicationContext, long) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.TransactionConfig config;
        berkeley.com.sleepycat.je.log.ReplicationContext repContext;
        long mandatedId;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicInteger $r0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        config := @parameter1: berkeley.com.sleepycat.je.TransactionConfig;

        repContext := @parameter2: berkeley.com.sleepycat.je.log.ReplicationContext;

        mandatedId := @parameter3: long;

        $z0 = virtualinvoke config.<berkeley.com.sleepycat.je.TransactionConfig: boolean getReadUncommitted()>();

        $z1 = virtualinvoke config.<berkeley.com.sleepycat.je.TransactionConfig: boolean getNoWait()>();

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Locker: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,boolean,boolean,long)>(envImpl, $z0, $z1, mandatedId);

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.concurrent.atomic.AtomicInteger cursors> = $r0;

        this.<berkeley.com.sleepycat.je.txn.Txn: long firstLoggedLsn> = -1L;

        this.<berkeley.com.sleepycat.je.txn.Txn: long lastLoggedLsn> = -1L;

        this.<berkeley.com.sleepycat.je.txn.Txn: long commitLsn> = -1L;

        this.<berkeley.com.sleepycat.je.txn.Txn: long abortLsn> = -1L;

        this.<berkeley.com.sleepycat.je.txn.Txn: int accumulatedDelta> = 0;

        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set triggerDbs> = null;

        this.<berkeley.com.sleepycat.je.txn.Txn: boolean explicitSyncConfigured> = 0;

        this.<berkeley.com.sleepycat.je.txn.Txn: boolean explicitDurabilityConfigured> = 0;

        this.<berkeley.com.sleepycat.je.txn.Txn: boolean isAutoCommit> = 0;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void initTxn(berkeley.com.sleepycat.je.TransactionConfig)>(config);

        this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.log.ReplicationContext repContext> = repContext;

        return;
    }

    private void initTxn(berkeley.com.sleepycat.je.TransactionConfig) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.TransactionConfig config;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        berkeley.com.sleepycat.je.Durability $r0, $r1, $r3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r2, $r7, $r9;
        java.lang.AssertionError $r5;
        berkeley.com.sleepycat.je.Transaction$State $r6;
        berkeley.com.sleepycat.je.utilint.TinyHashSet $r8;
        int $i0;
        berkeley.com.sleepycat.je.txn.TxnManager $r10;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        config := @parameter0: berkeley.com.sleepycat.je.TransactionConfig;

        $z0 = virtualinvoke config.<berkeley.com.sleepycat.je.TransactionConfig: boolean getSerializableIsolation()>();

        this.<berkeley.com.sleepycat.je.txn.Txn: boolean serializableIsolation> = $z0;

        $z1 = virtualinvoke config.<berkeley.com.sleepycat.je.TransactionConfig: boolean getReadCommitted()>();

        this.<berkeley.com.sleepycat.je.txn.Txn: boolean readCommittedIsolation> = $z1;

        $r0 = virtualinvoke config.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.Durability getDurability()>();

        this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Durability defaultDurability> = $r0;

        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Durability defaultDurability>;

        if $r1 != null goto label1;

        this.<berkeley.com.sleepycat.je.txn.Txn: boolean explicitDurabilityConfigured> = 0;

        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r3 = virtualinvoke config.<berkeley.com.sleepycat.je.TransactionConfig: berkeley.com.sleepycat.je.Durability getDurabilityFromSync(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>($r2);

        this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Durability defaultDurability> = $r3;

        goto label2;

     label1:
        this.<berkeley.com.sleepycat.je.txn.Txn: boolean explicitDurabilityConfigured> = 1;

     label2:
        $z2 = virtualinvoke config.<berkeley.com.sleepycat.je.TransactionConfig: boolean getSync()>();

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke config.<berkeley.com.sleepycat.je.TransactionConfig: boolean getNoSync()>();

        if $z3 != 0 goto label3;

        $z4 = virtualinvoke config.<berkeley.com.sleepycat.je.TransactionConfig: boolean getWriteNoSync()>();

        if $z4 == 0 goto label4;

     label3:
        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        this.<berkeley.com.sleepycat.je.txn.Txn: boolean explicitSyncConfigured> = $z5;

        $z6 = <berkeley.com.sleepycat.je.txn.Txn: boolean $assertionsDisabled>;

        if $z6 != 0 goto label6;

        $z7 = this.<berkeley.com.sleepycat.je.txn.Txn: boolean explicitDurabilityConfigured>;

        if $z7 == 0 goto label6;

        $z8 = this.<berkeley.com.sleepycat.je.txn.Txn: boolean explicitSyncConfigured>;

        if $z8 == 0 goto label6;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label6:
        $z9 = virtualinvoke config.<berkeley.com.sleepycat.je.TransactionConfig: boolean getReadOnly()>();

        this.<berkeley.com.sleepycat.je.txn.Txn: boolean readOnly> = $z9;

        this.<berkeley.com.sleepycat.je.txn.Txn: long lastLoggedLsn> = -1L;

        this.<berkeley.com.sleepycat.je.txn.Txn: long firstLoggedLsn> = -1L;

        this.<berkeley.com.sleepycat.je.txn.Txn: byte txnFlags> = 0;

        $r6 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State OPEN>;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void setState(berkeley.com.sleepycat.je.Transaction$State)>($r6);

        $r7 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z10 = virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        if $z10 == 0 goto label7;

        $r8 = new berkeley.com.sleepycat.je.utilint.TinyHashSet;

        specialinvoke $r8.<berkeley.com.sleepycat.je.utilint.TinyHashSet: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.utilint.TinyHashSet buddyLockers> = $r8;

     label7:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void txnBeginHook(berkeley.com.sleepycat.je.TransactionConfig)>(config);

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TXN_OVERHEAD>;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void updateMemoryUsage(int)>($i0);

        $z11 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean registerImmediately()>();

        if $z11 == 0 goto label8;

        $r9 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r10 = virtualinvoke $r9.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.txn.TxnManager getTxnManager()>();

        virtualinvoke $r10.<berkeley.com.sleepycat.je.txn.TxnManager: void registerTxn(berkeley.com.sleepycat.je.txn.Txn)>(this);

     label8:
        return;
    }

    private synchronized void setState(berkeley.com.sleepycat.je.Transaction$State)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.Transaction$State state;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        state := @parameter0: berkeley.com.sleepycat.je.Transaction$State;

        this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction$State txnState> = state;

        return;
    }

    protected void txnBeginHook(berkeley.com.sleepycat.je.TransactionConfig) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.TransactionConfig config;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        config := @parameter0: berkeley.com.sleepycat.je.TransactionConfig;

        return;
    }

    private void updateMemoryUsage(int)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        int delta, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r2;
        berkeley.com.sleepycat.je.dbi.MemoryBudget $r3;
        long $l10;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        delta := @parameter0: int;

        $i0 = this.<berkeley.com.sleepycat.je.txn.Txn: int inMemorySize>;

        $i1 = $i0 + delta;

        this.<berkeley.com.sleepycat.je.txn.Txn: int inMemorySize> = $i1;

        $i2 = this.<berkeley.com.sleepycat.je.txn.Txn: int accumulatedDelta>;

        $i3 = $i2 + delta;

        this.<berkeley.com.sleepycat.je.txn.Txn: int accumulatedDelta> = $i3;

        $i4 = this.<berkeley.com.sleepycat.je.txn.Txn: int accumulatedDelta>;

        $i5 = <berkeley.com.sleepycat.je.txn.Txn: int ACCUMULATED_LIMIT>;

        if $i4 > $i5 goto label1;

        $i6 = this.<berkeley.com.sleepycat.je.txn.Txn: int accumulatedDelta>;

        $i7 = <berkeley.com.sleepycat.je.txn.Txn: int ACCUMULATED_LIMIT>;

        $i8 = neg $i7;

        if $i6 >= $i8 goto label2;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.MemoryBudget getMemoryBudget()>();

        $i9 = this.<berkeley.com.sleepycat.je.txn.Txn: int accumulatedDelta>;

        $l10 = (long) $i9;

        virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.MemoryBudget: void updateTxnMemoryUsage(long)>($l10);

        this.<berkeley.com.sleepycat.je.txn.Txn: int accumulatedDelta> = 0;

     label2:
        return;
    }

    protected boolean registerImmediately()
    {
        berkeley.com.sleepycat.je.txn.Txn this;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        return 1;
    }

    public void <init>()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        java.util.concurrent.atomic.AtomicInteger $r0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Locker: void <init>()>();

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.concurrent.atomic.AtomicInteger cursors> = $r0;

        this.<berkeley.com.sleepycat.je.txn.Txn: long firstLoggedLsn> = -1L;

        this.<berkeley.com.sleepycat.je.txn.Txn: long lastLoggedLsn> = -1L;

        this.<berkeley.com.sleepycat.je.txn.Txn: long commitLsn> = -1L;

        this.<berkeley.com.sleepycat.je.txn.Txn: long abortLsn> = -1L;

        this.<berkeley.com.sleepycat.je.txn.Txn: int accumulatedDelta> = 0;

        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set triggerDbs> = null;

        this.<berkeley.com.sleepycat.je.txn.Txn: boolean explicitSyncConfigured> = 0;

        this.<berkeley.com.sleepycat.je.txn.Txn: boolean explicitDurabilityConfigured> = 0;

        this.<berkeley.com.sleepycat.je.txn.Txn: boolean isAutoCommit> = 0;

        this.<berkeley.com.sleepycat.je.txn.Txn: long lastLoggedLsn> = -1L;

        return;
    }

    public void readFromLog(java.nio.ByteBuffer, int)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        java.nio.ByteBuffer logBuffer;
        int entryVersion;
        boolean $z0, $z1;
        long $l0, $l1;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        entryVersion := @parameter1: int;

        if entryVersion >= 6 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $l0 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: long readLong(java.nio.ByteBuffer,boolean)>(logBuffer, $z0);

        this.<berkeley.com.sleepycat.je.txn.Txn: long id> = $l0;

        if entryVersion >= 6 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $l1 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: long readLong(java.nio.ByteBuffer,boolean)>(logBuffer, $z1);

        this.<berkeley.com.sleepycat.je.txn.Txn: long lastLoggedLsn> = $l1;

        return;
    }

    static berkeley.com.sleepycat.je.txn.Txn createAutoTxn(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.TransactionConfig, berkeley.com.sleepycat.je.log.ReplicationContext) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.TransactionConfig config;
        berkeley.com.sleepycat.je.log.ReplicationContext repContext;
        berkeley.com.sleepycat.je.DatabaseException DE, $r1;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.txn.Txn ret#10, $r0;
        java.lang.NullPointerException soot0;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        config := @parameter1: berkeley.com.sleepycat.je.TransactionConfig;

        repContext := @parameter2: berkeley.com.sleepycat.je.log.ReplicationContext;

     label1:
        $z0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke repContext.<berkeley.com.sleepycat.je.log.ReplicationContext: boolean inReplicationStream()>();

        if $z1 == 0 goto label2;

        ret#10 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.txn.Txn createRepUserTxn(berkeley.com.sleepycat.je.TransactionConfig)>(config);

        goto label3;

     label2:
        $r0 = new berkeley.com.sleepycat.je.txn.Txn;

        specialinvoke $r0.<berkeley.com.sleepycat.je.txn.Txn: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.TransactionConfig,berkeley.com.sleepycat.je.log.ReplicationContext)>(envImpl, config, repContext);

        ret#10 = $r0;

     label3:
        ret#10.<berkeley.com.sleepycat.je.txn.Txn: boolean isAutoCommit> = 1;

     label4:
        goto label7;

     label5:
        $r1 := @caughtexception;

        DE = $r1;

        if null == null goto label6;

        soot0 = new java.lang.NullPointerException;

        specialinvoke soot0.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke ret#2.<berkeley.com.sleepycat.je.txn.Txn: void close(boolean)>(0)");

        throw soot0;

     label6:
        throw DE;

     label7:
        return ret#10;

        catch berkeley.com.sleepycat.je.DatabaseException from label1 to label4 with label5;
    }

    protected void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.TransactionConfig, berkeley.com.sleepycat.je.log.ReplicationContext)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.TransactionConfig config;
        berkeley.com.sleepycat.je.log.ReplicationContext repContext;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        config := @parameter1: berkeley.com.sleepycat.je.TransactionConfig;

        repContext := @parameter2: berkeley.com.sleepycat.je.log.ReplicationContext;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.TransactionConfig,berkeley.com.sleepycat.je.log.ReplicationContext,long)>(envImpl, config, repContext, 0L);

        return;
    }

    public synchronized void addOpenedDatabase(berkeley.com.sleepycat.je.Database)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.Database dbHandle;
        boolean $z0;
        java.util.Set $r0, $r2;
        java.util.HashSet $r1;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        dbHandle := @parameter0: berkeley.com.sleepycat.je.Database;

        $z0 = this.<berkeley.com.sleepycat.je.txn.Txn: boolean isAutoCommit>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set openedDatabaseHandles>;

        if $r0 != null goto label2;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set openedDatabaseHandles> = $r1;

     label2:
        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set openedDatabaseHandles>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(dbHandle);

        return;
    }

    public void operationEnd(boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean operationOK, $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        operationOK := @parameter0: boolean;

        $z0 = this.<berkeley.com.sleepycat.je.txn.Txn: boolean isAutoCommit>;

        if $z0 != 0 goto label1;

        return;

     label1:
        if operationOK == 0 goto label2;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: long commit()>();

        goto label3;

     label2:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: long abort(boolean)>(0);

     label3:
        return;
    }

    public long commit() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.Durability $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Durability defaultDurability>;

        $l0 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: long commit(berkeley.com.sleepycat.je.Durability)>($r0);

        return $l0;
    }

    public long abort(boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean forceFlush;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        forceFlush := @parameter0: boolean;

        $l0 = specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: long abortInternal(boolean)>(forceFlush);

        return $l0;
    }

    private long abortInternal(boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this, l3#7, l3#81;
        boolean forceFlush, openCursors, hooked#2, $z0, $z1, $z2, $z3, hooked#67, hooked#74, $z4, $z5;
        berkeley.com.sleepycat.je.log.entry.AbortLogEntry abortEntry, $r4;
        java.lang.Throwable l5, l8, l9, $r13, $r14, l6#70, $r35, $r36;
        java.util.logging.Logger logger;
        berkeley.com.sleepycat.je.Database handle;
        berkeley.com.sleepycat.je.Transaction$State $r1;
        java.lang.AssertionError $r2, $r3;
        long $l0, $l2, $l4, $l5, $l7, $l8, $l9, $l10, $l11, $l13, $l15;
        byte $b1, $b3, $b12, $b14;
        berkeley.com.sleepycat.je.txn.TxnAbort $r5;
        int $i6;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r7, $r10, $r16, $r18, $r28;
        berkeley.com.sleepycat.je.log.LogManager $r8, $r11;
        berkeley.com.sleepycat.je.log.ReplicationContext $r9, $r12;
        java.util.logging.Level $r17;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r23, $r30, $r31, $r32, $r33;
        java.lang.String $r24, $r34;
        java.util.Set $r25, $r26;
        java.util.Iterator l6#110;
        java.lang.Object $r27;
        java.lang.IllegalStateException $r29;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        forceFlush := @parameter0: boolean;

        hooked#2 = 0;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void checkIfFrozen(boolean)>(0);

     label01:
        l3#7 = this;

        entermonitor this;

     label02:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void checkState(boolean)>(1);

        $r1 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State ABORTED>;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void setState(berkeley.com.sleepycat.je.Transaction$State)>($r1);

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean updateLoggedForTxn()>();

        if $z0 == 0 goto label08;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void preLogAbortHook()>();

        hooked#2 = 1;

        $z1 = <berkeley.com.sleepycat.je.txn.Txn: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        $z2 = specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean checkForValidReplicatorNodeId()>();

        if $z2 != 0 goto label03;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label03:
        $z3 = <berkeley.com.sleepycat.je.txn.Txn: boolean $assertionsDisabled>;

        if $z3 != 0 goto label05;

        $l0 = this.<berkeley.com.sleepycat.je.txn.Txn: long commitLsn>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label04;

        $l2 = this.<berkeley.com.sleepycat.je.txn.Txn: long abortLsn>;

        $b3 = $l2 cmp -1L;

        if $b3 == 0 goto label05;

     label04:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label05:
        $r4 = new berkeley.com.sleepycat.je.log.entry.AbortLogEntry;

        $r5 = new berkeley.com.sleepycat.je.txn.TxnAbort;

        $l4 = this.<berkeley.com.sleepycat.je.txn.Txn: long id>;

        $l5 = this.<berkeley.com.sleepycat.je.txn.Txn: long lastLoggedLsn>;

        $i6 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: int getReplicatorNodeId()>();

        $l7 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: long getDTVLSN()>();

        specialinvoke $r5.<berkeley.com.sleepycat.je.txn.TxnAbort: void <init>(long,long,int,long)>($l4, $l5, $i6, $l7);

        specialinvoke $r4.<berkeley.com.sleepycat.je.log.entry.AbortLogEntry: void <init>(berkeley.com.sleepycat.je.txn.TxnAbort)>($r5);

        abortEntry = $r4;

        if forceFlush == 0 goto label06;

        $r7 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r8 = virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $r9 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.log.ReplicationContext repContext>;

        $l8 = virtualinvoke $r8.<berkeley.com.sleepycat.je.log.LogManager: long logForceFlush(berkeley.com.sleepycat.je.log.entry.LogEntry,boolean,berkeley.com.sleepycat.je.log.ReplicationContext)>(abortEntry, 1, $r9);

        goto label07;

     label06:
        $r10 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r11 = virtualinvoke $r10.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $r12 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.log.ReplicationContext repContext>;

        $l8 = virtualinvoke $r11.<berkeley.com.sleepycat.je.log.LogManager: long log(berkeley.com.sleepycat.je.log.entry.LogEntry,berkeley.com.sleepycat.je.log.ReplicationContext)>(abortEntry, $r12);

     label07:
        this.<berkeley.com.sleepycat.je.txn.Txn: long abortLsn> = $l8;

     label08:
        exitmonitor l3#7;

     label09:
        goto label13;

     label10:
        $r13 := @caughtexception;

     label11:
        l5 = $r13;

        exitmonitor l3#7;

     label12:
        throw l5;

     label13:
        if hooked#2 == 0 goto label14;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void postLogAbortHook()>();

        hooked#67 = 0;

     label14:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void undo()>();

        goto label19;

     label15:
        $r14 := @caughtexception;

     label16:
        l6#70 = $r14;

     label17:
        if hooked#2 == 0 goto label18;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void postLogAbortHook()>();

        hooked#74 = 0;

     label18:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void undo()>();

        throw l6#70;

     label19:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void cleanupDatabaseImpls(boolean)>(0);

        l3#81 = this;

        entermonitor this;

     label20:
        openCursors = specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean checkCursorsForClose()>();

        $r16 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        logger = virtualinvoke $r16.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        $r17 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z4 = virtualinvoke logger.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r17);

        if $z4 == 0 goto label21;

        $r18 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Abort: id = ");

        $l9 = this.<berkeley.com.sleepycat.je.txn.Txn: long id>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" openCursors= ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(openCursors);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void fine(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>(logger, $r18, $r24);

     label21:
        $r25 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set openedDatabaseHandles>;

        if $r25 == null goto label23;

        $r26 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set openedDatabaseHandles>;

        l6#110 = interfaceinvoke $r26.<java.util.Set: java.util.Iterator iterator()>();

     label22:
        $z5 = interfaceinvoke l6#110.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label23;

        $r27 = interfaceinvoke l6#110.<java.util.Iterator: java.lang.Object next()>();

        handle = (berkeley.com.sleepycat.je.Database) $r27;

        staticinvoke <berkeley.com.sleepycat.je.DbInternal: void invalidate(berkeley.com.sleepycat.je.Database)>(handle);

        goto label22;

     label23:
        if openCursors == 0 goto label24;

        $r28 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r28.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void checkIfInvalid()>();

        $r29 = new java.lang.IllegalStateException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction ");

        $l10 = this.<berkeley.com.sleepycat.je.txn.Txn: long id>;

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" detected open cursors while aborting");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r34);

        throw $r29;

     label24:
        exitmonitor l3#81;

     label25:
        goto label29;

     label26:
        $r35 := @caughtexception;

     label27:
        l8 = $r35;

        exitmonitor l3#81;

     label28:
        throw l8;

     label29:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void close(boolean)>(0);

        $l11 = this.<berkeley.com.sleepycat.je.txn.Txn: long abortLsn>;

        $b12 = $l11 cmp -1L;

        if $b12 == 0 goto label34;

        staticinvoke <berkeley.com.sleepycat.je.dbi.TriggerManager: void runAbortTriggers(berkeley.com.sleepycat.je.txn.Txn)>(this);

        goto label34;

     label30:
        $r36 := @caughtexception;

     label31:
        l9 = $r36;

     label32:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void close(boolean)>(0);

        $l13 = this.<berkeley.com.sleepycat.je.txn.Txn: long abortLsn>;

        $b14 = $l13 cmp -1L;

        if $b14 == 0 goto label33;

        staticinvoke <berkeley.com.sleepycat.je.dbi.TriggerManager: void runAbortTriggers(berkeley.com.sleepycat.je.txn.Txn)>(this);

     label33:
        throw l9;

     label34:
        $l15 = this.<berkeley.com.sleepycat.je.txn.Txn: long abortLsn>;

        return $l15;

        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label01 to label13 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label20 to label25 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
        catch java.lang.Throwable from label01 to label29 with label30;
        catch java.lang.Throwable from label31 to label32 with label30;
    }

    protected void checkIfFrozen(boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean isCommit;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        isCommit := @parameter0: boolean;

        return;
    }

    public void checkState(boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean calledByAbort;
        int[] $r0;
        berkeley.com.sleepycat.je.Transaction$State $r1;
        int $i0, $i1;
        berkeley.com.sleepycat.je.OperationFailureException $r2, $r7, $r10;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r12, $r13, $r14, $r15;
        long $l2, $l3;
        java.lang.String $r9, $r16;
        java.lang.IllegalStateException $r11;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        calledByAbort := @parameter0: boolean;

        $r0 = <berkeley.com.sleepycat.je.txn.Txn$1: int[] $SwitchMap$berkeley$com$sleepycat$je$Transaction$State>;

        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction$State txnState>;

        $i0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.Transaction$State: int ordinal()>();

        $i1 = $r0[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label4;
        };

     label1:
        return;

     label2:
        if calledByAbort == 0 goto label3;

        return;

     label3:
        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.OperationFailureException onlyAbortableCause>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction ");

        $l2 = this.<berkeley.com.sleepycat.je.txn.Txn: long id>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be aborted, caused by: ");

        $r7 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.OperationFailureException onlyAbortableCause>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r2.<berkeley.com.sleepycat.je.OperationFailureException: berkeley.com.sleepycat.je.OperationFailureException wrapSelf(java.lang.String)>($r9);

        throw $r10;

     label4:
        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction ");

        $l3 = this.<berkeley.com.sleepycat.je.txn.Txn: long id>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been closed.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r11;
    }

    protected boolean updateLoggedForTxn()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        long $l0;
        byte $b1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $l0 = this.<berkeley.com.sleepycat.je.txn.Txn: long lastLoggedLsn>;

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void preLogAbortHook() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        return;
    }

    private boolean checkForValidReplicatorNodeId()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean $z0;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean isReplicated()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: int getReplicatorNodeId()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    protected int getReplicatorNodeId()
    {
        berkeley.com.sleepycat.je.txn.Txn this;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        return 0;
    }

    protected long getDTVLSN()
    {
        berkeley.com.sleepycat.je.txn.Txn this;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        return 0L;
    }

    protected void postLogAbortHook()
    {
        berkeley.com.sleepycat.je.txn.Txn this;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        return;
    }

    protected void undo() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this, $r11;
        java.util.HashSet alreadyUndoneLsns, $r0;
        java.util.TreeSet alreadyUndoneSlots, $r1;
        berkeley.com.sleepycat.je.tree.TreeLocation location, $r2;
        berkeley.com.sleepycat.je.txn.UndoReader undo;
        java.lang.String lsnMsg, $r15, $r21, $r23;
        java.util.Set empty, $r25;
        long undoLsn#9;
        byte $b0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r3, $r5, $r17;
        java.util.Map $r4;
        boolean $z0, $z1;
        java.util.logging.Logger $r6;
        java.util.logging.Level $r7;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r8;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry $r9, $r10;
        berkeley.com.sleepycat.je.DatabaseException $r12, e#43;
        java.lang.StringBuilder $r13, $r14, $r16, $r19, $r20, $r22;
        java.lang.RuntimeException $r18, e#62;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r24;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        alreadyUndoneLsns = $r0;

        $r1 = new java.util.TreeSet;

        specialinvoke $r1.<java.util.TreeSet: void <init>()>();

        alreadyUndoneSlots = $r1;

        $r2 = new berkeley.com.sleepycat.je.tree.TreeLocation;

        specialinvoke $r2.<berkeley.com.sleepycat.je.tree.TreeLocation: void <init>()>();

        location = $r2;

        undoLsn#9 = this.<berkeley.com.sleepycat.je.txn.Txn: long lastLoggedLsn>;

     label1:
        $b0 = undoLsn#9 cmp -1L;

        if $b0 == 0 goto label3;

        $r3 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r4 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map undoDatabases>;

        undo = staticinvoke <berkeley.com.sleepycat.je.txn.UndoReader: berkeley.com.sleepycat.je.txn.UndoReader create(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,long,java.util.Map)>($r3, undoLsn#9, $r4);

        $z0 = specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean firstInstance(java.util.Set,java.util.Set,berkeley.com.sleepycat.je.txn.UndoReader)>(alreadyUndoneLsns, alreadyUndoneSlots, undo);

        if $z0 == 0 goto label2;

        $r5 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r6 = virtualinvoke $r5.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        $r7 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r8 = undo.<berkeley.com.sleepycat.je.txn.UndoReader: berkeley.com.sleepycat.je.dbi.DatabaseImpl db>;

        $r9 = undo.<berkeley.com.sleepycat.je.txn.UndoReader: berkeley.com.sleepycat.je.log.entry.LNLogEntry logEntry>;

        staticinvoke <berkeley.com.sleepycat.je.recovery.RecoveryManager: void abortUndo(java.util.logging.Logger,java.util.logging.Level,berkeley.com.sleepycat.je.tree.TreeLocation,berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.log.entry.LNLogEntry,long)>($r6, $r7, location, $r8, $r9, undoLsn#9);

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean isRolledBack()>();

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void countObsoleteExact(long,berkeley.com.sleepycat.je.txn.UndoReader,boolean)>(undoLsn#9, undo, $z1);

     label2:
        $r10 = undo.<berkeley.com.sleepycat.je.txn.UndoReader: berkeley.com.sleepycat.je.log.entry.LNLogEntry logEntry>;

        $r11 = virtualinvoke $r10.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: berkeley.com.sleepycat.je.txn.Txn getUserTxn()>();

        undoLsn#9 = virtualinvoke $r11.<berkeley.com.sleepycat.je.txn.Txn: long getLastLsn()>();

        goto label1;

     label3:
        goto label6;

     label4:
        $r12 := @caughtexception;

        e#43 = $r12;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LSN=");

        $r15 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(undoLsn#9);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        lsnMsg = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void traceAndLogException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r17, "Txn", "undo", lsnMsg, e#43);

        virtualinvoke e#43.<berkeley.com.sleepycat.je.DatabaseException: void addErrorMessage(java.lang.String)>(lsnMsg);

        throw e#43;

     label5:
        $r18 := @caughtexception;

        e#62 = $r18;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Txn undo for LSN=");

        $r21 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(undoLsn#9);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.String,java.lang.Exception)>($r23, e#62);

        throw $r24;

     label6:
        $r25 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set readLocks>;

        if $r25 == null goto label7;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: int clearReadLocks()>();

     label7:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void setDeletedDatabaseState(boolean)>(0);

        empty = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void clearWriteLocks(java.util.Set)>(empty);

        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map deleteInfo> = null;

        return;

        catch berkeley.com.sleepycat.je.DatabaseException from label1 to label3 with label4;
        catch java.lang.RuntimeException from label1 to label3 with label5;
    }

    protected void cleanupDatabaseImpls(boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this, l3#5;
        boolean isCommit, $z0, $z1, $z2;
        berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo[] infoArray, l3#20;
        berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo info;
        java.util.Set $r0, $r2, $r3;
        int $i0, l4#23, l5#25;
        java.lang.Throwable $r5, l4#16;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r6, $r10;
        berkeley.com.sleepycat.je.dbi.DbTree $r7, $r11;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r8, $r9, $r12;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        isCommit := @parameter0: boolean;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set deletedDatabases>;

        if $r0 == null goto label12;

        l3#5 = this;

        entermonitor this;

     label01:
        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set deletedDatabases>;

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        infoArray = newarray (berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo)[$i0];

        $r3 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set deletedDatabases>;

        interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(infoArray);

        exitmonitor l3#5;

     label02:
        goto label06;

     label03:
        $r5 := @caughtexception;

     label04:
        l4#16 = $r5;

        exitmonitor l3#5;

     label05:
        throw l4#16;

     label06:
        l3#20 = infoArray;

        l4#23 = lengthof l3#20;

        l5#25 = 0;

     label07:
        if l5#25 >= l4#23 goto label11;

        info = l3#20[l5#25];

        $z0 = info.<berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo: boolean deleteAtCommit>;

        if $z0 != isCommit goto label09;

        $z1 = specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean checkRepeatedDeletedDB(berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo[],berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo)>(infoArray, info);

        if $z1 == 0 goto label08;

        $r6 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r7 = virtualinvoke $r6.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r8 = info.<berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo: berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke $r7.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r8);

     label08:
        $r9 = info.<berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo: berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke $r9.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void finishDeleteProcessing()>();

        goto label10;

     label09:
        $z2 = specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean checkRepeatedDeletedDB(berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo[],berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo)>(infoArray, info);

        if $z2 != 0 goto label10;

        $r10 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r11 = virtualinvoke $r10.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r12 = info.<berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo: berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke $r11.<berkeley.com.sleepycat.je.dbi.DbTree: void releaseDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r12);

     label10:
        l5#25 = l5#25 + 1;

        goto label07;

     label11:
        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set deletedDatabases> = null;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
    }

    private boolean checkCursorsForClose()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        java.util.concurrent.atomic.AtomicInteger $r0;
        int $i0;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.concurrent.atomic.AtomicInteger cursors>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void close(boolean)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean isCommit;
        berkeley.com.sleepycat.je.Transaction$State $r0, $r1, $r2, $r3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r4;
        berkeley.com.sleepycat.je.txn.TxnManager $r5;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        isCommit := @parameter0: boolean;

        if isCommit == 0 goto label1;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction$State txnState>;

        $r1 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State OPEN>;

        if $r0 != $r1 goto label2;

        $r2 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State COMMITTED>;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void setState(berkeley.com.sleepycat.je.Transaction$State)>($r2);

        goto label2;

     label1:
        $r3 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State ABORTED>;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void setState(berkeley.com.sleepycat.je.Transaction$State)>($r3);

     label2:
        $r4 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r5 = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.txn.TxnManager getTxnManager()>();

        virtualinvoke $r5.<berkeley.com.sleepycat.je.txn.TxnManager: void unRegisterTxn(berkeley.com.sleepycat.je.txn.Txn,boolean)>(this, isCommit);

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void close()>();

        return;
    }

    private boolean checkRepeatedDeletedDB(berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo[], berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo[] infoArray, l3;
        berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo info, element;
        int l4, l5#5;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0, $r2;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r1, $r3;
        boolean $z0, $z1, $z2;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        infoArray := @parameter0: berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo[];

        info := @parameter1: berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo;

        l3 = infoArray;

        l4 = lengthof l3;

        l5#5 = 0;

     label1:
        if l5#5 >= l4 goto label3;

        element = l3[l5#5];

        $r0 = element.<berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo: berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        $r2 = info.<berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo: berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        $z0 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseId: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $z1 = element.<berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo: boolean deleteAtCommit>;

        $z2 = info.<berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo: boolean deleteAtCommit>;

        if $z1 == $z2 goto label2;

        return 1;

     label2:
        l5#5 = l5#5 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean firstInstance(java.util.Set, java.util.Set, berkeley.com.sleepycat.je.txn.UndoReader)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        java.util.Set seenLsns, seenSlots;
        berkeley.com.sleepycat.je.txn.UndoReader undo;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry undoEntry;
        long abortLsn1;
        berkeley.com.sleepycat.je.txn.TxnChain$CompareSlot slot, $r1;
        byte $b0;
        java.lang.Long $r0;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r2;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        seenLsns := @parameter0: java.util.Set;

        seenSlots := @parameter1: java.util.Set;

        undo := @parameter2: berkeley.com.sleepycat.je.txn.UndoReader;

        undoEntry = undo.<berkeley.com.sleepycat.je.txn.UndoReader: berkeley.com.sleepycat.je.log.entry.LNLogEntry logEntry>;

        abortLsn1 = virtualinvoke undoEntry.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: long getAbortLsn()>();

        $b0 = abortLsn1 cmp -1L;

        if $b0 == 0 goto label1;

        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(abortLsn1);

        $z0 = interfaceinvoke seenLsns.<java.util.Set: boolean add(java.lang.Object)>($r0);

        return $z0;

     label1:
        $r1 = new berkeley.com.sleepycat.je.txn.TxnChain$CompareSlot;

        $r2 = undo.<berkeley.com.sleepycat.je.txn.UndoReader: berkeley.com.sleepycat.je.dbi.DatabaseImpl db>;

        specialinvoke $r1.<berkeley.com.sleepycat.je.txn.TxnChain$CompareSlot: void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl,berkeley.com.sleepycat.je.log.entry.LNLogEntry)>($r2, undoEntry);

        slot = $r1;

        $z1 = interfaceinvoke seenSlots.<java.util.Set: boolean add(java.lang.Object)>(slot);

        return $z1;
    }

    public boolean isRolledBack()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        byte $b0, $b1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $b0 = this.<berkeley.com.sleepycat.je.txn.Txn: byte txnFlags>;

        $b1 = $b0 & 4;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void countObsoleteExact(long, berkeley.com.sleepycat.je.txn.UndoReader, boolean)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        long undoLsn;
        berkeley.com.sleepycat.je.txn.UndoReader undo;
        boolean obsoleteDupsAllowed, $z0;
        berkeley.com.sleepycat.je.log.LogManager logManager;
        berkeley.com.sleepycat.je.log.entry.LNLogEntry $r0;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1, $r3, $r4;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r2;
        int $i0, $i1;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        undoLsn := @parameter0: long;

        undo := @parameter1: berkeley.com.sleepycat.je.txn.UndoReader;

        obsoleteDupsAllowed := @parameter2: boolean;

        $r0 = undo.<berkeley.com.sleepycat.je.txn.UndoReader: berkeley.com.sleepycat.je.log.entry.LNLogEntry logEntry>;

        $r1 = undo.<berkeley.com.sleepycat.je.txn.UndoReader: berkeley.com.sleepycat.je.dbi.DatabaseImpl db>;

        $z0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.log.entry.LNLogEntry: boolean isImmediatelyObsolete(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        logManager = virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        if obsoleteDupsAllowed == 0 goto label2;

        $i0 = undo.<berkeley.com.sleepycat.je.txn.UndoReader: int logEntrySize>;

        $r3 = undo.<berkeley.com.sleepycat.je.txn.UndoReader: berkeley.com.sleepycat.je.dbi.DatabaseImpl db>;

        virtualinvoke logManager.<berkeley.com.sleepycat.je.log.LogManager: void countObsoleteNodeDupsAllowed(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(undoLsn, null, $i0, $r3);

        goto label3;

     label2:
        $i1 = undo.<berkeley.com.sleepycat.je.txn.UndoReader: int logEntrySize>;

        $r4 = undo.<berkeley.com.sleepycat.je.txn.UndoReader: berkeley.com.sleepycat.je.dbi.DatabaseImpl db>;

        virtualinvoke logManager.<berkeley.com.sleepycat.je.log.LogManager: void countObsoleteNode(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl,boolean)>(undoLsn, null, $i1, $r4, 1);

     label3:
        return;
    }

    protected int clearReadLocks() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        java.util.Iterator iter;
        java.lang.Long rLockNid;
        int numReadLocks#2;
        java.util.Set $r0, $r1, $r2;
        boolean $z0;
        java.lang.Object $r3;
        berkeley.com.sleepycat.je.txn.LockManager $r4;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        numReadLocks#2 = 0;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set readLocks>;

        if $r0 == null goto label3;

        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set readLocks>;

        numReadLocks#2 = interfaceinvoke $r1.<java.util.Set: int size()>();

        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set readLocks>;

        iter = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        rLockNid = (java.lang.Long) $r3;

        $r4 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.txn.LockManager lockManager>;

        $l0 = virtualinvoke rLockNid.<java.lang.Long: long longValue()>();

        virtualinvoke $r4.<berkeley.com.sleepycat.je.txn.LockManager: boolean release(long,berkeley.com.sleepycat.je.txn.Locker)>($l0, this);

        goto label1;

     label2:
        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set readLocks> = null;

     label3:
        return numReadLocks#2;
    }

    protected void setDeletedDatabaseState(boolean)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean isCommit, $z0, $z1;
        java.util.Iterator iter;
        berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo info;
        java.util.Set $r0, $r1;
        java.lang.Object $r2;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r3;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        isCommit := @parameter0: boolean;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set deletedDatabases>;

        if $r0 == null goto label3;

        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set deletedDatabases>;

        iter = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        info = (berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo) $r2;

        $z1 = info.<berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo: boolean deleteAtCommit>;

        if $z1 != isCommit goto label2;

        $r3 = info.<berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo: berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl>;

        virtualinvoke $r3.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void startDeleteProcessing()>();

     label2:
        goto label1;

     label3:
        return;
    }

    protected void clearWriteLocks(java.util.Set) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        java.util.Set retainedNodes, $r2;
        java.util.Iterator iter;
        java.util.Map$Entry entry;
        java.lang.Long lsn;
        java.util.Map $r0, $r1, $r6;
        boolean $z0, $z1;
        java.lang.Object $r3, $r4;
        berkeley.com.sleepycat.je.txn.LockManager $r5;
        long $l0;
        int $i1;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        retainedNodes := @parameter0: java.util.Set;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        if $r0 != null goto label1;

        return;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        iter = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke iter.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke iter.<java.util.Iterator: java.lang.Object next()>();

        entry = (java.util.Map$Entry) $r3;

        $r4 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();

        lsn = (java.lang.Long) $r4;

        $z1 = interfaceinvoke retainedNodes.<java.util.Set: boolean contains(java.lang.Object)>(lsn);

        if $z1 != 0 goto label3;

        $r5 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.txn.LockManager lockManager>;

        $l0 = virtualinvoke lsn.<java.lang.Long: long longValue()>();

        virtualinvoke $r5.<berkeley.com.sleepycat.je.txn.LockManager: boolean release(long,berkeley.com.sleepycat.je.txn.Locker)>($l0, this);

        interfaceinvoke iter.<java.util.Iterator: void remove()>();

     label3:
        goto label2;

     label4:
        $r6 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        $i1 = interfaceinvoke $r6.<java.util.Map: int size()>();

        if $i1 != 0 goto label5;

        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo> = null;

     label5:
        return;
    }

    public java.util.Set getTriggerDbs()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        java.util.Set $r0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set triggerDbs>;

        return $r0;
    }

    public long commit(berkeley.com.sleepycat.je.Durability) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this, l3#9;
        berkeley.com.sleepycat.je.Durability durability;
        int numReadLocks, numWriteLocks#32, $i2;
        berkeley.com.sleepycat.je.log.LogItem commitItem;
        berkeley.com.sleepycat.je.DatabaseException hookException, queuedPostCommitException#4, $r10;
        java.lang.Throwable l9, l10, $r20, $r44;
        java.lang.Error e, $r27;
        java.lang.RuntimeException commitException, $r29;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r34, $r35, $r36, $r37, $r39;
        long $l0, $l1, l3#99, $l3, $l5;
        java.lang.String $r6, $r38, $r40;
        java.util.Collection obsoleteLsns#34, $r18;
        java.util.Map $r7, $r8, $r14, $r15, $r17, $r19;
        berkeley.com.sleepycat.je.Durability$SyncPolicy $r9;
        berkeley.com.sleepycat.je.Transaction$State $r11, $r12, $r21, $r22, $r23, $r24, $r25, $r26, $r41, $r42, $r43, $r45, $r46, $r47;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r13, $r31;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r16, $r28, $r30, $r32;
        byte $b4;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r33;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        durability := @parameter0: berkeley.com.sleepycat.je.Durability;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void checkIfFrozen(boolean)>(1);

        queuedPostCommitException#4 = null;

        this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Durability commitDurability> = durability;

     label01:
        l3#9 = this;

        entermonitor this;

     label02:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void checkState(boolean)>(0);

        $z0 = specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean checkCursorsForClose()>();

        if $z0 == 0 goto label03;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction ");

        $l0 = this.<berkeley.com.sleepycat.je.txn.Txn: long id>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" commit failed because there were open cursors.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label03:
        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean updateLoggedForTxn()>();

        if $z1 == 0 goto label04;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void preLogCommitHook()>();

     label04:
        numReadLocks = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: int clearReadLocks()>();

        numWriteLocks#32 = 0;

        obsoleteLsns#34 = null;

        $r7 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        if $r7 == null goto label05;

        $r8 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        numWriteLocks#32 = interfaceinvoke $r8.<java.util.Map: int size()>();

        obsoleteLsns#34 = specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Collection getObsoleteLsnInfo()>();

     label05:
        $z2 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean updateLoggedForTxn()>();

        if $z2 == 0 goto label11;

        $r9 = virtualinvoke durability.<berkeley.com.sleepycat.je.Durability: berkeley.com.sleepycat.je.Durability$SyncPolicy getLocalSync()>();

        commitItem = specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.log.LogItem logCommitEntry(berkeley.com.sleepycat.je.Durability$SyncPolicy,java.util.Collection)>($r9, obsoleteLsns#34);

        $l1 = commitItem.<berkeley.com.sleepycat.je.log.LogItem: long lsn>;

        this.<berkeley.com.sleepycat.je.txn.Txn: long commitLsn> = $l1;

     label06:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void postLogCommitHook(berkeley.com.sleepycat.je.log.LogItem)>(commitItem);

     label07:
        goto label11;

     label08:
        $r10 := @caughtexception;

        hookException = $r10;

        $r11 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction$State txnState>;

        $r12 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State MUST_ABORT>;

        if $r11 != $r12 goto label09;

        $r13 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.String,java.lang.Exception)>("postLogCommitHook may not set MUST_ABORT", hookException);

        throw $r13;

     label09:
        $z3 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean propagatePostCommitException(berkeley.com.sleepycat.je.DatabaseException)>(hookException);

        if $z3 != 0 goto label10;

        throw hookException;

     label10:
        queuedPostCommitException#4 = hookException;

     label11:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void setDeletedDatabaseState(boolean)>(1);

        if numWriteLocks#32 <= 0 goto label12;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void releaseWriteLocks()>();

     label12:
        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo> = null;

        $r14 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map deleteInfo>;

        if $r14 == null goto label13;

        $r15 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map deleteInfo>;

        $i2 = interfaceinvoke $r15.<java.util.Map: int size()>();

        if $i2 <= 0 goto label13;

        $r16 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r17 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map deleteInfo>;

        $r18 = interfaceinvoke $r17.<java.util.Map: java.util.Collection values()>();

        virtualinvoke $r16.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void addToCompressorQueue(java.util.Collection)>($r18);

        $r19 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map deleteInfo>;

        interfaceinvoke $r19.<java.util.Map: void clear()>();

     label13:
        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void traceCommit(int,int)>(numWriteLocks#32, numReadLocks);

        exitmonitor l3#9;

     label14:
        goto label18;

     label15:
        $r20 := @caughtexception;

     label16:
        l9 = $r20;

        exitmonitor l3#9;

     label17:
        throw l9;

     label18:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void cleanupDatabaseImpls(boolean)>(1);

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void close(boolean)>(1);

        if queuedPostCommitException#4 != null goto label21;

        staticinvoke <berkeley.com.sleepycat.je.dbi.TriggerManager: void runCommitTriggers(berkeley.com.sleepycat.je.txn.Txn)>(this);

        l3#99 = this.<berkeley.com.sleepycat.je.txn.Txn: long commitLsn>;

     label19:
        $r21 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction$State txnState>;

        $r22 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State OPEN>;

        if $r21 != $r22 goto label20;

        $r23 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State COMMITTED>;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void setState(berkeley.com.sleepycat.je.Transaction$State)>($r23);

     label20:
        return l3#99;

     label21:
        $r24 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction$State txnState>;

        $r25 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State OPEN>;

        if $r24 != $r25 goto label32;

        $r26 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State COMMITTED>;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void setState(berkeley.com.sleepycat.je.Transaction$State)>($r26);

        goto label32;

     label22:
        $r27 := @caughtexception;

     label23:
        e = $r27;

        $r28 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r28.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(e);

        throw e;

     label24:
        $r29 := @caughtexception;

        commitException = $r29;

        $r30 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z4 = virtualinvoke $r30.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        if $z4 != 0 goto label25;

        throw commitException;

     label25:
        $l3 = this.<berkeley.com.sleepycat.je.txn.Txn: long commitLsn>;

        $b4 = $l3 cmp -1L;

        if $b4 == 0 goto label26;

        $r31 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r32 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r33 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INCOMPLETE>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed after commiting transaction ");

        $l5 = this.<berkeley.com.sleepycat.je.txn.Txn: long id>;

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" during post transaction cleanup.Original exception = ");

        $r38 = virtualinvoke commitException.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>($r32, $r33, $r40, commitException);

        throw $r31;

     label26:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void checkIfFrozen(boolean)>(1);

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void throwPreCommitException(berkeley.com.sleepycat.je.Durability,java.lang.RuntimeException)>(durability, commitException);

     label27:
        $r41 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction$State txnState>;

        $r42 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State OPEN>;

        if $r41 != $r42 goto label32;

        $r43 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State COMMITTED>;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void setState(berkeley.com.sleepycat.je.Transaction$State)>($r43);

        goto label32;

     label28:
        $r44 := @caughtexception;

     label29:
        l10 = $r44;

     label30:
        $r45 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction$State txnState>;

        $r46 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State OPEN>;

        if $r45 != $r46 goto label31;

        $r47 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State COMMITTED>;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void setState(berkeley.com.sleepycat.je.Transaction$State)>($r47);

     label31:
        throw l10;

     label32:
        throw queuedPostCommitException#4;

        catch berkeley.com.sleepycat.je.DatabaseException from label06 to label07 with label08;
        catch java.lang.Throwable from label02 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Error from label01 to label19 with label22;
        catch java.lang.RuntimeException from label01 to label19 with label24;
        catch java.lang.Throwable from label01 to label19 with label28;
        catch java.lang.Throwable from label23 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    protected void preLogCommitHook() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        return;
    }

    private java.util.Collection getObsoleteLsnInfo()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        java.util.HashMap map, $r0;
        java.util.Iterator l2;
        berkeley.com.sleepycat.je.txn.WriteLockInfo info;
        java.util.Map $r1;
        java.util.Collection $r2, $r4;
        boolean $z0;
        java.lang.Object $r3;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        map = $r0;

        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        l2 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke l2.<java.util.Iterator: java.lang.Object next()>();

        info = (berkeley.com.sleepycat.je.txn.WriteLockInfo) $r3;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void maybeCountObsoleteLSN(java.util.Map,berkeley.com.sleepycat.je.txn.WriteLockInfo)>(map, info);

        goto label1;

     label2:
        $r4 = interfaceinvoke map.<java.util.Map: java.util.Collection values()>();

        return $r4;
    }

    private berkeley.com.sleepycat.je.log.LogItem logCommitEntry(berkeley.com.sleepycat.je.Durability$SyncPolicy, java.util.Collection) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.Durability$SyncPolicy flushSyncBehavior;
        java.util.Collection obsoleteLsns;
        berkeley.com.sleepycat.je.log.LogManager logManager;
        berkeley.com.sleepycat.je.log.entry.CommitLogEntry commitEntry, $r2;
        berkeley.com.sleepycat.je.log.LogParams params, $r4;
        berkeley.com.sleepycat.je.log.LogItem item, l8;
        java.lang.Throwable l9, $r15;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r10, $r11, $r14;
        boolean $z0, $z1, logSuccess#49, $z2;
        java.lang.AssertionError $r1;
        berkeley.com.sleepycat.je.txn.TxnCommit $r3;
        long $l0, $l1, $l3;
        int $i2, $i4, $i5;
        berkeley.com.sleepycat.je.log.Provisional $r5;
        berkeley.com.sleepycat.je.log.ReplicationContext $r6;
        int[] $r7;
        berkeley.com.sleepycat.je.Transaction$State $r8, $r16;
        java.lang.RuntimeException $r9, e#60;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r12;
        java.lang.Error $r13, e#71;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        flushSyncBehavior := @parameter0: berkeley.com.sleepycat.je.Durability$SyncPolicy;

        obsoleteLsns := @parameter1: java.util.Collection;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        logManager = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.LogManager getLogManager()>();

        $z0 = <berkeley.com.sleepycat.je.txn.Txn: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z1 = specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean checkForValidReplicatorNodeId()>();

        if $z1 != 0 goto label01;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label01:
        $r2 = new berkeley.com.sleepycat.je.log.entry.CommitLogEntry;

        $r3 = new berkeley.com.sleepycat.je.txn.TxnCommit;

        $l0 = this.<berkeley.com.sleepycat.je.txn.Txn: long id>;

        $l1 = this.<berkeley.com.sleepycat.je.txn.Txn: long lastLoggedLsn>;

        $i2 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: int getReplicatorNodeId()>();

        $l3 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: long getDTVLSN()>();

        specialinvoke $r3.<berkeley.com.sleepycat.je.txn.TxnCommit: void <init>(long,long,int,long)>($l0, $l1, $i2, $l3);

        specialinvoke $r2.<berkeley.com.sleepycat.je.log.entry.CommitLogEntry: void <init>(berkeley.com.sleepycat.je.txn.TxnCommit)>($r3);

        commitEntry = $r2;

        $r4 = new berkeley.com.sleepycat.je.log.LogParams;

        specialinvoke $r4.<berkeley.com.sleepycat.je.log.LogParams: void <init>()>();

        params = $r4;

        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.entry.LogEntry entry> = commitEntry;

        $r5 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional NO>;

        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.Provisional provisional> = $r5;

        $r6 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.log.ReplicationContext repContext>;

        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.ReplicationContext repContext> = $r6;

        params.<berkeley.com.sleepycat.je.log.LogParams: java.util.Collection obsoleteWriteLockInfo> = obsoleteLsns;

        $r7 = <berkeley.com.sleepycat.je.txn.Txn$1: int[] $SwitchMap$berkeley$com$sleepycat$je$Durability$SyncPolicy>;

        $i4 = virtualinvoke flushSyncBehavior.<berkeley.com.sleepycat.je.Durability$SyncPolicy: int ordinal()>();

        $i5 = $r7[$i4];

        lookupswitch($i5)
        {
            case 1: goto label02;
            case 2: goto label03;
            default: goto label04;
        };

     label02:
        params.<berkeley.com.sleepycat.je.log.LogParams: boolean flushRequired> = 1;

        params.<berkeley.com.sleepycat.je.log.LogParams: boolean fsyncRequired> = 1;

        goto label05;

     label03:
        params.<berkeley.com.sleepycat.je.log.LogParams: boolean flushRequired> = 1;

        params.<berkeley.com.sleepycat.je.log.LogParams: boolean fsyncRequired> = 0;

        goto label05;

     label04:
        params.<berkeley.com.sleepycat.je.log.LogParams: boolean flushRequired> = 0;

        params.<berkeley.com.sleepycat.je.log.LogParams: boolean fsyncRequired> = 0;

     label05:
        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void preLogCommitCheck()>();

        logSuccess#49 = 0;

     label06:
        item = virtualinvoke logManager.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogItem log(berkeley.com.sleepycat.je.log.LogParams)>(params);

        logSuccess#49 = 1;

        l8 = item;

     label07:
        if logSuccess#49 != 0 goto label08;

        $r8 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State POSSIBLY_COMMITTED>;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void setState(berkeley.com.sleepycat.je.Transaction$State)>($r8);

     label08:
        return l8;

     label09:
        $r9 := @caughtexception;

     label10:
        e#60 = $r9;

        $r10 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z2 = virtualinvoke $r10.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        if $z2 == 0 goto label11;

        $r11 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r12 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.Exception)>($r11, "Unexpected non-fatal exception while logging commit", e#60);

        throw $r12;

     label11:
        throw e#60;

     label12:
        $r13 := @caughtexception;

        e#71 = $r13;

        $r14 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r14.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(e#71);

        throw e#71;

     label13:
        $r15 := @caughtexception;

        l9 = $r15;

     label14:
        if logSuccess#49 != 0 goto label15;

        $r16 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State POSSIBLY_COMMITTED>;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void setState(berkeley.com.sleepycat.je.Transaction$State)>($r16);

     label15:
        throw l9;

        catch java.lang.RuntimeException from label06 to label07 with label09;
        catch java.lang.Error from label06 to label07 with label12;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label10 to label14 with label13;
    }

    protected void postLogCommitHook(berkeley.com.sleepycat.je.log.LogItem) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.log.LogItem commitItem;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        commitItem := @parameter0: berkeley.com.sleepycat.je.log.LogItem;

        return;
    }

    protected boolean propagatePostCommitException(berkeley.com.sleepycat.je.DatabaseException)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.DatabaseException postCommitException;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        postCommitException := @parameter0: berkeley.com.sleepycat.je.DatabaseException;

        return 0;
    }

    protected void releaseWriteLocks() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        java.util.Iterator l1;
        java.lang.Long lsn;
        java.util.Map $r0, $r1;
        java.util.Set $r2;
        boolean $z0;
        java.lang.Object $r3;
        berkeley.com.sleepycat.je.txn.LockManager $r4;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        if $r0 != null goto label1;

        return;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        l1 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        lsn = (java.lang.Long) $r3;

        $r4 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.txn.LockManager lockManager>;

        $l0 = virtualinvoke lsn.<java.lang.Long: long longValue()>();

        virtualinvoke $r4.<berkeley.com.sleepycat.je.txn.LockManager: boolean release(long,berkeley.com.sleepycat.je.txn.Locker)>($l0, this);

        goto label2;

     label3:
        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo> = null;

        return;
    }

    private void traceCommit(int, int)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        int numWriteLocks, numReadLocks;
        java.util.logging.Logger logger;
        java.lang.StringBuilder sb, $r2, $r3, $r5, $r7;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r9;
        java.util.logging.Level $r1;
        boolean $z0;
        long $l0;
        java.lang.String $r10;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        numWriteLocks := @parameter0: int;

        numReadLocks := @parameter1: int;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        logger = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: java.util.logging.Logger getLogger()>();

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke logger.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        sb = $r2;

        $r3 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Commit: id = ");

        $l0 = this.<berkeley.com.sleepycat.je.txn.Txn: long id>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" numWriteLocks=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(numWriteLocks);

        $r7 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" numReadLocks = ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(numReadLocks);

        $r9 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r10 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void fine(java.util.logging.Logger,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>(logger, $r9, $r10);

     label1:
        return;
    }

    private void throwPreCommitException(berkeley.com.sleepycat.je.Durability, java.lang.RuntimeException)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.Durability durability;
        java.lang.RuntimeException preCommitException, abortT2, $r11;
        java.lang.Error e, $r9;
        java.lang.String message, $r8, $r17, $r20, $r32, $r34;
        berkeley.com.sleepycat.je.Durability$SyncPolicy $r1, $r2;
        boolean $z0, $z1, $z2, $z3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r3, $r10, $r12, $r24, $r27;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r13, $r14, $r15, $r16, $r18, $r19, $r21, $r28, $r29, $r30, $r31, $r33;
        long $l1, $l2, $l3, $l5;
        java.util.Map $r22;
        byte $b4;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r23, $r35;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r25;
        java.util.logging.Level $r26;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        durability := @parameter0: berkeley.com.sleepycat.je.Durability;

        preCommitException := @parameter1: java.lang.RuntimeException;

     label01:
        $r1 = virtualinvoke durability.<berkeley.com.sleepycat.je.Durability: berkeley.com.sleepycat.je.Durability$SyncPolicy getLocalSync()>();

        $r2 = <berkeley.com.sleepycat.je.Durability$SyncPolicy: berkeley.com.sleepycat.je.Durability$SyncPolicy SYNC>;

        if $r1 != $r2 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: long abortInternal(boolean)>($z0);

        $r3 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Commit of transaction ");

        $l1 = this.<berkeley.com.sleepycat.je.txn.Txn: long id>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void traceAndLogException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r3, "Txn", "commit", $r8, preCommitException);

     label04:
        goto label09;

     label05:
        $r9 := @caughtexception;

        e = $r9;

        $r10 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r10.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(e);

        throw e;

     label06:
        $r11 := @caughtexception;

        abortT2 = $r11;

        $r12 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z1 = virtualinvoke $r12.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        if $z1 != 0 goto label07;

        throw abortT2;

     label07:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed while attempting to commit transaction ");

        $l2 = this.<berkeley.com.sleepycat.je.txn.Txn: long id>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". The attempt to abort also failed. The original exception seen from commit = ");

        $r17 = virtualinvoke preCommitException.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" The exception from the cleanup = ");

        $r20 = virtualinvoke abortT2.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        message = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        if $r22 == null goto label08;

        $l3 = this.<berkeley.com.sleepycat.je.txn.Txn: long abortLsn>;

        $b4 = $l3 cmp -1L;

        if $b4 != 0 goto label08;

        $r23 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r24 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r25 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INCOMPLETE>;

        specialinvoke $r23.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String,java.lang.Throwable)>($r24, $r25, message, preCommitException);

        throw $r23;

     label08:
        $r26 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r27 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: void envLogMsg(java.util.logging.Level,berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r26, $r27, message);

     label09:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void postLogCommitAbortHook()>();

        $z2 = preCommitException instanceof berkeley.com.sleepycat.je.DatabaseException;

        if $z2 != 0 goto label10;

        $z3 = preCommitException instanceof java.lang.IllegalStateException;

        if $z3 == 0 goto label11;

     label10:
        throw preCommitException;

     label11:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed while attempting to commit transaction ");

        $l5 = this.<berkeley.com.sleepycat.je.txn.Txn: long id>;

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", aborted instead. Original exception = ");

        $r32 = virtualinvoke preCommitException.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.String,java.lang.Exception)>($r34, preCommitException);

        throw $r35;

        catch java.lang.Error from label01 to label04 with label05;
        catch java.lang.RuntimeException from label01 to label04 with label06;
    }

    protected void postLogCommitAbortHook()
    {
        berkeley.com.sleepycat.je.txn.Txn this;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        return;
    }

    private void preLogCommitCheck()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean $z0;
        berkeley.com.sleepycat.je.ThreadInterruptedException $r0;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1, $r2;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label1;

        $r0 = new berkeley.com.sleepycat.je.ThreadInterruptedException;

        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke $r0.<berkeley.com.sleepycat.je.ThreadInterruptedException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r1, "Thread interrupted prior to logging the commit");

        throw $r0;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r2.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void checkIfInvalid()>();

        return;
    }

    private void maybeCountObsoleteLSN(java.util.Map, berkeley.com.sleepycat.je.txn.WriteLockInfo)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        java.util.Map obsoleteLsnSet;
        berkeley.com.sleepycat.je.txn.WriteLockInfo info;
        java.lang.Long longLsn;
        long $l0, $l2;
        byte $b1;
        boolean $z0, $z1, $z2;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r0, $r1;
        byte[] $r2;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        obsoleteLsnSet := @parameter0: java.util.Map;

        info := @parameter1: berkeley.com.sleepycat.je.txn.WriteLockInfo;

        $l0 = virtualinvoke info.<berkeley.com.sleepycat.je.txn.WriteLockInfo: long getAbortLsn()>();

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label1;

        $z0 = virtualinvoke info.<berkeley.com.sleepycat.je.txn.WriteLockInfo: boolean getAbortKnownDeleted()>();

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        $r0 = virtualinvoke info.<berkeley.com.sleepycat.je.txn.WriteLockInfo: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb()>();

        if $r0 == null goto label3;

        $r1 = virtualinvoke info.<berkeley.com.sleepycat.je.txn.WriteLockInfo: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb()>();

        $z1 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean isLNImmediatelyObsolete()>();

        if $z1 == 0 goto label3;

        return;

     label3:
        $r2 = virtualinvoke info.<berkeley.com.sleepycat.je.txn.WriteLockInfo: byte[] getAbortData()>();

        if $r2 == null goto label4;

        return;

     label4:
        $l2 = virtualinvoke info.<berkeley.com.sleepycat.je.txn.WriteLockInfo: long getAbortLsn()>();

        longLsn = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $z2 = interfaceinvoke obsoleteLsnSet.<java.util.Map: boolean containsKey(java.lang.Object)>(longLsn);

        if $z2 != 0 goto label5;

        interfaceinvoke obsoleteLsnSet.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(longLsn, info);

     label5:
        return;
    }

    public berkeley.com.sleepycat.je.Transaction getTransaction()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.Transaction $r0, $r1;
        berkeley.com.sleepycat.je.txn.Txn$AutoTransaction $r2;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction transaction>;

        if $r0 == null goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction transaction>;

        goto label2;

     label1:
        $r2 = new berkeley.com.sleepycat.je.txn.Txn$AutoTransaction;

        specialinvoke $r2.<berkeley.com.sleepycat.je.txn.Txn$AutoTransaction: void <init>(berkeley.com.sleepycat.je.txn.Txn)>(this);

        $r1 = $r2;

        this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction transaction> = $r2;

     label2:
        return $r1;
    }

    public berkeley.com.sleepycat.je.dbi.EnvironmentImpl getEnvironmentImpl()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        return $r0;
    }

    public void setTransaction(berkeley.com.sleepycat.je.Transaction)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.Transaction transaction;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        transaction := @parameter0: berkeley.com.sleepycat.je.Transaction;

        this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction transaction> = transaction;

        return;
    }

    public boolean isTransactional()
    {
        berkeley.com.sleepycat.je.txn.Txn this;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        return 1;
    }

    public void checkPreempted(berkeley.com.sleepycat.je.txn.Locker) throws berkeley.com.sleepycat.je.OperationFailureException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.txn.Locker allowPreemptedLocker;
        berkeley.com.sleepycat.je.utilint.TinyHashSet l2, $r0, $r1, $r2;
        java.util.Iterator l3;
        berkeley.com.sleepycat.je.txn.BuddyLocker buddy;
        java.lang.Throwable l5, $r4;
        boolean $z0;
        java.lang.Object $r3;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        allowPreemptedLocker := @parameter0: berkeley.com.sleepycat.je.txn.Locker;

        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void throwIfPreempted(berkeley.com.sleepycat.je.txn.Locker)>(allowPreemptedLocker);

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.utilint.TinyHashSet buddyLockers>;

        if $r0 == null goto label8;

        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.utilint.TinyHashSet buddyLockers>;

        l2 = $r1;

        entermonitor $r1;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.utilint.TinyHashSet buddyLockers>;

        l3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.utilint.TinyHashSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        buddy = (berkeley.com.sleepycat.je.txn.BuddyLocker) $r3;

        virtualinvoke buddy.<berkeley.com.sleepycat.je.txn.BuddyLocker: void throwIfPreempted(berkeley.com.sleepycat.je.txn.Locker)>(allowPreemptedLocker);

        goto label2;

     label3:
        exitmonitor l2;

     label4:
        goto label8;

     label5:
        $r4 := @caughtexception;

     label6:
        l5 = $r4;

        exitmonitor l2;

     label7:
        throw l5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void registerCursor(berkeley.com.sleepycat.je.dbi.CursorImpl)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.dbi.CursorImpl cursor;
        java.util.concurrent.atomic.AtomicInteger $r0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        cursor := @parameter0: berkeley.com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.concurrent.atomic.AtomicInteger cursors>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        return;
    }

    protected long generateId(berkeley.com.sleepycat.je.txn.TxnManager, long)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.txn.TxnManager txnManager;
        long ignore, $l0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        txnManager := @parameter0: berkeley.com.sleepycat.je.txn.TxnManager;

        ignore := @parameter1: long;

        $l0 = virtualinvoke txnManager.<berkeley.com.sleepycat.je.txn.TxnManager: long getNextTxnId()>();

        return $l0;
    }

    public void noteTriggerDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        java.util.Set $r0, $r2, $r3;
        java.util.HashSet $r1;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set triggerDbs>;

        if $r0 != null goto label1;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r1);

        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set triggerDbs> = $r2;

     label1:
        $r3 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set triggerDbs>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(dbImpl);

        return;
    }

    public boolean getImportunate()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        byte $b0, $b1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $b0 = this.<berkeley.com.sleepycat.je.txn.Txn: byte txnFlags>;

        $b1 = $b0 & 8;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setImportunate(boolean)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean importunate;
        byte $b0, $b1, $b2, $b3, $b4, $b5;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        importunate := @parameter0: boolean;

        if importunate == 0 goto label1;

        $b0 = this.<berkeley.com.sleepycat.je.txn.Txn: byte txnFlags>;

        $b1 = $b0 | 8;

        $b2 = (byte) $b1;

        this.<berkeley.com.sleepycat.je.txn.Txn: byte txnFlags> = $b2;

        goto label2;

     label1:
        $b3 = this.<berkeley.com.sleepycat.je.txn.Txn: byte txnFlags>;

        $b4 = $b3 & -9;

        $b5 = (byte) $b4;

        this.<berkeley.com.sleepycat.je.txn.Txn: byte txnFlags> = $b5;

     label2:
        return;
    }

    public boolean isSerializableIsolation()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $z0 = this.<berkeley.com.sleepycat.je.txn.Txn: boolean serializableIsolation>;

        return $z0;
    }

    void addBuddy(berkeley.com.sleepycat.je.txn.BuddyLocker)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.txn.BuddyLocker buddy;
        berkeley.com.sleepycat.je.utilint.TinyHashSet l2, $r0, $r1, $r2;
        java.lang.Throwable l3, $r3;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        buddy := @parameter0: berkeley.com.sleepycat.je.txn.BuddyLocker;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.utilint.TinyHashSet buddyLockers>;

        if $r0 == null goto label6;

        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.utilint.TinyHashSet buddyLockers>;

        l2 = $r1;

        entermonitor $r1;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.utilint.TinyHashSet buddyLockers>;

        virtualinvoke $r2.<berkeley.com.sleepycat.je.utilint.TinyHashSet: boolean add(java.lang.Object)>(buddy);

        exitmonitor l2;

     label2:
        goto label6;

     label3:
        $r3 := @caughtexception;

     label4:
        l3 = $r3;

        exitmonitor l2;

     label5:
        throw l3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void removeBuddy(berkeley.com.sleepycat.je.txn.BuddyLocker)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.txn.BuddyLocker buddy;
        berkeley.com.sleepycat.je.utilint.TinyHashSet l2, $r0, $r1, $r2;
        java.lang.Throwable l3, $r3;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        buddy := @parameter0: berkeley.com.sleepycat.je.txn.BuddyLocker;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.utilint.TinyHashSet buddyLockers>;

        if $r0 == null goto label6;

        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.utilint.TinyHashSet buddyLockers>;

        l2 = $r1;

        entermonitor $r1;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.utilint.TinyHashSet buddyLockers>;

        virtualinvoke $r2.<berkeley.com.sleepycat.je.utilint.TinyHashSet: boolean remove(java.lang.Object)>(buddy);

        exitmonitor l2;

     label2:
        goto label6;

     label3:
        $r3 := @caughtexception;

     label4:
        l3 = $r3;

        exitmonitor l2;

     label5:
        throw l3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void releaseNonTxnLocks()
    {
        berkeley.com.sleepycat.je.txn.Txn this;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        return;
    }

    protected berkeley.com.sleepycat.je.txn.LockResult lockInternal(long, berkeley.com.sleepycat.je.txn.LockType, boolean, boolean, berkeley.com.sleepycat.je.dbi.DatabaseImpl) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this, l10, l12;
        long lsn, timeout#2;
        berkeley.com.sleepycat.je.txn.LockType lockType;
        boolean noWait, jumpAheadOfWaiters, useNoWait, $z0, $z1, $z2;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl database;
        java.lang.Throwable l11, l13, $r1, $r12;
        berkeley.com.sleepycat.je.txn.LockGrantType grant, $r4;
        berkeley.com.sleepycat.je.txn.LockManager $r2;
        berkeley.com.sleepycat.je.txn.WriteLockInfo info#24;
        java.util.Map $r3, $r6, $r9;
        java.lang.Long $r7;
        java.lang.Object $r8;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r10;
        berkeley.com.sleepycat.je.txn.LockResult $r13;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        lsn := @parameter0: long;

        lockType := @parameter1: berkeley.com.sleepycat.je.txn.LockType;

        noWait := @parameter2: boolean;

        jumpAheadOfWaiters := @parameter3: boolean;

        database := @parameter4: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        timeout#2 = 0L;

        if noWait != 0 goto label01;

        $z0 = this.<berkeley.com.sleepycat.je.txn.Txn: boolean defaultNoWait>;

        if $z0 == 0 goto label02;

     label01:
        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        useNoWait = $z1;

        l10 = this;

        entermonitor this;

     label04:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void checkState(boolean)>(0);

        if useNoWait != 0 goto label05;

        timeout#2 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: long getLockTimeout()>();

     label05:
        exitmonitor l10;

     label06:
        goto label10;

     label07:
        $r1 := @caughtexception;

     label08:
        l11 = $r1;

        exitmonitor l10;

     label09:
        throw l11;

     label10:
        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.txn.LockManager lockManager>;

        grant = virtualinvoke $r2.<berkeley.com.sleepycat.je.txn.LockManager: berkeley.com.sleepycat.je.txn.LockGrantType lock(long,berkeley.com.sleepycat.je.txn.Locker,berkeley.com.sleepycat.je.txn.LockType,long,boolean,boolean,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(lsn, this, lockType, timeout#2, useNoWait, jumpAheadOfWaiters, database);

        info#24 = null;

        $r3 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        if $r3 == null goto label16;

        $r4 = <berkeley.com.sleepycat.je.txn.LockGrantType: berkeley.com.sleepycat.je.txn.LockGrantType DENIED>;

        if grant == $r4 goto label16;

        $z2 = virtualinvoke lockType.<berkeley.com.sleepycat.je.txn.LockType: boolean isWriteLock()>();

        if $z2 == 0 goto label16;

        l12 = this;

        entermonitor this;

     label11:
        $r6 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        info#24 = (berkeley.com.sleepycat.je.txn.WriteLockInfo) $r8;

        $r9 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map undoDatabases>;

        $r10 = virtualinvoke database.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, database);

        exitmonitor l12;

     label12:
        goto label16;

     label13:
        $r12 := @caughtexception;

     label14:
        l13 = $r12;

        exitmonitor l12;

     label15:
        throw l13;

     label16:
        $r13 = new berkeley.com.sleepycat.je.txn.LockResult;

        specialinvoke $r13.<berkeley.com.sleepycat.je.txn.LockResult: void <init>(berkeley.com.sleepycat.je.txn.LockGrantType,berkeley.com.sleepycat.je.txn.WriteLockInfo)>(grant, info#24);

        return $r13;

        catch java.lang.Throwable from label04 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    protected synchronized void addLock(java.lang.Long, berkeley.com.sleepycat.je.txn.LockType, berkeley.com.sleepycat.je.txn.LockGrantType)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        java.lang.Long lsn;
        berkeley.com.sleepycat.je.txn.LockType type;
        berkeley.com.sleepycat.je.txn.LockGrantType grantStatus, $r3, $r4;
        berkeley.com.sleepycat.je.txn.WriteLockInfo $r0;
        boolean $z0;
        java.util.Map $r1;
        int delta#9, $i0;
        java.util.Set $r5;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        lsn := @parameter0: java.lang.Long;

        type := @parameter1: berkeley.com.sleepycat.je.txn.LockType;

        grantStatus := @parameter2: berkeley.com.sleepycat.je.txn.LockGrantType;

        $z0 = virtualinvoke type.<berkeley.com.sleepycat.je.txn.LockType: boolean isWriteLock()>();

        if $z0 == 0 goto label3;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void ensureWriteInfo()>();

        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        $r0 = new berkeley.com.sleepycat.je.txn.WriteLockInfo;

        specialinvoke $r0.<berkeley.com.sleepycat.je.txn.WriteLockInfo: void <init>()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(lsn, $r0);

        delta#9 = <berkeley.com.sleepycat.je.txn.Txn: int WRITE_LOCK_OVERHEAD>;

        $r3 = <berkeley.com.sleepycat.je.txn.LockGrantType: berkeley.com.sleepycat.je.txn.LockGrantType PROMOTION>;

        if grantStatus == $r3 goto label1;

        $r4 = <berkeley.com.sleepycat.je.txn.LockGrantType: berkeley.com.sleepycat.je.txn.LockGrantType WAIT_PROMOTION>;

        if grantStatus != $r4 goto label2;

     label1:
        $r5 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set readLocks>;

        interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(lsn);

        $i0 = <berkeley.com.sleepycat.je.txn.Txn: int READ_LOCK_OVERHEAD>;

        delta#9 = delta#9 - $i0;

     label2:
        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void updateMemoryUsage(int)>(delta#9);

        goto label4;

     label3:
        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void addReadLock(java.lang.Long)>(lsn);

     label4:
        return;
    }

    private synchronized void ensureWriteInfo()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        java.util.Map $r0;
        java.util.HashMap $r1, $r2;
        int $i0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        if $r0 != null goto label1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map undoDatabases> = $r2;

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int TWOHASHMAPS_OVERHEAD>;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void updateMemoryUsage(int)>($i0);

     label1:
        return;
    }

    private void addReadLock(java.lang.Long)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        java.lang.Long lsn;
        int delta#2, $i0, delta#15;
        java.util.Set $r0, $r2;
        java.util.HashSet $r1;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        lsn := @parameter0: java.lang.Long;

        delta#2 = 0;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set readLocks>;

        if $r0 != null goto label1;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set readLocks> = $r1;

        delta#2 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHSET_OVERHEAD>;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set readLocks>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(lsn);

        $i0 = <berkeley.com.sleepycat.je.txn.Txn: int READ_LOCK_OVERHEAD>;

        delta#15 = delta#2 + $i0;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void updateMemoryUsage(int)>(delta#15);

        return;
    }

    public boolean lockingRequired()
    {
        berkeley.com.sleepycat.je.txn.Txn this;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        return 1;
    }

    public berkeley.com.sleepycat.je.txn.Locker newNonTxnLocker()
    {
        berkeley.com.sleepycat.je.txn.Txn this;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        return this;
    }

    public boolean isReadOnly()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $z0 = this.<berkeley.com.sleepycat.je.txn.Txn: boolean readOnly>;

        return $z0;
    }

    public berkeley.com.sleepycat.je.txn.Txn getTxnLocker()
    {
        berkeley.com.sleepycat.je.txn.Txn this;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        return this;
    }

    public synchronized void preLogWithoutLock(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl database;
        java.util.Map $r0;
        berkeley.com.sleepycat.je.dbi.DatabaseId $r1;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        database := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void ensureWriteInfo()>();

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map undoDatabases>;

        $r1 = virtualinvoke database.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: berkeley.com.sleepycat.je.dbi.DatabaseId getId()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, database);

        return;
    }

    synchronized void moveWriteToReadLock(long, berkeley.com.sleepycat.je.txn.Lock)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        long lsn;
        berkeley.com.sleepycat.je.txn.Lock lock;
        boolean found#2, $z0;
        java.util.Map $r0, $r1;
        java.lang.Long $r2, $r10;
        java.lang.Object $r3;
        int $i0, $i1;
        java.lang.AssertionError $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        lsn := @parameter0: long;

        lock := @parameter1: berkeley.com.sleepycat.je.txn.Lock;

        found#2 = 0;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        if $r0 == null goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        if $r3 == null goto label1;

        found#2 = 1;

        $i0 = <berkeley.com.sleepycat.je.txn.Txn: int WRITE_LOCK_OVERHEAD>;

        $i1 = 0 - $i0;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void updateMemoryUsage(int)>($i1);

     label1:
        $z0 = <berkeley.com.sleepycat.je.txn.Txn: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if found#2 != 0 goto label2;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find lock for Node ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(lsn);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in writeInfo Map.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r4;

     label2:
        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void addReadLock(java.lang.Long)>($r10);

        return;
    }

    protected synchronized void removeLock(long)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        long lsn;
        java.util.Set $r0, $r1;
        java.lang.Long $r2, $r5;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        java.util.Map $r3, $r4;
        java.lang.Object $r6;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        lsn := @parameter0: long;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set readLocks>;

        if $r0 == null goto label1;

        $r1 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set readLocks>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean remove(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $i0 = <berkeley.com.sleepycat.je.txn.Txn: int READ_LOCK_OVERHEAD>;

        $i1 = 0 - $i0;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void updateMemoryUsage(int)>($i1);

        goto label2;

     label1:
        $r3 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        if $r3 == null goto label2;

        $r4 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Map writeInfo>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(lsn);

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        if $r6 == null goto label2;

        $i2 = <berkeley.com.sleepycat.je.txn.Txn: int WRITE_LOCK_OVERHEAD>;

        $i3 = 0 - $i2;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void updateMemoryUsage(int)>($i3);

     label2:
        return;
    }

    public void nonTxnOperationEnd()
    {
        berkeley.com.sleepycat.je.txn.Txn this;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        return;
    }

    public void unRegisterCursor(berkeley.com.sleepycat.je.dbi.CursorImpl)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.dbi.CursorImpl cursor;
        java.util.concurrent.atomic.AtomicInteger $r0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        cursor := @parameter0: berkeley.com.sleepycat.je.dbi.CursorImpl;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.concurrent.atomic.AtomicInteger cursors>;

        virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>();

        return;
    }

    int getBudgetedMemorySize()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        int $i0, $i1, $i2;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $i0 = this.<berkeley.com.sleepycat.je.txn.Txn: int inMemorySize>;

        $i1 = this.<berkeley.com.sleepycat.je.txn.Txn: int accumulatedDelta>;

        $i2 = $i0 - $i1;

        return $i2;
    }

    public boolean isAutoTxn()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $z0 = this.<berkeley.com.sleepycat.je.txn.Txn: boolean isAutoCommit>;

        return $z0;
    }

    public static berkeley.com.sleepycat.je.txn.Txn createLocalAutoTxn(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.TransactionConfig)
    {
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.TransactionConfig config;
        berkeley.com.sleepycat.je.txn.Txn txn;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        config := @parameter1: berkeley.com.sleepycat.je.TransactionConfig;

        txn = staticinvoke <berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.txn.Txn createLocalTxn(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.TransactionConfig)>(envImpl, config);

        txn.<berkeley.com.sleepycat.je.txn.Txn: boolean isAutoCommit> = 1;

        return txn;
    }

    public static berkeley.com.sleepycat.je.txn.Txn createLocalTxn(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.TransactionConfig)
    {
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.TransactionConfig config;
        berkeley.com.sleepycat.je.txn.Txn $r0;
        berkeley.com.sleepycat.je.log.ReplicationContext $r1;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        config := @parameter1: berkeley.com.sleepycat.je.TransactionConfig;

        $r0 = new berkeley.com.sleepycat.je.txn.Txn;

        $r1 = <berkeley.com.sleepycat.je.log.ReplicationContext: berkeley.com.sleepycat.je.log.ReplicationContext NO_REPLICATE>;

        specialinvoke $r0.<berkeley.com.sleepycat.je.txn.Txn: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.TransactionConfig,berkeley.com.sleepycat.je.log.ReplicationContext)>(envImpl, config, $r1);

        return $r0;
    }

    public synchronized void addLogInfo(long)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        long lastLsn, $l0;
        byte $b1;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        lastLsn := @parameter0: long;

        this.<berkeley.com.sleepycat.je.txn.Txn: long lastLoggedLsn> = lastLsn;

        $l0 = this.<berkeley.com.sleepycat.je.txn.Txn: long firstLoggedLsn>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        this.<berkeley.com.sleepycat.je.txn.Txn: long firstLoggedLsn> = lastLsn;

     label1:
        return;
    }

    public void writeToLog(java.nio.ByteBuffer, int, boolean)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        java.nio.ByteBuffer logBuffer;
        int logVersion;
        boolean forReplication;
        long $l0, $l1;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        logVersion := @parameter1: int;

        forReplication := @parameter2: boolean;

        $l0 = this.<berkeley.com.sleepycat.je.txn.Txn: long id>;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l0);

        if forReplication == 0 goto label1;

        $l1 = -1L;

        goto label2;

     label1:
        $l1 = this.<berkeley.com.sleepycat.je.txn.Txn: long lastLoggedLsn>;

     label2:
        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedLong(java.nio.ByteBuffer,long)>(logBuffer, $l1);

        return;
    }

    public int getLogSize(int, boolean)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        int logVersion, $i1, $i3, $i4;
        boolean forReplication;
        long $l0, $l2;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        logVersion := @parameter0: int;

        forReplication := @parameter1: boolean;

        $l0 = this.<berkeley.com.sleepycat.je.txn.Txn: long id>;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l0);

        if forReplication == 0 goto label1;

        $l2 = -1L;

        goto label2;

     label1:
        $l2 = this.<berkeley.com.sleepycat.je.txn.Txn: long lastLoggedLsn>;

     label2:
        $i3 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedLongLogSize(long)>($l2);

        $i4 = $i1 + $i3;

        return $i4;
    }

    public boolean isReadCommittedIsolation()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $z0 = this.<berkeley.com.sleepycat.je.txn.Txn: boolean readCommittedIsolation>;

        return $z0;
    }

    public boolean isClosed()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.Transaction$State $r0, $r1, $r2, $r3;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction$State txnState>;

        $r1 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State OPEN>;

        if $r0 == $r1 goto label1;

        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction$State txnState>;

        $r3 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State MUST_ABORT>;

        if $r2 == $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static berkeley.com.sleepycat.je.txn.Txn createUserTxn(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, berkeley.com.sleepycat.je.TransactionConfig)
    {
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        berkeley.com.sleepycat.je.TransactionConfig config;
        berkeley.com.sleepycat.je.DatabaseException DE, $r1;
        boolean $z0;
        berkeley.com.sleepycat.je.txn.Txn $r0, ret#10;
        java.lang.NullPointerException soot0;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        config := @parameter1: berkeley.com.sleepycat.je.TransactionConfig;

     label1:
        $z0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isReplicated()>();

        if $z0 == 0 goto label2;

        $r0 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.txn.Txn createRepUserTxn(berkeley.com.sleepycat.je.TransactionConfig)>(config);

        goto label3;

     label2:
        $r0 = staticinvoke <berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.txn.Txn createLocalTxn(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.TransactionConfig)>(envImpl, config);

     label3:
        ret#10 = $r0;

     label4:
        goto label7;

     label5:
        $r1 := @caughtexception;

        DE = $r1;

        if null == null goto label6;

        soot0 = new java.lang.NullPointerException;

        specialinvoke soot0.<java.lang.NullPointerException: void <init>(java.lang.String)>("This statement would have triggered an Exception: virtualinvoke ret#2.<berkeley.com.sleepycat.je.txn.Txn: void close(boolean)>(0)");

        throw soot0;

     label6:
        throw DE;

     label7:
        return ret#10;

        catch berkeley.com.sleepycat.je.DatabaseException from label1 to label4 with label5;
    }

    public berkeley.com.sleepycat.je.Transaction$State getState()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.Transaction$State $r0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.Transaction$State txnState>;

        return $r0;
    }

    public void abort() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: boolean isClosed()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke this.<berkeley.com.sleepycat.je.txn.Txn: long abort(boolean)>(0);

        return;
    }

    public berkeley.com.sleepycat.je.CommitToken getCommitToken()
    {
        berkeley.com.sleepycat.je.txn.Txn this;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        return null;
    }

    public void setOnlyAbortable(berkeley.com.sleepycat.je.OperationFailureException)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.OperationFailureException cause;
        boolean $z0;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.Transaction$State $r1;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        cause := @parameter0: berkeley.com.sleepycat.je.OperationFailureException;

        $z0 = <berkeley.com.sleepycat.je.txn.Txn: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if cause != null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = <berkeley.com.sleepycat.je.Transaction$State: berkeley.com.sleepycat.je.Transaction$State MUST_ABORT>;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void setState(berkeley.com.sleepycat.je.Transaction$State)>($r1);

        this.<berkeley.com.sleepycat.je.txn.Txn: berkeley.com.sleepycat.je.OperationFailureException onlyAbortableCause> = cause;

        return;
    }

    public synchronized void markDeleteAtTxnEnd(berkeley.com.sleepycat.je.dbi.DatabaseImpl, boolean)
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        boolean deleteAtCommit;
        int delta#2, $i0, $i1, $i2, $i3, delta#21;
        java.util.Set $r0, $r2;
        java.util.HashSet $r1;
        berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo $r3;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        dbImpl := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        deleteAtCommit := @parameter1: boolean;

        delta#2 = 0;

        $r0 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set deletedDatabases>;

        if $r0 != null goto label1;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set deletedDatabases> = $r1;

        $i0 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHSET_OVERHEAD>;

        delta#2 = delta#2 + $i0;

     label1:
        $r2 = this.<berkeley.com.sleepycat.je.txn.Txn: java.util.Set deletedDatabases>;

        $r3 = new berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo;

        specialinvoke $r3.<berkeley.com.sleepycat.je.txn.Txn$DatabaseCleanupInfo: void <init>(berkeley.com.sleepycat.je.dbi.DatabaseImpl,boolean)>(dbImpl, deleteAtCommit);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $i1 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int HASHSET_ENTRY_OVERHEAD>;

        $i2 = <berkeley.com.sleepycat.je.dbi.MemoryBudget: int OBJECT_OVERHEAD>;

        $i3 = $i1 + $i2;

        delta#21 = delta#2 + $i3;

        specialinvoke this.<berkeley.com.sleepycat.je.txn.Txn: void updateMemoryUsage(int)>(delta#21);

        return;
    }

    public long getLastLsn()
    {
        berkeley.com.sleepycat.je.txn.Txn this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.txn.Txn;

        $l0 = this.<berkeley.com.sleepycat.je.txn.Txn: long lastLoggedLsn>;

        return $l0;
    }


