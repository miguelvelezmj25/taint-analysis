    protected void <init>(org.w3c.dom.Element, weka.core.pmml.FieldMetaInfo$Optype, java.util.ArrayList, weka.core.pmml.TransformationDictionary) throws java.lang.Exception
    {
        weka.core.pmml.Apply this;
        org.w3c.dom.Element apply, $r3;
        weka.core.pmml.FieldMetaInfo$Optype opType, $r4;
        java.util.ArrayList fieldDefs, $r0, $r5, $r6;
        weka.core.pmml.TransformationDictionary transDict;
        org.w3c.dom.NodeList children;
        org.w3c.dom.Node child;
        java.lang.String tagName, functionName#14;
        weka.core.pmml.Expression tempExpression;
        int $i0, $i1, i#34, $i2;
        java.lang.Exception $r1;
        weka.core.pmml.Function $r2;
        short $s3;
        boolean $z0;

        this := @this: weka.core.pmml.Apply;

        apply := @parameter0: org.w3c.dom.Element;

        opType := @parameter1: weka.core.pmml.FieldMetaInfo$Optype;

        fieldDefs := @parameter2: java.util.ArrayList;

        transDict := @parameter3: weka.core.pmml.TransformationDictionary;

        specialinvoke this.<weka.core.pmml.Expression: void <init>(weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList)>(opType, fieldDefs);

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        this.<weka.core.pmml.Apply: java.util.ArrayList m_arguments> = $r0;

        this.<weka.core.pmml.Apply: weka.core.pmml.Function m_function> = null;

        this.<weka.core.pmml.Apply: weka.core.Attribute m_outputStructure> = null;

        functionName#14 = interfaceinvoke apply.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("function");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(functionName#14);

        if functionName#14 == null goto label1;

        $i0 = virtualinvoke functionName#14.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label2;

     label1:
        functionName#14 = interfaceinvoke apply.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(functionName#14);

        if functionName#14 == null goto label3;

        $i1 = virtualinvoke functionName#14.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 0 goto label4;

     label3:
        $r1 = new java.lang.Exception;

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>("[Apply] No function name specified!!");

        throw $r1;

     label4:
        $r2 = staticinvoke <weka.core.pmml.Function: weka.core.pmml.Function getFunction(java.lang.String,weka.core.pmml.TransformationDictionary)>(functionName#14, transDict);

        this.<weka.core.pmml.Apply: weka.core.pmml.Function m_function> = $r2;

        children = interfaceinvoke apply.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i#34 = 0;

     label5:
        $i2 = interfaceinvoke children.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#34);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#34 >= $i2 goto label7;

        child = interfaceinvoke children.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i#34);

        $s3 = interfaceinvoke child.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s3);

        if $s3 != 1 goto label6;

        $r3 = (org.w3c.dom.Element) child;

        tagName = interfaceinvoke $r3.<org.w3c.dom.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke tagName.<java.lang.String: boolean equals(java.lang.Object)>("Extension");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label6;

        $r4 = this.<weka.core.pmml.Apply: weka.core.pmml.FieldMetaInfo$Optype m_opType>;

        $r5 = this.<weka.core.pmml.Apply: java.util.ArrayList m_fieldDefs>;

        tempExpression = staticinvoke <weka.core.pmml.Expression: weka.core.pmml.Expression getExpression(java.lang.String,org.w3c.dom.Node,weka.core.pmml.FieldMetaInfo$Optype,java.util.ArrayList,weka.core.pmml.TransformationDictionary)>(tagName, child, $r4, $r5, transDict);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(tempExpression);

        if tempExpression == null goto label6;

        $r6 = this.<weka.core.pmml.Apply: java.util.ArrayList m_arguments>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(tempExpression);

     label6:
        i#34 = i#34 + 1;

        goto label5;

     label7:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fieldDefs);

        if fieldDefs == null goto label8;

        specialinvoke this.<weka.core.pmml.Apply: void updateDefsForArgumentsAndFunction()>();

     label8:
        return;
    }

    private void updateDefsForArgumentsAndFunction() throws java.lang.Exception
    {
        weka.core.pmml.Apply this;
        java.util.ArrayList functionFieldDefs, $r0, $r1, $r4, $r5, $r6, $r7, $r8;
        int i#2, $i0, $i1, i#20, $i2;
        java.lang.Object $r2, $r9;
        weka.core.pmml.Expression $r3, $r10;
        weka.core.Attribute $r11, $r14;
        weka.core.pmml.Function $r12, $r13;

        this := @this: weka.core.pmml.Apply;

        i#2 = 0;

     label1:
        $r0 = this.<weka.core.pmml.Apply: java.util.ArrayList m_arguments>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#2 >= $i0 goto label2;

        $r1 = this.<weka.core.pmml.Apply: java.util.ArrayList m_arguments>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i#2);

        $r3 = (weka.core.pmml.Expression) $r2;

        $r4 = this.<weka.core.pmml.Apply: java.util.ArrayList m_fieldDefs>;

        virtualinvoke $r3.<weka.core.pmml.Expression: void setFieldDefs(java.util.ArrayList)>($r4);

        i#2 = i#2 + 1;

        goto label1;

     label2:
        $r5 = new java.util.ArrayList;

        $r6 = this.<weka.core.pmml.Apply: java.util.ArrayList m_arguments>;

        $i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i1);

        functionFieldDefs = $r5;

        i#20 = 0;

     label3:
        $r7 = this.<weka.core.pmml.Apply: java.util.ArrayList m_arguments>;

        $i2 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#20 >= $i2 goto label4;

        $r8 = this.<weka.core.pmml.Apply: java.util.ArrayList m_arguments>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i#20);

        $r10 = (weka.core.pmml.Expression) $r9;

        $r11 = virtualinvoke $r10.<weka.core.pmml.Expression: weka.core.Attribute getOutputDef()>();

        virtualinvoke functionFieldDefs.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        i#20 = i#20 + 1;

        goto label3;

     label4:
        $r12 = this.<weka.core.pmml.Apply: weka.core.pmml.Function m_function>;

        virtualinvoke $r12.<weka.core.pmml.Function: void setParameterDefs(java.util.ArrayList)>(functionFieldDefs);

        $r13 = this.<weka.core.pmml.Apply: weka.core.pmml.Function m_function>;

        $r14 = virtualinvoke $r13.<weka.core.pmml.Function: weka.core.Attribute getOutputDef()>();

        this.<weka.core.pmml.Apply: weka.core.Attribute m_outputStructure> = $r14;

        return;
    }

    public double getResult(double[]) throws java.lang.Exception
    {
        weka.core.pmml.Apply this;
        double[] incoming, functionIncoming;
        double result, $d0;
        java.util.ArrayList $r0, $r1, $r2;
        int $i0, i#6, $i1;
        java.lang.Object $r3;
        weka.core.pmml.Expression $r4;
        weka.core.pmml.Function $r5;

        this := @this: weka.core.pmml.Apply;

        incoming := @parameter0: double[];

        $r0 = this.<weka.core.pmml.Apply: java.util.ArrayList m_arguments>;

        $i0 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        functionIncoming = newarray (double)[$i0];

        i#6 = 0;

     label1:
        $r1 = this.<weka.core.pmml.Apply: java.util.ArrayList m_arguments>;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#6 >= $i1 goto label2;

        $r2 = this.<weka.core.pmml.Apply: java.util.ArrayList m_arguments>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i#6);

        $r4 = (weka.core.pmml.Expression) $r3;

        $d0 = virtualinvoke $r4.<weka.core.pmml.Expression: double getResult(double[])>(incoming);

        functionIncoming[i#6] = $d0;

        i#6 = i#6 + 1;

        goto label1;

     label2:
        $r5 = this.<weka.core.pmml.Apply: weka.core.pmml.Function m_function>;

        result = virtualinvoke $r5.<weka.core.pmml.Function: double getResult(double[])>(functionIncoming);

        return result;
    }


