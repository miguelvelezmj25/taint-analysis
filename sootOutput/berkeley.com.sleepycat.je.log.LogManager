    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;
        java.lang.String $r2;

        $r0 = class "berkeley/com/sleepycat/je/log/LogManager";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.log.LogManager: boolean $assertionsDisabled> = $z1;

        $r1 = class "berkeley/com/sleepycat/je/log/LogManager";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        <berkeley.com.sleepycat.je.log.LogManager: java.lang.String DEBUG_NAME> = $r2;

        return;
    }

    public void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl, boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl, $r3;
        boolean readOnly, $z0;
        berkeley.com.sleepycat.je.dbi.DbConfigManager configManager;
        java.util.concurrent.ConcurrentLinkedQueue $r0;
        berkeley.com.sleepycat.je.log.FileManager $r1, $r5;
        berkeley.com.sleepycat.je.log.FSyncManager $r2;
        berkeley.com.sleepycat.je.log.LogBufferPool $r4;
        berkeley.com.sleepycat.je.config.BooleanConfigParam $r6;
        java.lang.Object $r7;
        berkeley.com.sleepycat.je.config.IntConfigParam $r8;
        int $i0;
        berkeley.com.sleepycat.je.utilint.StatGroup $r9, $r11, $r14, $r17;
        berkeley.com.sleepycat.je.utilint.LongStat $r10, $r13;
        berkeley.com.sleepycat.je.utilint.StatDefinition $r12, $r15, $r18;
        berkeley.com.sleepycat.je.utilint.LSNStat $r16;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        envImpl := @parameter0: berkeley.com.sleepycat.je.dbi.EnvironmentImpl;

        readOnly := @parameter1: boolean;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.log.LogManager: long lastLsnAtRecovery> = -1L;

        this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogBuffer prevLogBuffer> = null;

        $r0 = new java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke $r0.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        this.<berkeley.com.sleepycat.je.log.LogManager: java.util.Queue lazyLogQueue> = $r0;

        this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.cleaner.ExpirationTracker expirationTracker> = null;

        this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl> = envImpl;

        $r1 = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.log.FileManager getFileManager()>();

        this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager> = $r1;

        $r2 = new berkeley.com.sleepycat.je.log.FSyncManager;

        $r3 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke $r2.<berkeley.com.sleepycat.je.log.FSyncManager: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>($r3);

        this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FSyncManager grpManager> = $r2;

        configManager = virtualinvoke envImpl.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        this.<berkeley.com.sleepycat.je.log.LogManager: boolean readOnly> = readOnly;

        $r4 = new berkeley.com.sleepycat.je.log.LogBufferPool;

        $r5 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        specialinvoke $r4.<berkeley.com.sleepycat.je.log.LogBufferPool: void <init>(berkeley.com.sleepycat.je.log.FileManager,berkeley.com.sleepycat.je.dbi.EnvironmentImpl)>($r5, envImpl);

        this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogBufferPool logBufferPool> = $r4;

        $r6 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.BooleanConfigParam LOG_CHECKSUM_READ>;

        $z0 = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: boolean getBoolean(berkeley.com.sleepycat.je.config.BooleanConfigParam)>($r6);

        this.<berkeley.com.sleepycat.je.log.LogManager: boolean doChecksumOnRead> = $z0;

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        this.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object logWriteMutex> = $r7;

        $r8 = <berkeley.com.sleepycat.je.config.EnvironmentParams: berkeley.com.sleepycat.je.config.IntConfigParam LOG_FAULT_READ_SIZE>;

        $i0 = virtualinvoke configManager.<berkeley.com.sleepycat.je.dbi.DbConfigManager: int getInt(berkeley.com.sleepycat.je.config.IntConfigParam)>($r8);

        this.<berkeley.com.sleepycat.je.log.LogManager: int readBufferSize> = $i0;

        $r9 = new berkeley.com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r9.<berkeley.com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("I/O", "Log file opens, fsyncs, reads, writes, cache misses.");

        this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.StatGroup stats> = $r9;

        $r10 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r11 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r12 = <berkeley.com.sleepycat.je.log.LogStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition LOGMGR_REPEAT_FAULT_READS>;

        specialinvoke $r10.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r11, $r12);

        this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.LongStat nRepeatFaultReads> = $r10;

        $r13 = new berkeley.com.sleepycat.je.utilint.LongStat;

        $r14 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r15 = <berkeley.com.sleepycat.je.log.LogStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition LOGMGR_TEMP_BUFFER_WRITES>;

        specialinvoke $r13.<berkeley.com.sleepycat.je.utilint.LongStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r14, $r15);

        this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.LongStat nTempBufferWrites> = $r13;

        $r16 = new berkeley.com.sleepycat.je.utilint.LSNStat;

        $r17 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $r18 = <berkeley.com.sleepycat.je.log.LogStatDefinition: berkeley.com.sleepycat.je.utilint.StatDefinition LOGMGR_END_OF_LOG>;

        specialinvoke $r16.<berkeley.com.sleepycat.je.utilint.LSNStat: void <init>(berkeley.com.sleepycat.je.utilint.StatGroup,berkeley.com.sleepycat.je.utilint.StatDefinition)>($r17, $r18);

        this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.LSNStat endOfLog> = $r16;

        return;
    }

    public long getNCacheMiss()
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.log.LogBufferPool $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogBufferPool logBufferPool>;

        $l0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.log.LogBufferPool: long getNCacheMiss()>();

        return $l0;
    }

    public long log(berkeley.com.sleepycat.je.log.entry.LogEntry, berkeley.com.sleepycat.je.log.ReplicationContext) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.log.entry.LogEntry entry;
        berkeley.com.sleepycat.je.log.ReplicationContext repContext;
        berkeley.com.sleepycat.je.log.Provisional $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        entry := @parameter0: berkeley.com.sleepycat.je.log.entry.LogEntry;

        repContext := @parameter1: berkeley.com.sleepycat.je.log.ReplicationContext;

        $r0 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional NO>;

        $l0 = specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: long log(berkeley.com.sleepycat.je.log.entry.LogEntry,berkeley.com.sleepycat.je.log.Provisional,boolean,boolean,boolean,berkeley.com.sleepycat.je.log.ReplicationContext)>(entry, $r0, 0, 0, 0, repContext);

        return $l0;
    }

    private long log(berkeley.com.sleepycat.je.log.entry.LogEntry, berkeley.com.sleepycat.je.log.Provisional, boolean, boolean, boolean, berkeley.com.sleepycat.je.log.ReplicationContext) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.log.entry.LogEntry entry;
        berkeley.com.sleepycat.je.log.Provisional provisional;
        boolean flushRequired, fsyncRequired, forceNewLogFile;
        berkeley.com.sleepycat.je.log.ReplicationContext repContext;
        berkeley.com.sleepycat.je.log.LogParams params, $r0;
        berkeley.com.sleepycat.je.log.LogItem item;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        entry := @parameter0: berkeley.com.sleepycat.je.log.entry.LogEntry;

        provisional := @parameter1: berkeley.com.sleepycat.je.log.Provisional;

        flushRequired := @parameter2: boolean;

        fsyncRequired := @parameter3: boolean;

        forceNewLogFile := @parameter4: boolean;

        repContext := @parameter5: berkeley.com.sleepycat.je.log.ReplicationContext;

        $r0 = new berkeley.com.sleepycat.je.log.LogParams;

        specialinvoke $r0.<berkeley.com.sleepycat.je.log.LogParams: void <init>()>();

        params = $r0;

        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.entry.LogEntry entry> = entry;

        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.Provisional provisional> = provisional;

        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.ReplicationContext repContext> = repContext;

        params.<berkeley.com.sleepycat.je.log.LogParams: boolean flushRequired> = flushRequired;

        params.<berkeley.com.sleepycat.je.log.LogParams: boolean fsyncRequired> = fsyncRequired;

        params.<berkeley.com.sleepycat.je.log.LogParams: boolean forceNewLogFile> = forceNewLogFile;

        item = virtualinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogItem log(berkeley.com.sleepycat.je.log.LogParams)>(params);

        $l0 = item.<berkeley.com.sleepycat.je.log.LogItem: long lsn>;

        return $l0;
    }

    public berkeley.com.sleepycat.je.log.LogItem log(berkeley.com.sleepycat.je.log.LogParams) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.log.LogParams params, lqeParams, $r3;
        berkeley.com.sleepycat.je.log.LogItem item, $r0, $r7;
        berkeley.com.sleepycat.je.log.entry.LogEntry logEntry, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8, $z10, $z11;
        java.util.Queue $r1, $r8;
        java.lang.Object $r2, $r9;
        berkeley.com.sleepycat.je.log.LogManager$LazyQueueEntry lqe#10;
        berkeley.com.sleepycat.je.log.Provisional $r5, $r12;
        berkeley.com.sleepycat.je.log.ReplicationContext $r6, $r13, $r19, $r28;
        berkeley.com.sleepycat.je.log.LogEntryType $r10;
        berkeley.com.sleepycat.je.log.LogEntryHeader $r11, $r14, $r20, $r25;
        java.nio.ByteBuffer $r15;
        berkeley.com.sleepycat.je.log.FSyncManager $r16;
        berkeley.com.sleepycat.je.log.LogBufferPool $r17, $r47;
        berkeley.com.sleepycat.je.utilint.TestHook $r18, $r31;
        berkeley.com.sleepycat.je.utilint.VLSN $r21;
        java.lang.AssertionError $r22;
        java.lang.StringBuilder $r23, $r24, $r26, $r27, $r29;
        java.lang.String $r30;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r32, $r34, $r35, $r38, $r41, $r42, $r44, $r46;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r33, e#97, $r36, $r39;
        java.lang.Exception $r37, e#107;
        java.lang.Error $r40, e#113;
        berkeley.com.sleepycat.je.recovery.Checkpointer $r43;
        berkeley.com.sleepycat.je.cleaner.Cleaner $r45;
        int $i0, $i1, $i2;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        params := @parameter0: berkeley.com.sleepycat.je.log.LogParams;

        $r0 = new berkeley.com.sleepycat.je.log.LogItem;

        specialinvoke $r0.<berkeley.com.sleepycat.je.log.LogItem: void <init>()>();

        item = $r0;

        $z0 = this.<berkeley.com.sleepycat.je.log.LogManager: boolean readOnly>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        return item;

     label01:
        $r1 = this.<berkeley.com.sleepycat.je.log.LogManager: java.util.Queue lazyLogQueue>;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object poll()>();

        lqe#10 = (berkeley.com.sleepycat.je.log.LogManager$LazyQueueEntry) $r2;

     label02:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lqe#10);

        if lqe#10 == null goto label03;

        $r3 = new berkeley.com.sleepycat.je.log.LogParams;

        specialinvoke $r3.<berkeley.com.sleepycat.je.log.LogParams: void <init>()>();

        lqeParams = $r3;

        $r4 = staticinvoke <berkeley.com.sleepycat.je.log.LogManager$LazyQueueEntry: berkeley.com.sleepycat.je.log.entry.LogEntry access$100(berkeley.com.sleepycat.je.log.LogManager$LazyQueueEntry)>(lqe#10);

        lqeParams.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.entry.LogEntry entry> = $r4;

        $r5 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional NO>;

        lqeParams.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.Provisional provisional> = $r5;

        $r6 = staticinvoke <berkeley.com.sleepycat.je.log.LogManager$LazyQueueEntry: berkeley.com.sleepycat.je.log.ReplicationContext access$200(berkeley.com.sleepycat.je.log.LogManager$LazyQueueEntry)>(lqe#10);

        lqeParams.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.ReplicationContext repContext> = $r6;

        $r7 = new berkeley.com.sleepycat.je.log.LogItem;

        specialinvoke $r7.<berkeley.com.sleepycat.je.log.LogItem: void <init>()>();

        specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: void logItem(berkeley.com.sleepycat.je.log.LogItem,berkeley.com.sleepycat.je.log.LogParams)>($r7, lqeParams);

        $r8 = this.<berkeley.com.sleepycat.je.log.LogManager: java.util.Queue lazyLogQueue>;

        $r9 = interfaceinvoke $r8.<java.util.Queue: java.lang.Object poll()>();

        lqe#10 = (berkeley.com.sleepycat.je.log.LogManager$LazyQueueEntry) $r9;

        goto label02;

     label03:
        logEntry = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.entry.LogEntry entry>;

        $r10 = interfaceinvoke logEntry.<berkeley.com.sleepycat.je.log.entry.LogEntry: berkeley.com.sleepycat.je.log.LogEntryType getLogType()>();

        $z1 = virtualinvoke $r10.<berkeley.com.sleepycat.je.log.LogEntryType: boolean marshallOutsideLatch()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label04;

        $r11 = new berkeley.com.sleepycat.je.log.LogEntryHeader;

        $r12 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.Provisional provisional>;

        $r13 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.ReplicationContext repContext>;

        specialinvoke $r11.<berkeley.com.sleepycat.je.log.LogEntryHeader: void <init>(berkeley.com.sleepycat.je.log.entry.LogEntry,berkeley.com.sleepycat.je.log.Provisional,berkeley.com.sleepycat.je.log.ReplicationContext)>(logEntry, $r12, $r13);

        item.<berkeley.com.sleepycat.je.log.LogItem: berkeley.com.sleepycat.je.log.LogEntryHeader header> = $r11;

        $r14 = item.<berkeley.com.sleepycat.je.log.LogItem: berkeley.com.sleepycat.je.log.LogEntryHeader header>;

        $r15 = specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: java.nio.ByteBuffer marshallIntoBuffer(berkeley.com.sleepycat.je.log.LogEntryHeader,berkeley.com.sleepycat.je.log.entry.LogEntry)>($r14, logEntry);

        item.<berkeley.com.sleepycat.je.log.LogItem: java.nio.ByteBuffer buffer> = $r15;

     label04:
        specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: void logItem(berkeley.com.sleepycat.je.log.LogItem,berkeley.com.sleepycat.je.log.LogParams)>(item, params);

        $z2 = params.<berkeley.com.sleepycat.je.log.LogParams: boolean fsyncRequired>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label05;

        $z3 = params.<berkeley.com.sleepycat.je.log.LogParams: boolean flushRequired>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label06;

     label05:
        $r16 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FSyncManager grpManager>;

        $z4 = params.<berkeley.com.sleepycat.je.log.LogParams: boolean fsyncRequired>;

        virtualinvoke $r16.<berkeley.com.sleepycat.je.log.FSyncManager: void flushAndSync(boolean)>($z4);

        goto label07;

     label06:
        $z5 = params.<berkeley.com.sleepycat.je.log.LogParams: boolean switchedLogBuffer>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label07;

        $r17 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogBufferPool logBufferPool>;

        virtualinvoke $r17.<berkeley.com.sleepycat.je.log.LogBufferPool: void writeDirty(boolean)>(0);

     label07:
        $r18 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.TestHook flushHook>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(berkeley.com.sleepycat.je.utilint.TestHook)>($r18);

        $r19 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.ReplicationContext repContext>;

        $z7 = virtualinvoke $r19.<berkeley.com.sleepycat.je.log.ReplicationContext: boolean inReplicationStream()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 == 0 goto label09;

        $z8 = <berkeley.com.sleepycat.je.log.LogManager: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label08;

        $r20 = item.<berkeley.com.sleepycat.je.log.LogItem: berkeley.com.sleepycat.je.log.LogEntryHeader header>;

        $r21 = virtualinvoke $r20.<berkeley.com.sleepycat.je.log.LogEntryHeader: berkeley.com.sleepycat.je.utilint.VLSN getVLSN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r21);

        if $r21 != null goto label08;

        $r22 = new java.lang.AssertionError;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected null vlsn: ");

        $r25 = item.<berkeley.com.sleepycat.je.log.LogItem: berkeley.com.sleepycat.je.log.LogEntryHeader header>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r28 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.ReplicationContext repContext>;

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>($r30);

        throw $r22;

     label08:
        $r31 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.TestHook delayVLSNRegisterHook>;

        staticinvoke <berkeley.com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(berkeley.com.sleepycat.je.utilint.TestHook)>($r31);

        $r32 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r32.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void registerVLSN(berkeley.com.sleepycat.je.log.LogItem)>(item);

     label09:
        goto label14;

     label10:
        $r33 := @caughtexception;

        e#97 = $r33;

        $r34 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z10 = virtualinvoke $r34.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 != 0 goto label11;

        throw e#97;

     label11:
        $r35 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r36 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Exception)>($r35, e#97);

        throw $r36;

     label12:
        $r37 := @caughtexception;

        e#107 = $r37;

        $r38 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r39 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Exception)>($r38, e#107);

        throw $r39;

     label13:
        $r40 := @caughtexception;

        e#113 = $r40;

        $r41 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r41.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(e#113);

        throw e#113;

     label14:
        $r42 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r43 = virtualinvoke $r42.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.recovery.Checkpointer getCheckpointer()>();

        virtualinvoke $r43.<berkeley.com.sleepycat.je.recovery.Checkpointer: void wakeupAfterWrite()>();

        $r44 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r45 = virtualinvoke $r44.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.Cleaner getCleaner()>();

        $i0 = item.<berkeley.com.sleepycat.je.log.LogItem: int size>;

        virtualinvoke $r45.<berkeley.com.sleepycat.je.cleaner.Cleaner: void wakeupAfterWrite(int)>($i0);

        $z11 = params.<berkeley.com.sleepycat.je.log.LogParams: boolean backgroundIO>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 == 0 goto label15;

        $r46 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $i1 = item.<berkeley.com.sleepycat.je.log.LogItem: int size>;

        $r47 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogBufferPool logBufferPool>;

        $i2 = virtualinvoke $r47.<berkeley.com.sleepycat.je.log.LogBufferPool: int getLogBufferSize()>();

        virtualinvoke $r46.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void updateBackgroundWrites(int,int)>($i1, $i2);

     label15:
        return item;

        catch berkeley.com.sleepycat.je.EnvironmentFailureException from label01 to label09 with label10;
        catch java.lang.Exception from label01 to label09 with label12;
        catch java.lang.Error from label01 to label09 with label13;
    }

    private void logItem(berkeley.com.sleepycat.je.log.LogItem, berkeley.com.sleepycat.je.log.LogParams) throws java.io.IOException, berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.log.LogItem item;
        berkeley.com.sleepycat.je.log.LogParams params;
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker tracker;
        berkeley.com.sleepycat.je.log.LogManager$LogWriteInfo lwi;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r11;
        berkeley.com.sleepycat.je.log.LogEntryHeader $r1;
        java.nio.ByteBuffer $r2, $r4, $r6;
        long $l0;
        berkeley.com.sleepycat.je.utilint.VLSN $r3;
        berkeley.com.sleepycat.je.log.LogBufferSegment $r5;
        berkeley.com.sleepycat.je.cleaner.ExpirationTracker $r7, $r8, $r10, $r13;
        berkeley.com.sleepycat.je.log.entry.LogEntry $r9;
        int $i1;
        berkeley.com.sleepycat.je.cleaner.ExpirationProfile $r12;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        item := @parameter0: berkeley.com.sleepycat.je.log.LogItem;

        params := @parameter1: berkeley.com.sleepycat.je.log.LogParams;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        tracker = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.UtilizationTracker getUtilizationTracker()>();

        lwi = specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogManager$LogWriteInfo serialLog(berkeley.com.sleepycat.je.log.LogItem,berkeley.com.sleepycat.je.log.LogParams,berkeley.com.sleepycat.je.cleaner.UtilizationTracker)>(item, params, tracker);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lwi);

        if lwi == null goto label1;

        $r1 = item.<berkeley.com.sleepycat.je.log.LogItem: berkeley.com.sleepycat.je.log.LogEntryHeader header>;

        $r2 = item.<berkeley.com.sleepycat.je.log.LogItem: java.nio.ByteBuffer buffer>;

        $l0 = lwi.<berkeley.com.sleepycat.je.log.LogManager$LogWriteInfo: long fileOffset>;

        $r3 = lwi.<berkeley.com.sleepycat.je.log.LogManager$LogWriteInfo: berkeley.com.sleepycat.je.utilint.VLSN vlsn>;

        $r4 = virtualinvoke $r1.<berkeley.com.sleepycat.je.log.LogEntryHeader: java.nio.ByteBuffer addPostMarshallingInfo(java.nio.ByteBuffer,long,berkeley.com.sleepycat.je.utilint.VLSN)>($r2, $l0, $r3);

        item.<berkeley.com.sleepycat.je.log.LogItem: java.nio.ByteBuffer buffer> = $r4;

        $r5 = lwi.<berkeley.com.sleepycat.je.log.LogManager$LogWriteInfo: berkeley.com.sleepycat.je.log.LogBufferSegment lbs>;

        $r6 = item.<berkeley.com.sleepycat.je.log.LogItem: java.nio.ByteBuffer buffer>;

        virtualinvoke $r5.<berkeley.com.sleepycat.je.log.LogBufferSegment: void put(java.nio.ByteBuffer)>($r6);

     label1:
        specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: void updateObsolete(berkeley.com.sleepycat.je.log.LogParams,berkeley.com.sleepycat.je.cleaner.UtilizationTracker)>(params, tracker);

        $r7 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.cleaner.ExpirationTracker expirationTrackerToUse>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r7);

        if $r7 == null goto label2;

        $r8 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.cleaner.ExpirationTracker expirationTrackerToUse>;

        $r9 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.entry.LogEntry entry>;

        $i1 = item.<berkeley.com.sleepycat.je.log.LogItem: int size>;

        virtualinvoke $r8.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: void track(berkeley.com.sleepycat.je.log.entry.LogEntry,int)>($r9, $i1);

     label2:
        $r10 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.cleaner.ExpirationTracker expirationTrackerCompleted>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r10);

        if $r10 == null goto label3;

        $r11 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r12 = virtualinvoke $r11.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.ExpirationProfile getExpirationProfile()>();

        $r13 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.cleaner.ExpirationTracker expirationTrackerCompleted>;

        virtualinvoke $r12.<berkeley.com.sleepycat.je.cleaner.ExpirationProfile: void addCompletedTracker(berkeley.com.sleepycat.je.cleaner.ExpirationTracker)>($r13);

     label3:
        return;
    }

    private java.nio.ByteBuffer marshallIntoBuffer(berkeley.com.sleepycat.je.log.LogEntryHeader, berkeley.com.sleepycat.je.log.entry.LogEntry)
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.log.LogEntryHeader header;
        berkeley.com.sleepycat.je.log.entry.LogEntry entry;
        int entrySize, $i0, $i1;
        java.nio.ByteBuffer destBuffer;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        header := @parameter0: berkeley.com.sleepycat.je.log.LogEntryHeader;

        entry := @parameter1: berkeley.com.sleepycat.je.log.entry.LogEntry;

        $i0 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: int getSize()>();

        $i1 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: int getItemSize()>();

        entrySize = $i0 + $i1;

        destBuffer = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(entrySize);

        virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: void writeToLog(java.nio.ByteBuffer)>(destBuffer);

        interfaceinvoke entry.<berkeley.com.sleepycat.je.log.entry.LogEntry: void writeEntry(java.nio.ByteBuffer)>(destBuffer);

        virtualinvoke destBuffer.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return destBuffer;
    }

    private berkeley.com.sleepycat.je.log.LogManager$LogWriteInfo serialLog(berkeley.com.sleepycat.je.log.LogItem, berkeley.com.sleepycat.je.log.LogParams, berkeley.com.sleepycat.je.cleaner.UtilizationTracker) throws java.io.IOException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.log.LogItem item;
        berkeley.com.sleepycat.je.log.LogParams params;
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker tracker;
        java.lang.Object l4, $r0;
        java.lang.Throwable l6, $r12;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1, $r4, $r5, $r8, $r11;
        berkeley.com.sleepycat.je.log.LogManager$LogWriteInfo $r2;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r3, e#11, $r6, $r9;
        boolean $z0;
        java.lang.Exception $r7, e#21;
        java.lang.Error $r10, e#27;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        item := @parameter0: berkeley.com.sleepycat.je.log.LogItem;

        params := @parameter1: berkeley.com.sleepycat.je.log.LogParams;

        tracker := @parameter2: berkeley.com.sleepycat.je.cleaner.UtilizationTracker;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object logWriteMutex>;

        l4 = $r0;

        entermonitor $r0;

     label01:
        $r1 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void checkIfInvalid()>();

     label02:
        $r2 = specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogManager$LogWriteInfo serialLogWork(berkeley.com.sleepycat.je.log.LogItem,berkeley.com.sleepycat.je.log.LogParams,berkeley.com.sleepycat.je.cleaner.UtilizationTracker)>(item, params, tracker);

     label03:
        exitmonitor l4;

     label04:
        return $r2;

     label05:
        $r3 := @caughtexception;

     label06:
        e#11 = $r3;

        $r4 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z0 = virtualinvoke $r4.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isValid()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label07;

        throw e#11;

     label07:
        $r5 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r6 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Exception)>($r5, e#11);

        throw $r6;

     label08:
        $r7 := @caughtexception;

        e#21 = $r7;

        $r8 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r9 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.Exception)>($r8, e#21);

        throw $r9;

     label09:
        $r10 := @caughtexception;

        e#27 = $r10;

        $r11 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r11.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(e#27);

        throw e#27;

     label10:
        $r12 := @caughtexception;

        l6 = $r12;

        exitmonitor l4;

     label11:
        throw l6;

        catch berkeley.com.sleepycat.je.EnvironmentFailureException from label02 to label03 with label05;
        catch java.lang.Exception from label02 to label03 with label08;
        catch java.lang.Error from label02 to label03 with label09;
        catch java.lang.Throwable from label01 to label04 with label10;
        catch java.lang.Throwable from label06 to label11 with label10;
    }

    private void updateObsolete(berkeley.com.sleepycat.je.log.LogParams, berkeley.com.sleepycat.je.cleaner.UtilizationTracker)
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.log.LogParams params;
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker tracker;
        java.lang.Object l3, $r2, $r8;
        java.util.Iterator l4;
        berkeley.com.sleepycat.je.txn.WriteLockInfo info;
        java.lang.Throwable l6, $r10;
        berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo $r0, $r3, $r4;
        java.util.Collection $r1, $r6, $r7;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r5, $r9;
        boolean $z0;
        long $l0;
        int $i1;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        params := @parameter0: berkeley.com.sleepycat.je.log.LogParams;

        tracker := @parameter1: berkeley.com.sleepycat.je.cleaner.UtilizationTracker;

        $r0 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo packedObsoleteInfo>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label01;

        $r1 = params.<berkeley.com.sleepycat.je.log.LogParams: java.util.Collection obsoleteWriteLockInfo>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r1 != null goto label01;

        return;

     label01:
        $r2 = this.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object logWriteMutex>;

        l3 = $r2;

        entermonitor $r2;

     label02:
        $r3 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo packedObsoleteInfo>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r3);

        if $r3 == null goto label03;

        $r4 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo packedObsoleteInfo>;

        $r5 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.dbi.DatabaseImpl nodeDb>;

        virtualinvoke $r4.<berkeley.com.sleepycat.je.cleaner.PackedObsoleteInfo: void countObsoleteInfo(berkeley.com.sleepycat.je.cleaner.UtilizationTracker,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(tracker, $r5);

     label03:
        $r6 = params.<berkeley.com.sleepycat.je.log.LogParams: java.util.Collection obsoleteWriteLockInfo>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 == null goto label05;

        $r7 = params.<berkeley.com.sleepycat.je.log.LogParams: java.util.Collection obsoleteWriteLockInfo>;

        l4 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label05;

        $r8 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        info = (berkeley.com.sleepycat.je.txn.WriteLockInfo) $r8;

        $l0 = virtualinvoke info.<berkeley.com.sleepycat.je.txn.WriteLockInfo: long getAbortLsn()>();

        $i1 = virtualinvoke info.<berkeley.com.sleepycat.je.txn.WriteLockInfo: int getAbortLogSize()>();

        $r9 = virtualinvoke info.<berkeley.com.sleepycat.je.txn.WriteLockInfo: berkeley.com.sleepycat.je.dbi.DatabaseImpl getDb()>();

        virtualinvoke tracker.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: void countObsoleteNode(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($l0, null, $i1, $r9);

        goto label04;

     label05:
        exitmonitor l3;

     label06:
        goto label10;

     label07:
        $r10 := @caughtexception;

     label08:
        l6 = $r10;

        exitmonitor l3;

     label09:
        throw l6;

     label10:
        return;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    private berkeley.com.sleepycat.je.log.LogManager$LogWriteInfo serialLogWork(berkeley.com.sleepycat.je.log.LogItem, berkeley.com.sleepycat.je.log.LogParams, berkeley.com.sleepycat.je.cleaner.UtilizationTracker) throws java.io.IOException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.log.LogItem item;
        berkeley.com.sleepycat.je.log.LogParams params;
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker tracker;
        berkeley.com.sleepycat.je.log.LogEntryType entryType;
        boolean marshallOutsideLatch, flippedFile, flushWriteQueue, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        long currentLsn, fileOffset, newFile, $l0, $l1, $l3, $l5, $l6, $l7, $l8, $l12, $l13;
        berkeley.com.sleepycat.je.log.LogBuffer lastLogBuffer, $r50, $r56;
        berkeley.com.sleepycat.je.log.LogBufferSegment useBuffer;
        java.lang.Throwable l16, $r61;
        berkeley.com.sleepycat.je.log.entry.LogEntry $r0, $r10, $r19, $r27, $r33, $r62;
        int $i2, $i4, entrySize#70, $i9, $i10, $i11;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl $r1, $r2, $r3, $r4, $r26, $r28, $r29;
        berkeley.com.sleepycat.je.log.ReplicationContext $r5, $r7, $r8, $r11, $r21;
        berkeley.com.sleepycat.je.utilint.VLSN $r6, vlsn#58;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r9;
        java.nio.ByteBuffer $r12, $r13, $r30, $r34, $r35, $r40, $r53, $r54, $r57, $r58;
        berkeley.com.sleepycat.je.log.LogEntryHeader $r14, $r16, $r18, $r22, $r32, $r52, $r63;
        java.lang.AssertionError $r15, $r17, $r31, $r59;
        berkeley.com.sleepycat.je.log.Provisional $r20;
        berkeley.com.sleepycat.je.log.FileManager $r23, $r24, $r25, $r51, $r55;
        java.lang.StringBuilder $r36, $r37, $r38, $r39, $r41, $r42, $r43, $r44, $r46;
        java.lang.String $r45, $r47;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r48;
        berkeley.com.sleepycat.je.log.LogBufferPool $r49;
        berkeley.com.sleepycat.je.utilint.LongStat $r60;
        berkeley.com.sleepycat.je.cleaner.ExpirationTracker $r64, $r65, $r66, $r67, $r68, $r69;
        byte $b14;
        berkeley.com.sleepycat.je.log.LogManager$LogWriteInfo $r70;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        item := @parameter0: berkeley.com.sleepycat.je.log.LogItem;

        params := @parameter1: berkeley.com.sleepycat.je.log.LogParams;

        tracker := @parameter2: berkeley.com.sleepycat.je.cleaner.UtilizationTracker;

        $r0 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.entry.LogEntry entry>;

        entryType = interfaceinvoke $r0.<berkeley.com.sleepycat.je.log.entry.LogEntry: berkeley.com.sleepycat.je.log.LogEntryType getLogType()>();

        $l0 = params.<berkeley.com.sleepycat.je.log.LogParams: long oldLsn>;

        $z0 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: boolean isTransientOrNull(long)>($l0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        $z1 = params.<berkeley.com.sleepycat.je.log.LogParams: boolean obsoleteDupsAllowed>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label01;

        $l1 = params.<berkeley.com.sleepycat.je.log.LogParams: long oldLsn>;

        $i2 = params.<berkeley.com.sleepycat.je.log.LogParams: int oldSize>;

        $r1 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.dbi.DatabaseImpl nodeDb>;

        virtualinvoke tracker.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: void countObsoleteNodeDupsAllowed(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($l1, entryType, $i2, $r1);

        goto label02;

     label01:
        $l3 = params.<berkeley.com.sleepycat.je.log.LogParams: long oldLsn>;

        $i4 = params.<berkeley.com.sleepycat.je.log.LogParams: int oldSize>;

        $r2 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.dbi.DatabaseImpl nodeDb>;

        virtualinvoke tracker.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: void countObsoleteNode(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($l3, entryType, $i4, $r2);

     label02:
        $l5 = params.<berkeley.com.sleepycat.je.log.LogParams: long auxOldLsn>;

        $z2 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: boolean isTransientOrNull(long)>($l5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label04;

        $z3 = params.<berkeley.com.sleepycat.je.log.LogParams: boolean obsoleteDupsAllowed>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label03;

        $l6 = params.<berkeley.com.sleepycat.je.log.LogParams: long auxOldLsn>;

        $r3 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.dbi.DatabaseImpl nodeDb>;

        virtualinvoke tracker.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: void countObsoleteNodeDupsAllowed(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($l6, entryType, 0, $r3);

        goto label04;

     label03:
        $l7 = params.<berkeley.com.sleepycat.je.log.LogParams: long auxOldLsn>;

        $r4 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.dbi.DatabaseImpl nodeDb>;

        virtualinvoke tracker.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: void countObsoleteNode(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($l7, entryType, 0, $r4);

     label04:
        $r5 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.ReplicationContext repContext>;

        $r6 = virtualinvoke $r5.<berkeley.com.sleepycat.je.log.ReplicationContext: berkeley.com.sleepycat.je.utilint.VLSN getClientVLSN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 != null goto label05;

        $r7 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.ReplicationContext repContext>;

        $z4 = virtualinvoke $r7.<berkeley.com.sleepycat.je.log.ReplicationContext: boolean mustGenerateVLSN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label07;

     label05:
        $r8 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.ReplicationContext repContext>;

        $z5 = virtualinvoke $r8.<berkeley.com.sleepycat.je.log.ReplicationContext: boolean mustGenerateVLSN()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 == 0 goto label06;

        $r9 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r10 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.entry.LogEntry entry>;

        vlsn#58 = virtualinvoke $r9.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.utilint.VLSN assignVLSNs(berkeley.com.sleepycat.je.log.entry.LogEntry)>($r10);

        goto label08;

     label06:
        $r11 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.ReplicationContext repContext>;

        vlsn#58 = virtualinvoke $r11.<berkeley.com.sleepycat.je.log.ReplicationContext: berkeley.com.sleepycat.je.utilint.VLSN getClientVLSN()>();

        goto label08;

     label07:
        vlsn#58 = null;

     label08:
        $r12 = item.<berkeley.com.sleepycat.je.log.LogItem: java.nio.ByteBuffer buffer>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r12);

        if $r12 == null goto label09;

        $z6 = 1;

        goto label10;

     label09:
        $z6 = 0;

     label10:
        marshallOutsideLatch = $z6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(marshallOutsideLatch);

        if marshallOutsideLatch == 0 goto label11;

        $r13 = item.<berkeley.com.sleepycat.je.log.LogItem: java.nio.ByteBuffer buffer>;

        entrySize#70 = virtualinvoke $r13.<java.nio.ByteBuffer: int limit()>();

        $z7 = <berkeley.com.sleepycat.je.log.LogManager: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label13;

        $r14 = item.<berkeley.com.sleepycat.je.log.LogItem: berkeley.com.sleepycat.je.log.LogEntryHeader header>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r14);

        if $r14 != null goto label13;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label11:
        $z8 = <berkeley.com.sleepycat.je.log.LogManager: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 != 0 goto label12;

        $r16 = item.<berkeley.com.sleepycat.je.log.LogItem: berkeley.com.sleepycat.je.log.LogEntryHeader header>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r16);

        if $r16 == null goto label12;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label12:
        $r18 = new berkeley.com.sleepycat.je.log.LogEntryHeader;

        $r19 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.entry.LogEntry entry>;

        $r20 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.Provisional provisional>;

        $r21 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.ReplicationContext repContext>;

        specialinvoke $r18.<berkeley.com.sleepycat.je.log.LogEntryHeader: void <init>(berkeley.com.sleepycat.je.log.entry.LogEntry,berkeley.com.sleepycat.je.log.Provisional,berkeley.com.sleepycat.je.log.ReplicationContext)>($r19, $r20, $r21);

        item.<berkeley.com.sleepycat.je.log.LogItem: berkeley.com.sleepycat.je.log.LogEntryHeader header> = $r18;

        $r22 = item.<berkeley.com.sleepycat.je.log.LogItem: berkeley.com.sleepycat.je.log.LogEntryHeader header>;

        entrySize#70 = virtualinvoke $r22.<berkeley.com.sleepycat.je.log.LogEntryHeader: int getEntrySize()>();

     label13:
        $z9 = params.<berkeley.com.sleepycat.je.log.LogParams: boolean forceNewLogFile>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 == 0 goto label14;

        $r23 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        virtualinvoke $r23.<berkeley.com.sleepycat.je.log.FileManager: void forceNewLogFile()>();

     label14:
        $r24 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        $l8 = (long) entrySize#70;

        flippedFile = virtualinvoke $r24.<berkeley.com.sleepycat.je.log.FileManager: boolean bumpLsn(long)>($l8);

        $r25 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        currentLsn = virtualinvoke $r25.<berkeley.com.sleepycat.je.log.FileManager: long getLastUsedLsn()>();

        $r26 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.dbi.DatabaseImpl nodeDb>;

        virtualinvoke tracker.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: void countNewLogEntry(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(currentLsn, entryType, entrySize#70, $r26);

        $r27 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.entry.LogEntry entry>;

        $r28 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.dbi.DatabaseImpl nodeDb>;

        $z10 = interfaceinvoke $r27.<berkeley.com.sleepycat.je.log.entry.LogEntry: boolean isImmediatelyObsolete(berkeley.com.sleepycat.je.dbi.DatabaseImpl)>($r28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z10);

        if $z10 == 0 goto label15;

        $r29 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.dbi.DatabaseImpl nodeDb>;

        virtualinvoke tracker.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: void countObsoleteNodeInexact(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(currentLsn, entryType, entrySize#70, $r29);

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(marshallOutsideLatch);

        if marshallOutsideLatch != 0 goto label17;

        $z11 = <berkeley.com.sleepycat.je.log.LogManager: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z11);

        if $z11 != 0 goto label16;

        $r30 = item.<berkeley.com.sleepycat.je.log.LogItem: java.nio.ByteBuffer buffer>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r30);

        if $r30 == null goto label16;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();

        throw $r31;

     label16:
        $r32 = item.<berkeley.com.sleepycat.je.log.LogItem: berkeley.com.sleepycat.je.log.LogEntryHeader header>;

        $r33 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.entry.LogEntry entry>;

        $r34 = specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: java.nio.ByteBuffer marshallIntoBuffer(berkeley.com.sleepycat.je.log.LogEntryHeader,berkeley.com.sleepycat.je.log.entry.LogEntry)>($r32, $r33);

        item.<berkeley.com.sleepycat.je.log.LogItem: java.nio.ByteBuffer buffer> = $r34;

     label17:
        $r35 = item.<berkeley.com.sleepycat.je.log.LogItem: java.nio.ByteBuffer buffer>;

        $i9 = virtualinvoke $r35.<java.nio.ByteBuffer: int limit()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entrySize#70);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if entrySize#70 == $i9 goto label18;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Logged entry entrySize= ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(entrySize#70);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but marshalledSize=");

        $r40 = item.<berkeley.com.sleepycat.je.log.LogItem: java.nio.ByteBuffer buffer>;

        $i10 = virtualinvoke $r40.<java.nio.ByteBuffer: int limit()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type=");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(entryType);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" currentLsn=");

        $r45 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(currentLsn);

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        $r48 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>($r47);

        throw $r48;

     label18:
        $r49 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogBufferPool logBufferPool>;

        lastLogBuffer = virtualinvoke $r49.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.LogBuffer getWriteBuffer(int,boolean)>(entrySize#70, flippedFile);

        $r50 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogBuffer prevLogBuffer>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lastLogBuffer);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r50);

        if lastLogBuffer == $r50 goto label19;

        params.<berkeley.com.sleepycat.je.log.LogParams: boolean switchedLogBuffer> = 1;

     label19:
        this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogBuffer prevLogBuffer> = lastLogBuffer;

        $r51 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        fileOffset = virtualinvoke $r51.<berkeley.com.sleepycat.je.log.FileManager: long getPrevEntryOffset()>();

        virtualinvoke lastLogBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: void latchForWrite()>();

     label20:
        useBuffer = virtualinvoke lastLogBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: berkeley.com.sleepycat.je.log.LogBufferSegment allocate(int)>(entrySize#70);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useBuffer);

        if useBuffer == null goto label21;

        virtualinvoke lastLogBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: void registerLsn(long)>(currentLsn);

        goto label25;

     label21:
        $r52 = item.<berkeley.com.sleepycat.je.log.LogItem: berkeley.com.sleepycat.je.log.LogEntryHeader header>;

        $r53 = item.<berkeley.com.sleepycat.je.log.LogItem: java.nio.ByteBuffer buffer>;

        $r54 = virtualinvoke $r52.<berkeley.com.sleepycat.je.log.LogEntryHeader: java.nio.ByteBuffer addPostMarshallingInfo(java.nio.ByteBuffer,long,berkeley.com.sleepycat.je.utilint.VLSN)>($r53, fileOffset, vlsn#58);

        item.<berkeley.com.sleepycat.je.log.LogItem: java.nio.ByteBuffer buffer> = $r54;

        $z12 = params.<berkeley.com.sleepycat.je.log.LogParams: boolean flushRequired>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z12);

        if $z12 == 0 goto label22;

        $z13 = params.<berkeley.com.sleepycat.je.log.LogParams: boolean fsyncRequired>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z13);

        if $z13 != 0 goto label22;

        $z14 = 1;

        goto label23;

     label22:
        $z14 = 0;

     label23:
        flushWriteQueue = $z14;

        $r55 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        $r56 = new berkeley.com.sleepycat.je.log.LogBuffer;

        $r57 = item.<berkeley.com.sleepycat.je.log.LogItem: java.nio.ByteBuffer buffer>;

        specialinvoke $r56.<berkeley.com.sleepycat.je.log.LogBuffer: void <init>(java.nio.ByteBuffer,long)>($r57, currentLsn);

        virtualinvoke $r55.<berkeley.com.sleepycat.je.log.FileManager: void writeLogBuffer(berkeley.com.sleepycat.je.log.LogBuffer,boolean)>($r56, flushWriteQueue);

        $z15 = <berkeley.com.sleepycat.je.log.LogManager: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z15);

        if $z15 != 0 goto label24;

        $r58 = virtualinvoke lastLogBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: java.nio.ByteBuffer getDataBuffer()>();

        $i11 = virtualinvoke $r58.<java.nio.ByteBuffer: int position()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i11 == 0 goto label24;

        $r59 = new java.lang.AssertionError;

        specialinvoke $r59.<java.lang.AssertionError: void <init>()>();

        throw $r59;

     label24:
        $r60 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.LongStat nTempBufferWrites>;

        virtualinvoke $r60.<berkeley.com.sleepycat.je.utilint.LongStat: void increment()>();

     label25:
        virtualinvoke lastLogBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: void release()>();

        goto label29;

     label26:
        $r61 := @caughtexception;

     label27:
        l16 = $r61;

     label28:
        virtualinvoke lastLogBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: void release()>();

        throw l16;

     label29:
        $r62 = params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.log.entry.LogEntry entry>;

        $r63 = item.<berkeley.com.sleepycat.je.log.LogItem: berkeley.com.sleepycat.je.log.LogEntryHeader header>;

        interfaceinvoke $r62.<berkeley.com.sleepycat.je.log.entry.LogEntry: void postLogWork(berkeley.com.sleepycat.je.log.LogEntryHeader,long,berkeley.com.sleepycat.je.utilint.VLSN)>($r63, currentLsn, vlsn#58);

        item.<berkeley.com.sleepycat.je.log.LogItem: long lsn> = currentLsn;

        item.<berkeley.com.sleepycat.je.log.LogItem: int size> = entrySize#70;

        $r64 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.cleaner.ExpirationTracker expirationTracker>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r64);

        if $r64 == null goto label31;

        $l12 = item.<berkeley.com.sleepycat.je.log.LogItem: long lsn>;

        newFile = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>($l12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(flippedFile);

        if flippedFile == 0 goto label30;

        $r65 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.cleaner.ExpirationTracker expirationTracker>;

        $l13 = virtualinvoke $r65.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: long getFileNum()>();

        $b14 = newFile cmp $l13;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b14);

        if $b14 == 0 goto label30;

        $r66 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.cleaner.ExpirationTracker expirationTracker>;

        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.cleaner.ExpirationTracker expirationTrackerCompleted> = $r66;

        $r67 = new berkeley.com.sleepycat.je.cleaner.ExpirationTracker;

        specialinvoke $r67.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: void <init>(long)>(newFile);

        this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.cleaner.ExpirationTracker expirationTracker> = $r67;

     label30:
        $r68 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.cleaner.ExpirationTracker expirationTracker>;

        virtualinvoke $r68.<berkeley.com.sleepycat.je.cleaner.ExpirationTracker: void incrementPendingTrackCalls()>();

        $r69 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.cleaner.ExpirationTracker expirationTracker>;

        params.<berkeley.com.sleepycat.je.log.LogParams: berkeley.com.sleepycat.je.cleaner.ExpirationTracker expirationTrackerToUse> = $r69;

     label31:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(useBuffer);

        if useBuffer != null goto label32;

        $r70 = null;

        goto label33;

     label32:
        $r70 = new berkeley.com.sleepycat.je.log.LogManager$LogWriteInfo;

        specialinvoke $r70.<berkeley.com.sleepycat.je.log.LogManager$LogWriteInfo: void <init>(berkeley.com.sleepycat.je.log.LogManager,berkeley.com.sleepycat.je.log.LogBufferSegment,berkeley.com.sleepycat.je.utilint.VLSN,long)>(this, useBuffer, vlsn#58, fileOffset);

     label33:
        return $r70;

        catch java.lang.Throwable from label20 to label25 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
    }

    berkeley.com.sleepycat.je.log.entry.LogEntry getLogEntryAllowChecksumException(long, java.io.RandomAccessFile, int) throws berkeley.com.sleepycat.je.log.ChecksumException, berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn, $l1;
        java.io.RandomAccessFile file;
        int logVersion, $i0;
        berkeley.com.sleepycat.je.log.FileSource logSource, $r0;
        berkeley.com.sleepycat.je.log.entry.LogEntry l6;
        java.lang.Throwable l7, $r3;
        berkeley.com.sleepycat.je.log.FileManager $r1;
        berkeley.com.sleepycat.je.log.WholeEntry $r2;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

        file := @parameter1: java.io.RandomAccessFile;

        logVersion := @parameter2: int;

        $r0 = new berkeley.com.sleepycat.je.log.FileSource;

        $i0 = this.<berkeley.com.sleepycat.je.log.LogManager: int readBufferSize>;

        $r1 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        $l1 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(lsn);

        specialinvoke $r0.<berkeley.com.sleepycat.je.log.FileSource: void <init>(java.io.RandomAccessFile,int,berkeley.com.sleepycat.je.log.FileManager,long,int)>(file, $i0, $r1, $l1, logVersion);

        logSource = $r0;

     label1:
        $r2 = virtualinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getLogEntryFromLogSource(long,int,berkeley.com.sleepycat.je.log.LogSource,boolean)>(lsn, 0, logSource, 0);

        l6 = virtualinvoke $r2.<berkeley.com.sleepycat.je.log.WholeEntry: berkeley.com.sleepycat.je.log.entry.LogEntry getEntry()>();

     label2:
        interfaceinvoke logSource.<berkeley.com.sleepycat.je.log.LogSource: void release()>();

        return l6;

     label3:
        $r3 := @caughtexception;

     label4:
        l7 = $r3;

     label5:
        interfaceinvoke logSource.<berkeley.com.sleepycat.je.log.LogSource: void release()>();

        throw l7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    berkeley.com.sleepycat.je.log.WholeEntry getLogEntryFromLogSource(long, int, berkeley.com.sleepycat.je.log.LogSource, boolean) throws berkeley.com.sleepycat.je.log.ChecksumException, berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn, fileOffset, $l12, $l13, $l16;
        int lastLoggedSize, itemStart, headerSizeMinusChecksum, itemSize, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i14, $i15;
        berkeley.com.sleepycat.je.log.LogSource logSource;
        boolean invisibleReadAllowed, $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        berkeley.com.sleepycat.je.log.LogEntryHeader header, $r13;
        berkeley.com.sleepycat.je.log.entry.LogEntry logEntry;
        java.io.IOException e, $r61;
        java.nio.ByteBuffer $r0, entryBuffer#10;
        berkeley.com.sleepycat.je.log.ChecksumException $r1, $r14, $r29;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r39, $r45, $r46, $r48, $r49, $r50, $r53, $r54, $r55;
        java.lang.String $r10, $r12, $r23, $r25, $r38, $r40, $r47, $r51, $r56;
        berkeley.com.sleepycat.je.log.ChecksumValidator validator#76, $r26;
        berkeley.com.sleepycat.je.utilint.LongStat $r41;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r42, $r62;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r43, $r58, $r63;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r44, $r64;
        byte $b17, $b18, $b19;
        java.lang.AssertionError $r52;
        berkeley.com.sleepycat.je.log.LogEntryType $r57;
        berkeley.com.sleepycat.je.utilint.TestHook $r59, $r60;
        berkeley.com.sleepycat.je.log.WholeEntry $r65;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

        lastLoggedSize := @parameter1: int;

        logSource := @parameter2: berkeley.com.sleepycat.je.log.LogSource;

        invisibleReadAllowed := @parameter3: boolean;

        fileOffset = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>(lsn);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(lastLoggedSize);

        if lastLoggedSize <= 0 goto label01;

        $r0 = interfaceinvoke logSource.<berkeley.com.sleepycat.je.log.LogSource: java.nio.ByteBuffer getBytes(long,int)>(fileOffset, lastLoggedSize);

        goto label02;

     label01:
        $r0 = interfaceinvoke logSource.<berkeley.com.sleepycat.je.log.LogSource: java.nio.ByteBuffer getBytes(long)>(fileOffset);

     label02:
        entryBuffer#10 = $r0;

        $i0 = virtualinvoke entryBuffer#10.<java.nio.ByteBuffer: int remaining()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 >= 14 goto label03;

        $r1 = new berkeley.com.sleepycat.je.log.ChecksumException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete log entry header in ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(logSource);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" needed=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(14);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" remaining=");

        $i1 = virtualinvoke entryBuffer#10.<java.nio.ByteBuffer: int remaining()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lsn=");

        $r10 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lsn);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<berkeley.com.sleepycat.je.log.ChecksumException: void <init>(java.lang.String)>($r12);

        throw $r1;

     label03:
        $r13 = new berkeley.com.sleepycat.je.log.LogEntryHeader;

        $i2 = interfaceinvoke logSource.<berkeley.com.sleepycat.je.log.LogSource: int getLogVersion()>();

        specialinvoke $r13.<berkeley.com.sleepycat.je.log.LogEntryHeader: void <init>(java.nio.ByteBuffer,int,long)>(entryBuffer#10, $i2, lsn);

        header = $r13;

        $z0 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: boolean isVariableLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label05;

        $i3 = virtualinvoke entryBuffer#10.<java.nio.ByteBuffer: int remaining()>();

        $i4 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: int getVariablePortionSize()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i3 >= $i4 goto label04;

        $r14 = new berkeley.com.sleepycat.je.log.ChecksumException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete log entry header in ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(logSource);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" needed=");

        $i5 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: int getVariablePortionSize()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" remaining=");

        $i6 = virtualinvoke entryBuffer#10.<java.nio.ByteBuffer: int remaining()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lsn=");

        $r23 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lsn);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<berkeley.com.sleepycat.je.log.ChecksumException: void <init>(java.lang.String)>($r25);

        throw $r14;

     label04:
        virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: void readVariablePortion(java.nio.ByteBuffer)>(entryBuffer#10);

     label05:
        validator#76 = null;

        $z1 = this.<berkeley.com.sleepycat.je.log.LogManager: boolean doChecksumOnRead>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label07;

        itemStart = virtualinvoke entryBuffer#10.<java.nio.ByteBuffer: int position()>();

        $z2 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: boolean isInvisible()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label06;

        $i7 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: int getSize()>();

        $i8 = itemStart - $i7;

        staticinvoke <berkeley.com.sleepycat.je.log.LogEntryHeader: void turnOffInvisible(java.nio.ByteBuffer,int)>(entryBuffer#10, $i8);

     label06:
        $r26 = new berkeley.com.sleepycat.je.log.ChecksumValidator;

        specialinvoke $r26.<berkeley.com.sleepycat.je.log.ChecksumValidator: void <init>()>();

        validator#76 = $r26;

        headerSizeMinusChecksum = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: int getSizeMinusChecksum()>();

        $i9 = itemStart - headerSizeMinusChecksum;

        virtualinvoke entryBuffer#10.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i9);

        virtualinvoke validator#76.<berkeley.com.sleepycat.je.log.ChecksumValidator: void update(java.nio.ByteBuffer,int)>(entryBuffer#10, headerSizeMinusChecksum);

        virtualinvoke entryBuffer#10.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(itemStart);

     label07:
        itemSize = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: int getItemSize()>();

        $i10 = virtualinvoke entryBuffer#10.<java.nio.ByteBuffer: int remaining()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(itemSize);

        if $i10 >= itemSize goto label09;

        $i11 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: int getSize()>();

        $l12 = (long) $i11;

        $l13 = fileOffset + $l12;

        entryBuffer#10 = interfaceinvoke logSource.<berkeley.com.sleepycat.je.log.LogSource: java.nio.ByteBuffer getBytes(long,int)>($l13, itemSize);

        $i14 = virtualinvoke entryBuffer#10.<java.nio.ByteBuffer: int remaining()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(itemSize);

        if $i14 >= itemSize goto label08;

        $r29 = new berkeley.com.sleepycat.je.log.ChecksumException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete log entry item in ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(logSource);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" needed=");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(itemSize);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" remaining=");

        $i15 = virtualinvoke entryBuffer#10.<java.nio.ByteBuffer: int remaining()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lsn=");

        $r38 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lsn);

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<berkeley.com.sleepycat.je.log.ChecksumException: void <init>(java.lang.String)>($r40);

        throw $r29;

     label08:
        $r41 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.LongStat nRepeatFaultReads>;

        virtualinvoke $r41.<berkeley.com.sleepycat.je.utilint.LongStat: void increment()>();

     label09:
        $z3 = this.<berkeley.com.sleepycat.je.log.LogManager: boolean doChecksumOnRead>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label10;

        virtualinvoke validator#76.<berkeley.com.sleepycat.je.log.ChecksumValidator: void update(java.nio.ByteBuffer,int)>(entryBuffer#10, itemSize);

        $l16 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: long getChecksum()>();

        virtualinvoke validator#76.<berkeley.com.sleepycat.je.log.ChecksumValidator: void validate(long,long)>($l16, lsn);

     label10:
        $z4 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: boolean isInvisible()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label11;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(invisibleReadAllowed);

        if invisibleReadAllowed != 0 goto label11;

        $r42 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r43 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r44 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_INTEGRITY>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read invisible log entry at ");

        $r47 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lsn);

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(header);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.String)>($r43, $r44, $r51);

        throw $r42;

     label11:
        $z5 = <berkeley.com.sleepycat.je.log.LogManager: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z5);

        if $z5 != 0 goto label12;

        $b17 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: byte getType()>();

        $z6 = staticinvoke <berkeley.com.sleepycat.je.log.LogEntryType: boolean isValidType(byte)>($b17);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z6);

        if $z6 != 0 goto label12;

        $r52 = new java.lang.AssertionError;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read non-valid log entry type: ");

        $b18 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: byte getType()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b18);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r52.<java.lang.AssertionError: void <init>(java.lang.Object)>($r56);

        throw $r52;

     label12:
        $b19 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: byte getType()>();

        $r57 = staticinvoke <berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.LogEntryType findType(byte)>($b19);

        logEntry = virtualinvoke $r57.<berkeley.com.sleepycat.je.log.LogEntryType: berkeley.com.sleepycat.je.log.entry.LogEntry getNewLogEntry()>();

        $r58 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        interfaceinvoke logEntry.<berkeley.com.sleepycat.je.log.entry.LogEntry: void readEntry(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.log.LogEntryHeader,java.nio.ByteBuffer)>($r58, header, entryBuffer#10);

        $r59 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.TestHook readHook>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r59);

        if $r59 == null goto label16;

     label13:
        $r60 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.TestHook readHook>;

        interfaceinvoke $r60.<berkeley.com.sleepycat.je.utilint.TestHook: void doIOHook()>();

     label14:
        goto label16;

     label15:
        $r61 := @caughtexception;

        e = $r61;

        $r62 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r63 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r64 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_READ>;

        specialinvoke $r62.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.Throwable)>($r63, $r64, e);

        throw $r62;

     label16:
        $r65 = new berkeley.com.sleepycat.je.log.WholeEntry;

        specialinvoke $r65.<berkeley.com.sleepycat.je.log.WholeEntry: void <init>(berkeley.com.sleepycat.je.log.LogEntryHeader,berkeley.com.sleepycat.je.log.entry.LogEntry)>(header, logEntry);

        return $r65;

        catch java.io.IOException from label13 to label14 with label15;
    }

    java.nio.ByteBuffer putIntoBuffer(berkeley.com.sleepycat.je.log.entry.LogEntry, long)
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.log.entry.LogEntry entry;
        long prevLogEntryOffset;
        berkeley.com.sleepycat.je.log.Provisional $r0;
        berkeley.com.sleepycat.je.log.LogEntryHeader header, $r1;
        java.nio.ByteBuffer destBuffer, $r5;
        berkeley.com.sleepycat.je.log.ReplicationContext $r2;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.log.LogEntryType $r3;
        java.lang.AssertionError $r4;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        entry := @parameter0: berkeley.com.sleepycat.je.log.entry.LogEntry;

        prevLogEntryOffset := @parameter1: long;

        $r1 = new berkeley.com.sleepycat.je.log.LogEntryHeader;

        $r0 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional NO>;

        $r2 = <berkeley.com.sleepycat.je.log.ReplicationContext: berkeley.com.sleepycat.je.log.ReplicationContext NO_REPLICATE>;

        specialinvoke $r1.<berkeley.com.sleepycat.je.log.LogEntryHeader: void <init>(berkeley.com.sleepycat.je.log.entry.LogEntry,berkeley.com.sleepycat.je.log.Provisional,berkeley.com.sleepycat.je.log.ReplicationContext)>(entry, $r0, $r2);

        header = $r1;

        $z0 = <berkeley.com.sleepycat.je.log.LogManager: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke entry.<berkeley.com.sleepycat.je.log.entry.LogEntry: berkeley.com.sleepycat.je.log.LogEntryType getLogType()>();

        $z1 = virtualinvoke $r3.<berkeley.com.sleepycat.je.log.LogEntryType: boolean isTransactional()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        destBuffer = specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: java.nio.ByteBuffer marshallIntoBuffer(berkeley.com.sleepycat.je.log.LogEntryHeader,berkeley.com.sleepycat.je.log.entry.LogEntry)>(header, entry);

        $r5 = virtualinvoke header.<berkeley.com.sleepycat.je.log.LogEntryHeader: java.nio.ByteBuffer addPostMarshallingInfo(java.nio.ByteBuffer,long,berkeley.com.sleepycat.je.utilint.VLSN)>(destBuffer, prevLogEntryOffset, null);

        return $r5;
    }

    public berkeley.com.sleepycat.je.utilint.StatGroup loadStats(berkeley.com.sleepycat.je.StatsConfig) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.StatsConfig config;
        berkeley.com.sleepycat.je.utilint.StatGroup copyStats, $r0, $r2, $r4, $r6;
        boolean $z0, $z1;
        berkeley.com.sleepycat.je.log.LogBufferPool $r1;
        berkeley.com.sleepycat.je.log.FileManager $r3;
        berkeley.com.sleepycat.je.log.FSyncManager $r5;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        config := @parameter0: berkeley.com.sleepycat.je.StatsConfig;

        $z0 = virtualinvoke config.<berkeley.com.sleepycat.je.StatsConfig: boolean getFast()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        virtualinvoke this.<berkeley.com.sleepycat.je.log.LogManager: void loadEndOfLogStat()>();

     label1:
        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.StatGroup stats>;

        $z1 = virtualinvoke config.<berkeley.com.sleepycat.je.StatsConfig: boolean getClear()>();

        copyStats = virtualinvoke $r0.<berkeley.com.sleepycat.je.utilint.StatGroup: berkeley.com.sleepycat.je.utilint.StatGroup cloneGroup(boolean)>($z1);

        $r1 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogBufferPool logBufferPool>;

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.utilint.StatGroup loadStats(berkeley.com.sleepycat.je.StatsConfig)>(config);

        virtualinvoke copyStats.<berkeley.com.sleepycat.je.utilint.StatGroup: void addAll(berkeley.com.sleepycat.je.utilint.StatGroup)>($r2);

        $r3 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        $r4 = virtualinvoke $r3.<berkeley.com.sleepycat.je.log.FileManager: berkeley.com.sleepycat.je.utilint.StatGroup loadStats(berkeley.com.sleepycat.je.StatsConfig)>(config);

        virtualinvoke copyStats.<berkeley.com.sleepycat.je.utilint.StatGroup: void addAll(berkeley.com.sleepycat.je.utilint.StatGroup)>($r4);

        $r5 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FSyncManager grpManager>;

        $r6 = virtualinvoke $r5.<berkeley.com.sleepycat.je.log.FSyncManager: berkeley.com.sleepycat.je.utilint.StatGroup loadStats(berkeley.com.sleepycat.je.StatsConfig)>(config);

        virtualinvoke copyStats.<berkeley.com.sleepycat.je.utilint.StatGroup: void addAll(berkeley.com.sleepycat.je.utilint.StatGroup)>($r6);

        return copyStats;
    }

    public void loadEndOfLogStat()
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        java.lang.Object l1, $r0;
        java.lang.Throwable l2, $r4;
        berkeley.com.sleepycat.je.utilint.LSNStat $r1;
        berkeley.com.sleepycat.je.log.FileManager $r2;
        long $l0;
        java.lang.Long $r3;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object logWriteMutex>;

        l1 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.utilint.LSNStat endOfLog>;

        $r2 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        $l0 = virtualinvoke $r2.<berkeley.com.sleepycat.je.log.FileManager: long getLastUsedLsn()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r1.<berkeley.com.sleepycat.je.utilint.LSNStat: void set(java.lang.Long)>($r3);

        exitmonitor l1;

     label2:
        goto label6;

     label3:
        $r4 := @caughtexception;

     label4:
        l2 = $r4;

        exitmonitor l1;

     label5:
        throw l2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void flushSync() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        boolean $z0;
        berkeley.com.sleepycat.je.log.FileManager $r0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        $z0 = this.<berkeley.com.sleepycat.je.log.LogManager: boolean readOnly>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: void flushInternal(boolean)>(0);

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.log.FileManager: void syncLogEnd()>();

        return;
    }

    private void flushInternal(boolean) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        boolean flushWriteQueue, $z0, $z1, $z2;
        java.lang.Object l2, $r1;
        java.lang.Throwable l3, $r4;
        java.lang.AssertionError $r0;
        berkeley.com.sleepycat.je.log.LogBufferPool $r2, $r3, $r5;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        flushWriteQueue := @parameter0: boolean;

        $z0 = <berkeley.com.sleepycat.je.log.LogManager: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $z1 = this.<berkeley.com.sleepycat.je.log.LogManager: boolean readOnly>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object logWriteMutex>;

        l2 = $r1;

        entermonitor $r1;

     label2:
        $r2 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogBufferPool logBufferPool>;

        $z2 = virtualinvoke $r2.<berkeley.com.sleepycat.je.log.LogBufferPool: boolean bumpCurrent(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label4;

        $r3 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogBufferPool logBufferPool>;

        virtualinvoke $r3.<berkeley.com.sleepycat.je.log.LogBufferPool: void bumpAndWriteDirty(int,boolean)>(0, flushWriteQueue);

        exitmonitor l2;

     label3:
        return;

     label4:
        exitmonitor l2;

     label5:
        goto label9;

     label6:
        $r4 := @caughtexception;

     label7:
        l3 = $r4;

        exitmonitor l2;

     label8:
        throw l3;

     label9:
        $r5 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogBufferPool logBufferPool>;

        virtualinvoke $r5.<berkeley.com.sleepycat.je.log.LogBufferPool: void writeDirty(boolean)>(flushWriteQueue);

        return;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void flushNoSync() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        $z0 = this.<berkeley.com.sleepycat.je.log.LogManager: boolean readOnly>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: void flushInternal(boolean)>(1);

        return;
    }

    public void removeTrackedFile(berkeley.com.sleepycat.je.cleaner.TrackedFileSummary)
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.cleaner.TrackedFileSummary tfs;
        java.lang.Object l2, $r0;
        java.lang.Throwable l3, $r1;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        tfs := @parameter0: berkeley.com.sleepycat.je.cleaner.TrackedFileSummary;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object logWriteMutex>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        virtualinvoke tfs.<berkeley.com.sleepycat.je.cleaner.TrackedFileSummary: void reset()>();

        exitmonitor l2;

     label2:
        goto label6;

     label3:
        $r1 := @caughtexception;

     label4:
        l3 = $r1;

        exitmonitor l2;

     label5:
        throw l3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void countObsoleteNodeDupsAllowed(long, berkeley.com.sleepycat.je.log.LogEntryType, int, berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn;
        berkeley.com.sleepycat.je.log.LogEntryType type;
        int size;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl nodeDb;
        java.lang.Object l6, $r0;
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker tracker;
        java.lang.Throwable l8, $r2;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

        type := @parameter1: berkeley.com.sleepycat.je.log.LogEntryType;

        size := @parameter2: int;

        nodeDb := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object logWriteMutex>;

        l6 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        tracker = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.UtilizationTracker getUtilizationTracker()>();

        virtualinvoke tracker.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: void countObsoleteNodeDupsAllowed(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(lsn, type, size, nodeDb);

        exitmonitor l6;

     label2:
        goto label6;

     label3:
        $r2 := @caughtexception;

     label4:
        l8 = $r2;

        exitmonitor l6;

     label5:
        throw l8;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void countObsoleteNode(long, berkeley.com.sleepycat.je.log.LogEntryType, int, berkeley.com.sleepycat.je.dbi.DatabaseImpl, boolean)
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn;
        berkeley.com.sleepycat.je.log.LogEntryType type;
        int size;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl nodeDb;
        boolean countExact;
        java.lang.Object l7, $r0;
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker tracker;
        java.lang.Throwable l9, $r2;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

        type := @parameter1: berkeley.com.sleepycat.je.log.LogEntryType;

        size := @parameter2: int;

        nodeDb := @parameter3: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        countExact := @parameter4: boolean;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object logWriteMutex>;

        l7 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        tracker = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.UtilizationTracker getUtilizationTracker()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(countExact);

        if countExact == 0 goto label2;

        virtualinvoke tracker.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: void countObsoleteNode(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(lsn, type, size, nodeDb);

        goto label3;

     label2:
        virtualinvoke tracker.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: void countObsoleteNodeInexact(long,berkeley.com.sleepycat.je.log.LogEntryType,int,berkeley.com.sleepycat.je.dbi.DatabaseImpl)>(lsn, type, size, nodeDb);

     label3:
        exitmonitor l7;

     label4:
        goto label8;

     label5:
        $r2 := @caughtexception;

     label6:
        l9 = $r2;

        exitmonitor l7;

     label7:
        throw l9;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public berkeley.com.sleepycat.je.log.WholeEntry getWholeLogEntryHandleFileNotFound(long) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn;
        java.io.FileNotFoundException e, $r2;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r0;
        berkeley.com.sleepycat.je.log.WholeEntry $r1;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r4;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

     label1:
        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getWholeLogEntry(long)>(lsn);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        $r3 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r4 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r0 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_FILE_NOT_FOUND>;

        specialinvoke $r3.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.Throwable)>($r4, $r0, e);

        throw $r3;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public berkeley.com.sleepycat.je.log.WholeEntry getWholeLogEntry(long) throws java.io.FileNotFoundException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn;
        berkeley.com.sleepycat.je.log.WholeEntry $r0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getLogEntry(long,int,boolean)>(lsn, 0, 0);

        return $r0;
    }

    private berkeley.com.sleepycat.je.log.WholeEntry getLogEntry(long, int, boolean) throws java.io.FileNotFoundException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn, fileLength#31, $l0, $l1, $l2;
        int lastLoggedSize, $i4;
        boolean invisibleReadAllowed, $z0, $z1, $z2;
        berkeley.com.sleepycat.je.log.WholeEntry l6, l12;
        berkeley.com.sleepycat.je.log.ChecksumException ce, $r1, $r11, e#73;
        berkeley.com.sleepycat.je.log.LogBuffer logBuffer;
        java.io.IOException l11, $r5;
        berkeley.com.sleepycat.je.log.FileHandleSource fileSource, $r8;
        java.lang.Throwable l13, l14, $r10, $r17;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0, $r6, $r13, $r16;
        berkeley.com.sleepycat.je.log.LogSource logSource#4;
        java.lang.AssertionError $r2;
        berkeley.com.sleepycat.je.log.FileHandle fileHandle#29;
        berkeley.com.sleepycat.je.log.FileManager $r3, $r9;
        java.io.RandomAccessFile $r4;
        byte $b3;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r7, $r12;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r14;
        java.lang.Error $r15, e#81;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

        lastLoggedSize := @parameter1: int;

        invisibleReadAllowed := @parameter2: boolean;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void checkIfInvalid()>();

        logSource#4 = null;

     label01:
        logSource#4 = virtualinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogSource getLogSource(long)>(lsn);

     label02:
        l6 = virtualinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getLogEntryFromLogSource(long,int,berkeley.com.sleepycat.je.log.LogSource,boolean)>(lsn, lastLoggedSize, logSource#4, invisibleReadAllowed);

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logSource#4);

        if logSource#4 == null goto label04;

        interfaceinvoke logSource#4.<berkeley.com.sleepycat.je.log.LogSource: void release()>();

     label04:
        return l6;

     label05:
        $r1 := @caughtexception;

     label06:
        ce = $r1;

        $z0 = logSource#4 instanceof berkeley.com.sleepycat.je.log.LogBuffer;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label08;

        $z1 = <berkeley.com.sleepycat.je.log.LogManager: boolean $assertionsDisabled>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label07;

        $z2 = logSource#4 instanceof berkeley.com.sleepycat.je.log.FileSource;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label07;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label07:
        throw ce;

     label08:
        logBuffer = (berkeley.com.sleepycat.je.log.LogBuffer) logSource#4;

        fileHandle#29 = null;

        fileLength#31 = -1L;

     label09:
        $r3 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        $l0 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(lsn);

        fileHandle#29 = virtualinvoke $r3.<berkeley.com.sleepycat.je.log.FileManager: berkeley.com.sleepycat.je.log.FileHandle getFileHandle(long)>($l0);

        $r4 = virtualinvoke fileHandle#29.<berkeley.com.sleepycat.je.log.FileHandle: java.io.RandomAccessFile getFile()>();

        fileLength#31 = virtualinvoke $r4.<java.io.RandomAccessFile: long length()>();

     label10:
        goto label12;

     label11:
        $r5 := @caughtexception;

        l11 = $r5;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(fileHandle#29);

        if fileHandle#29 == null goto label13;

        $l1 = virtualinvoke logBuffer.<berkeley.com.sleepycat.je.log.LogBuffer: long getFirstLsn()>();

        $l2 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileOffset(long)>($l1);

        $b3 = fileLength#31 cmp $l2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 > 0 goto label14;

     label13:
        $r6 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r7 = staticinvoke <berkeley.com.sleepycat.je.EnvironmentFailureException: berkeley.com.sleepycat.je.EnvironmentFailureException unexpectedException(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.Exception)>($r6, "Corruption detected in log buffer, but was not written to disk.", ce);

        throw $r7;

     label14:
        $r8 = new berkeley.com.sleepycat.je.log.FileHandleSource;

        $i4 = this.<berkeley.com.sleepycat.je.log.LogManager: int readBufferSize>;

        $r9 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        specialinvoke $r8.<berkeley.com.sleepycat.je.log.FileHandleSource: void <init>(berkeley.com.sleepycat.je.log.FileHandle,int,berkeley.com.sleepycat.je.log.FileManager)>(fileHandle#29, $i4, $r9);

        fileSource = $r8;

     label15:
        l12 = virtualinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getLogEntryFromLogSource(long,int,berkeley.com.sleepycat.je.log.LogSource,boolean)>(lsn, lastLoggedSize, fileSource, invisibleReadAllowed);

     label16:
        virtualinvoke fileSource.<berkeley.com.sleepycat.je.log.FileSource: void release()>();

     label17:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logSource#4);

        if logSource#4 == null goto label18;

        interfaceinvoke logSource#4.<berkeley.com.sleepycat.je.log.LogSource: void release()>();

     label18:
        return l12;

     label19:
        $r10 := @caughtexception;

     label20:
        l13 = $r10;

     label21:
        virtualinvoke fileSource.<berkeley.com.sleepycat.je.log.FileSource: void release()>();

        throw l13;

     label22:
        $r11 := @caughtexception;

        e#73 = $r11;

        $r12 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r13 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r14 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_CHECKSUM>;

        specialinvoke $r12.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.Throwable)>($r13, $r14, e#73);

        throw $r12;

     label23:
        $r15 := @caughtexception;

        e#81 = $r15;

        $r16 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r16.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: void invalidate(java.lang.Error)>(e#81);

        throw e#81;

     label24:
        $r17 := @caughtexception;

        l14 = $r17;

     label25:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logSource#4);

        if logSource#4 == null goto label26;

        interfaceinvoke logSource#4.<berkeley.com.sleepycat.je.log.LogSource: void release()>();

     label26:
        throw l14;

        catch berkeley.com.sleepycat.je.log.ChecksumException from label02 to label03 with label05;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch berkeley.com.sleepycat.je.log.ChecksumException from label01 to label03 with label22;
        catch berkeley.com.sleepycat.je.log.ChecksumException from label06 to label17 with label22;
        catch berkeley.com.sleepycat.je.log.ChecksumException from label20 to label22 with label22;
        catch java.lang.Error from label01 to label03 with label23;
        catch java.lang.Error from label06 to label17 with label23;
        catch java.lang.Error from label20 to label22 with label23;
        catch java.lang.Throwable from label01 to label03 with label24;
        catch java.lang.Throwable from label06 to label17 with label24;
        catch java.lang.Throwable from label20 to label25 with label24;
    }

    public berkeley.com.sleepycat.je.log.LogSource getLogSource(long) throws java.io.FileNotFoundException, berkeley.com.sleepycat.je.log.ChecksumException, berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn, fileNum;
        berkeley.com.sleepycat.je.log.LogBuffer logBuffer;
        berkeley.com.sleepycat.je.DatabaseException e, $r5;
        berkeley.com.sleepycat.je.log.LogBufferPool $r0;
        berkeley.com.sleepycat.je.log.FileHandleSource $r1;
        berkeley.com.sleepycat.je.log.FileManager $r2, $r4;
        berkeley.com.sleepycat.je.log.FileHandle $r3;
        int $i0;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r8, $r10;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogBufferPool logBufferPool>;

        logBuffer = virtualinvoke $r0.<berkeley.com.sleepycat.je.log.LogBufferPool: berkeley.com.sleepycat.je.log.LogBuffer getReadBufferByLsn(long)>(lsn);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(logBuffer);

        if logBuffer != null goto label4;

     label1:
        fileNum = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: long getFileNumber(long)>(lsn);

        $r1 = new berkeley.com.sleepycat.je.log.FileHandleSource;

        $r2 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.log.FileManager: berkeley.com.sleepycat.je.log.FileHandle getFileHandle(long)>(fileNum);

        $i0 = this.<berkeley.com.sleepycat.je.log.LogManager: int readBufferSize>;

        $r4 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.FileManager fileManager>;

        specialinvoke $r1.<berkeley.com.sleepycat.je.log.FileHandleSource: void <init>(berkeley.com.sleepycat.je.log.FileHandle,int,berkeley.com.sleepycat.je.log.FileManager)>($r3, $i0, $r4);

     label2:
        return $r1;

     label3:
        $r5 := @caughtexception;

        e = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lsn= ");

        $r8 = staticinvoke <berkeley.com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(lsn);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke e.<berkeley.com.sleepycat.je.DatabaseException: void addErrorMessage(java.lang.String)>($r10);

        throw e;

     label4:
        return logBuffer;

        catch berkeley.com.sleepycat.je.DatabaseException from label1 to label2 with label3;
    }

    public long logForceFlush(berkeley.com.sleepycat.je.log.entry.LogEntry, boolean, berkeley.com.sleepycat.je.log.ReplicationContext) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.log.entry.LogEntry entry;
        boolean fsyncRequired;
        berkeley.com.sleepycat.je.log.ReplicationContext repContext;
        berkeley.com.sleepycat.je.log.Provisional $r0;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        entry := @parameter0: berkeley.com.sleepycat.je.log.entry.LogEntry;

        fsyncRequired := @parameter1: boolean;

        repContext := @parameter2: berkeley.com.sleepycat.je.log.ReplicationContext;

        $r0 = <berkeley.com.sleepycat.je.log.Provisional: berkeley.com.sleepycat.je.log.Provisional NO>;

        $l0 = specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: long log(berkeley.com.sleepycat.je.log.entry.LogEntry,berkeley.com.sleepycat.je.log.Provisional,boolean,boolean,boolean,berkeley.com.sleepycat.je.log.ReplicationContext)>(entry, $r0, 1, fsyncRequired, 0, repContext);

        return $l0;
    }

    public void transferToUtilizationTracker(berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker localTracker;
        java.lang.Object l2, $r0;
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker tracker;
        java.lang.Throwable l4, $r2;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        localTracker := @parameter0: berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object logWriteMutex>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        tracker = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.UtilizationTracker getUtilizationTracker()>();

        virtualinvoke localTracker.<berkeley.com.sleepycat.je.cleaner.LocalUtilizationTracker: void transferToUtilizationTracker(berkeley.com.sleepycat.je.cleaner.UtilizationTracker)>(tracker);

        exitmonitor l2;

     label2:
        goto label6;

     label3:
        $r2 := @caughtexception;

     label4:
        l4 = $r2;

        exitmonitor l2;

     label5:
        throw l4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean getChecksumOnRead()
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        $z0 = this.<berkeley.com.sleepycat.je.log.LogManager: boolean doChecksumOnRead>;

        return $z0;
    }

    public void countObsoleteDb(berkeley.com.sleepycat.je.dbi.DatabaseImpl)
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        java.lang.Object l2, $r0;
        java.lang.Throwable l3, $r3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker $r2;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object logWriteMutex>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.UtilizationTracker getUtilizationTracker()>();

        virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: void countObsoleteDb(berkeley.com.sleepycat.je.cleaner.BaseUtilizationTracker,long)>($r2, -1L);

        exitmonitor l2;

     label2:
        goto label6;

     label3:
        $r3 := @caughtexception;

     label4:
        l3 = $r3;

        exitmonitor l2;

     label5:
        throw l3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.Object getEntry(long) throws java.io.FileNotFoundException, berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn;
        berkeley.com.sleepycat.je.log.entry.LogEntry entry;
        java.lang.Object $r0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

        entry = virtualinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.entry.LogEntry getLogEntry(long)>(lsn);

        $r0 = interfaceinvoke entry.<berkeley.com.sleepycat.je.log.entry.LogEntry: java.lang.Object getMainItem()>();

        return $r0;
    }

    public berkeley.com.sleepycat.je.log.entry.LogEntry getLogEntry(long) throws java.io.FileNotFoundException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn;
        berkeley.com.sleepycat.je.log.WholeEntry $r0;
        berkeley.com.sleepycat.je.log.entry.LogEntry $r1;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getLogEntry(long,int,boolean)>(lsn, 0, 0);

        $r1 = virtualinvoke $r0.<berkeley.com.sleepycat.je.log.WholeEntry: berkeley.com.sleepycat.je.log.entry.LogEntry getEntry()>();

        return $r1;
    }

    public boolean removeDbFileSummaries(berkeley.com.sleepycat.je.dbi.DatabaseImpl, java.util.Collection)
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.dbi.DatabaseImpl db;
        java.util.Collection fileNums;
        java.lang.Object l3, $r0;
        java.lang.Throwable l4, $r1;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        db := @parameter0: berkeley.com.sleepycat.je.dbi.DatabaseImpl;

        fileNums := @parameter1: java.util.Collection;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object logWriteMutex>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $z0 = virtualinvoke db.<berkeley.com.sleepycat.je.dbi.DatabaseImpl: boolean removeDbFileSummaries(java.util.Collection)>(fileNums);

        exitmonitor l3;

     label2:
        return $z0;

     label3:
        $r1 := @caughtexception;

     label4:
        l4 = $r1;

        exitmonitor l3;

     label5:
        throw l4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public long getLastLsnAtRecovery()
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long $l0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        $l0 = this.<berkeley.com.sleepycat.je.log.LogManager: long lastLsnAtRecovery>;

        return $l0;
    }

    public void initExpirationTracker(berkeley.com.sleepycat.je.cleaner.ExpirationTracker)
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.cleaner.ExpirationTracker tracker;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        tracker := @parameter0: berkeley.com.sleepycat.je.cleaner.ExpirationTracker;

        this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.cleaner.ExpirationTracker expirationTracker> = tracker;

        return;
    }

    berkeley.com.sleepycat.je.log.entry.LogEntry getLogEntryAllowChecksumException(long) throws berkeley.com.sleepycat.je.log.ChecksumException, java.io.FileNotFoundException, berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn;
        berkeley.com.sleepycat.je.log.LogSource logSource;
        berkeley.com.sleepycat.je.log.entry.LogEntry l4;
        java.lang.Throwable l5, $r1;
        berkeley.com.sleepycat.je.log.WholeEntry $r0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

        logSource = virtualinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogSource getLogSource(long)>(lsn);

     label1:
        $r0 = virtualinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getLogEntryFromLogSource(long,int,berkeley.com.sleepycat.je.log.LogSource,boolean)>(lsn, 0, logSource, 0);

        l4 = virtualinvoke $r0.<berkeley.com.sleepycat.je.log.WholeEntry: berkeley.com.sleepycat.je.log.entry.LogEntry getEntry()>();

     label2:
        interfaceinvoke logSource.<berkeley.com.sleepycat.je.log.LogSource: void release()>();

        return l4;

     label3:
        $r1 := @caughtexception;

     label4:
        l5 = $r1;

     label5:
        interfaceinvoke logSource.<berkeley.com.sleepycat.je.log.LogSource: void release()>();

        throw l5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.Object getEntryHandleFileNotFound(long)
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn;
        berkeley.com.sleepycat.je.log.entry.LogEntry entry;
        java.lang.Object $r0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

        entry = virtualinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.entry.LogEntry getLogEntryHandleFileNotFound(long)>(lsn);

        $r0 = interfaceinvoke entry.<berkeley.com.sleepycat.je.log.entry.LogEntry: java.lang.Object getMainItem()>();

        return $r0;
    }

    public berkeley.com.sleepycat.je.log.entry.LogEntry getLogEntryHandleFileNotFound(long) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn;
        java.io.FileNotFoundException e, $r2;
        berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason $r0;
        berkeley.com.sleepycat.je.log.entry.LogEntry $r1;
        berkeley.com.sleepycat.je.EnvironmentFailureException $r3;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r4;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

     label1:
        $r1 = virtualinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.entry.LogEntry getLogEntry(long)>(lsn);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        e = $r2;

        $r3 = new berkeley.com.sleepycat.je.EnvironmentFailureException;

        $r4 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r0 = <berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason: berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason LOG_FILE_NOT_FOUND>;

        specialinvoke $r3.<berkeley.com.sleepycat.je.EnvironmentFailureException: void <init>(berkeley.com.sleepycat.je.dbi.EnvironmentImpl,berkeley.com.sleepycat.je.dbi.EnvironmentFailureReason,java.lang.Throwable)>($r4, $r0, e);

        throw $r3;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public void setLastLsnAtRecovery(long)
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lastLsnAtRecovery;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lastLsnAtRecovery := @parameter0: long;

        this.<berkeley.com.sleepycat.je.log.LogManager: long lastLsnAtRecovery> = lastLsnAtRecovery;

        return;
    }

    public void logLazily(berkeley.com.sleepycat.je.log.entry.LogEntry, berkeley.com.sleepycat.je.log.ReplicationContext)
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.log.entry.LogEntry entry;
        berkeley.com.sleepycat.je.log.ReplicationContext repContext;
        berkeley.com.sleepycat.je.log.LogManager$LazyQueueEntry $r0;
        java.util.Queue $r1;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        entry := @parameter0: berkeley.com.sleepycat.je.log.entry.LogEntry;

        repContext := @parameter1: berkeley.com.sleepycat.je.log.ReplicationContext;

        $r1 = this.<berkeley.com.sleepycat.je.log.LogManager: java.util.Queue lazyLogQueue>;

        $r0 = new berkeley.com.sleepycat.je.log.LogManager$LazyQueueEntry;

        specialinvoke $r0.<berkeley.com.sleepycat.je.log.LogManager$LazyQueueEntry: void <init>(berkeley.com.sleepycat.je.log.entry.LogEntry,berkeley.com.sleepycat.je.log.ReplicationContext,berkeley.com.sleepycat.je.log.LogManager$1)>(entry, repContext, null);

        interfaceinvoke $r1.<java.util.Queue: boolean add(java.lang.Object)>($r0);

        return;
    }

    public void resetPool(berkeley.com.sleepycat.je.dbi.DbConfigManager) throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        berkeley.com.sleepycat.je.dbi.DbConfigManager configManager;
        java.lang.Object l2, $r0;
        java.lang.Throwable l3, $r2;
        berkeley.com.sleepycat.je.log.LogBufferPool $r1;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        configManager := @parameter0: berkeley.com.sleepycat.je.dbi.DbConfigManager;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object logWriteMutex>;

        l2 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.LogBufferPool logBufferPool>;

        virtualinvoke $r1.<berkeley.com.sleepycat.je.log.LogBufferPool: void reset(berkeley.com.sleepycat.je.dbi.DbConfigManager)>(configManager);

        exitmonitor l2;

     label2:
        goto label6;

     label3:
        $r2 := @caughtexception;

     label4:
        l3 = $r2;

        exitmonitor l2;

     label5:
        throw l3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public berkeley.com.sleepycat.je.log.WholeEntry getLogEntryAllowInvisibleAtRecovery(long, int) throws java.io.FileNotFoundException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn;
        int size;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r0;
        boolean $z0;
        berkeley.com.sleepycat.je.log.WholeEntry $r1;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

        size := @parameter1: int;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z0 = virtualinvoke $r0.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: boolean isInInit()>();

        $r1 = specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getLogEntry(long,int,boolean)>(lsn, size, $z0);

        return $r1;
    }

    public berkeley.com.sleepycat.je.cleaner.TrackedFileSummary getUnflushableTrackedSummary(long)
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long file;
        java.lang.Object l3, $r0;
        java.lang.Throwable l4, $r4;
        berkeley.com.sleepycat.je.dbi.EnvironmentImpl $r1;
        berkeley.com.sleepycat.je.cleaner.UtilizationTracker $r2;
        berkeley.com.sleepycat.je.cleaner.TrackedFileSummary $r3;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        file := @parameter0: long;

        $r0 = this.<berkeley.com.sleepycat.je.log.LogManager: java.lang.Object logWriteMutex>;

        l3 = $r0;

        entermonitor $r0;

     label1:
        $r1 = this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r2 = virtualinvoke $r1.<berkeley.com.sleepycat.je.dbi.EnvironmentImpl: berkeley.com.sleepycat.je.cleaner.UtilizationTracker getUtilizationTracker()>();

        $r3 = virtualinvoke $r2.<berkeley.com.sleepycat.je.cleaner.UtilizationTracker: berkeley.com.sleepycat.je.cleaner.TrackedFileSummary getUnflushableTrackedSummary(long)>(file);

        exitmonitor l3;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

     label4:
        l4 = $r4;

        exitmonitor l3;

     label5:
        throw l4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void flushBeforeSync() throws berkeley.com.sleepycat.je.DatabaseException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        boolean $z0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        $z0 = this.<berkeley.com.sleepycat.je.log.LogManager: boolean readOnly>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: void flushInternal(boolean)>(0);

        return;
    }

    public berkeley.com.sleepycat.je.log.WholeEntry getLogEntryAllowInvisible(long) throws java.io.FileNotFoundException
    {
        berkeley.com.sleepycat.je.log.LogManager this;
        long lsn;
        berkeley.com.sleepycat.je.log.WholeEntry $r0;

        this := @this: berkeley.com.sleepycat.je.log.LogManager;

        lsn := @parameter0: long;

        $r0 = specialinvoke this.<berkeley.com.sleepycat.je.log.LogManager: berkeley.com.sleepycat.je.log.WholeEntry getLogEntry(long,int,boolean)>(lsn, 0, 1);

        return $r0;
    }


