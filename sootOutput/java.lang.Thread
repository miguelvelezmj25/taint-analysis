    static void <clinit>()
    {
        java.lang.StackTraceElement[] $r0;
        java.lang.RuntimePermission $r1;

        staticinvoke <java.lang.Thread: void registerNatives()>();

        $r0 = newarray (java.lang.StackTraceElement)[0];

        <java.lang.Thread: java.lang.StackTraceElement[] EMPTY_STACK_TRACE> = $r0;

        $r1 = new java.lang.RuntimePermission;

        specialinvoke $r1.<java.lang.RuntimePermission: void <init>(java.lang.String)>("enableContextClassLoaderOverride");

        <java.lang.Thread: java.lang.RuntimePermission SUBCLASS_IMPLEMENTATION_PERMISSION> = $r1;

        return;
    }

    public java.lang.ClassLoader getContextClassLoader()
    {
        java.lang.Thread l0;
        java.lang.SecurityManager l1;
        java.lang.Class $r0;
        java.lang.ClassLoader $r1, $r2, $r3;

        l0 := @this: java.lang.Thread;

        $r1 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>;

        if $r1 != null goto label1;

        return null;

     label1:
        l1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if l1 == null goto label2;

        $r2 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>;

        $r0 = staticinvoke <sun.reflect.Reflection: java.lang.Class getCallerClass()>();

        staticinvoke <java.lang.ClassLoader: void checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)>($r2, $r0);

     label2:
        $r3 = l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>;

        return $r3;
    }

    public static java.util.Map getAllStackTraces()
    {
        java.lang.SecurityManager l0;
        java.lang.Thread[] l1;
        java.lang.StackTraceElement[][] l2;
        java.util.HashMap l3, $r2;
        java.lang.StackTraceElement[] l5;
        java.lang.RuntimePermission $r0, $r1;
        int $i0, l4#15, $i1;
        java.lang.Thread $r3;

        l0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if l0 == null goto label1;

        $r0 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission GET_STACK_TRACE_PERMISSION>;

        virtualinvoke l0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r0);

        $r1 = <sun.security.util.SecurityConstants: java.lang.RuntimePermission MODIFY_THREADGROUP_PERMISSION>;

        virtualinvoke l0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r1);

     label1:
        l1 = staticinvoke <java.lang.Thread: java.lang.Thread[] getThreads()>();

        l2 = staticinvoke <java.lang.Thread: java.lang.StackTraceElement[][] dumpThreads(java.lang.Thread[])>(l1);

        $r2 = new java.util.HashMap;

        $i0 = lengthof l1;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>($i0);

        l3 = $r2;

        l4#15 = 0;

     label2:
        $i1 = lengthof l1;

        if l4#15 >= $i1 goto label4;

        l5 = l2[l4#15];

        if l5 == null goto label3;

        $r3 = l1[l4#15];

        interfaceinvoke l3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, l5);

     label3:
        l4#15 = l4#15 + 1;

        goto label2;

     label4:
        return l3;
    }

    public final java.lang.String getName()
    {
        java.lang.Thread l0;
        java.lang.String $r0;

        l0 := @this: java.lang.Thread;

        $r0 = l0.<java.lang.Thread: java.lang.String name>;

        return $r0;
    }

    public void <init>(java.lang.Runnable, java.lang.String)
    {
        java.lang.Thread l0;
        java.lang.Runnable l1;
        java.lang.String l2;
        java.lang.Object $r0;

        l0 := @this: java.lang.Thread;

        l1 := @parameter0: java.lang.Runnable;

        l2 := @parameter1: java.lang.String;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.lang.Thread: boolean daemon> = 0;

        l0.<java.lang.Thread: boolean stillborn> = 0;

        l0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals> = null;

        l0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals> = null;

        l0.<java.lang.Thread: int threadStatus> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        l0.<java.lang.Thread: java.lang.Object blockerLock> = $r0;

        specialinvoke l0.<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(null, l1, l2, 0L);

        return;
    }

    private void init(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long)
    {
        java.lang.Thread l0;
        java.lang.ThreadGroup l1;
        java.lang.Runnable l2;
        java.lang.String l3;
        long l4;

        l0 := @this: java.lang.Thread;

        l1 := @parameter0: java.lang.ThreadGroup;

        l2 := @parameter1: java.lang.Runnable;

        l3 := @parameter2: java.lang.String;

        l4 := @parameter3: long;

        specialinvoke l0.<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long,java.security.AccessControlContext)>(l1, l2, l3, l4, null);

        return;
    }

    private void init(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long, java.security.AccessControlContext)
    {
        java.lang.Thread l0, l7;
        java.lang.Runnable l2;
        java.lang.String l3;
        long l4, $l2;
        java.security.AccessControlContext l6, $r7;
        java.lang.SecurityManager l8;
        java.lang.ThreadGroup l1#1;
        java.lang.NullPointerException $r0;
        java.lang.Class $r1, $r3;
        boolean $z0, $z1, $z2;
        java.lang.RuntimePermission $r2;
        int $i0, $i1;
        java.lang.ClassLoader $r4, $r5;
        java.lang.ThreadLocal$ThreadLocalMap $r8, $r9, $r10;

        l0 := @this: java.lang.Thread;

        l1#1 := @parameter0: java.lang.ThreadGroup;

        l2 := @parameter1: java.lang.Runnable;

        l3 := @parameter2: java.lang.String;

        l4 := @parameter3: long;

        l6 := @parameter4: java.security.AccessControlContext;

        if l3 != null goto label01;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("name cannot be null");

        throw $r0;

     label01:
        l0.<java.lang.Thread: java.lang.String name> = l3;

        l7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        l8 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if l1#1 != null goto label03;

        if l8 == null goto label02;

        l1#1 = virtualinvoke l8.<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>();

     label02:
        if l1#1 != null goto label03;

        l1#1 = virtualinvoke l7.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

     label03:
        virtualinvoke l1#1.<java.lang.ThreadGroup: void checkAccess()>();

        if l8 == null goto label04;

        $r1 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = staticinvoke <java.lang.Thread: boolean isCCLOverridden(java.lang.Class)>($r1);

        if $z0 == 0 goto label04;

        $r2 = <java.lang.Thread: java.lang.RuntimePermission SUBCLASS_IMPLEMENTATION_PERMISSION>;

        virtualinvoke l8.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label04:
        virtualinvoke l1#1.<java.lang.ThreadGroup: void addUnstarted()>();

        l0.<java.lang.Thread: java.lang.ThreadGroup group> = l1#1;

        $z1 = virtualinvoke l7.<java.lang.Thread: boolean isDaemon()>();

        l0.<java.lang.Thread: boolean daemon> = $z1;

        $i0 = virtualinvoke l7.<java.lang.Thread: int getPriority()>();

        l0.<java.lang.Thread: int priority> = $i0;

        if l8 == null goto label05;

        $r3 = virtualinvoke l7.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = staticinvoke <java.lang.Thread: boolean isCCLOverridden(java.lang.Class)>($r3);

        if $z2 == 0 goto label06;

     label05:
        $r4 = virtualinvoke l7.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader> = $r4;

        goto label07;

     label06:
        $r5 = l7.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>;

        l0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader> = $r5;

     label07:
        if l6 == null goto label08;

        $r7 = l6;

        goto label09;

     label08:
        $r7 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();

     label09:
        l0.<java.lang.Thread: java.security.AccessControlContext inheritedAccessControlContext> = $r7;

        l0.<java.lang.Thread: java.lang.Runnable target> = l2;

        $i1 = l0.<java.lang.Thread: int priority>;

        virtualinvoke l0.<java.lang.Thread: void setPriority(int)>($i1);

        $r8 = l7.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals>;

        if $r8 == null goto label10;

        $r9 = l7.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals>;

        $r10 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal$ThreadLocalMap createInheritedMap(java.lang.ThreadLocal$ThreadLocalMap)>($r9);

        l0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals> = $r10;

     label10:
        l0.<java.lang.Thread: long stackSize> = l4;

        $l2 = staticinvoke <java.lang.Thread: long nextThreadID()>();

        l0.<java.lang.Thread: long tid> = $l2;

        return;
    }

    private static synchronized long nextThreadID()
    {
        long $l0, $l1;

        $l0 = <java.lang.Thread: long threadSeqNumber>;

        $l1 = $l0 + 1L;

        <java.lang.Thread: long threadSeqNumber> = $l1;

        return $l1;
    }

    private static boolean isCCLOverridden(java.lang.Class)
    {
        java.lang.Class l0;
        java.lang.ref.ReferenceQueue $r0, $r1;
        java.lang.Thread$WeakClassKey l1, $r3;
        java.util.concurrent.ConcurrentMap $r2, $r4, $r6;
        java.lang.Object $r5;
        java.lang.Boolean l2#13;
        boolean $z0, $z1;

        l0 := @parameter0: java.lang.Class;

        if l0 != class "java/lang/Thread" goto label1;

        return 0;

     label1:
        $r1 = <java.lang.Thread$Caches: java.lang.ref.ReferenceQueue subclassAuditsQueue>;

        $r2 = <java.lang.Thread$Caches: java.util.concurrent.ConcurrentMap subclassAudits>;

        staticinvoke <java.lang.Thread: void processQueue(java.lang.ref.ReferenceQueue,java.util.concurrent.ConcurrentMap)>($r1, $r2);

        $r3 = new java.lang.Thread$WeakClassKey;

        $r0 = <java.lang.Thread$Caches: java.lang.ref.ReferenceQueue subclassAuditsQueue>;

        specialinvoke $r3.<java.lang.Thread$WeakClassKey: void <init>(java.lang.Class,java.lang.ref.ReferenceQueue)>(l0, $r0);

        l1 = $r3;

        $r4 = <java.lang.Thread$Caches: java.util.concurrent.ConcurrentMap subclassAudits>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(l1);

        l2#13 = (java.lang.Boolean) $r5;

        if l2#13 != null goto label2;

        $z0 = staticinvoke <java.lang.Thread: boolean auditSubclass(java.lang.Class)>(l0);

        l2#13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r6 = <java.lang.Thread$Caches: java.util.concurrent.ConcurrentMap subclassAudits>;

        interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(l1, l2#13);

     label2:
        $z1 = virtualinvoke l2#13.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    private static boolean auditSubclass(java.lang.Class)
    {
        java.lang.Class l0;
        java.lang.Boolean l1;
        java.lang.Thread$1 $r0;
        java.lang.Object $r1;
        boolean $z0;

        l0 := @parameter0: java.lang.Class;

        $r0 = new java.lang.Thread$1;

        specialinvoke $r0.<java.lang.Thread$1: void <init>(java.lang.Class)>(l0);

        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        l1 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke l1.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    static void processQueue(java.lang.ref.ReferenceQueue, java.util.concurrent.ConcurrentMap)
    {
        java.lang.ref.ReferenceQueue l0;
        java.util.concurrent.ConcurrentMap l1;
        java.lang.ref.Reference l2, $r0;

        l0 := @parameter0: java.lang.ref.ReferenceQueue;

        l1 := @parameter1: java.util.concurrent.ConcurrentMap;

     label1:
        $r0 = virtualinvoke l0.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        l2 = $r0;

        if $r0 == null goto label2;

        interfaceinvoke l1.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(l2);

        goto label1;

     label2:
        return;
    }

    public final java.lang.ThreadGroup getThreadGroup()
    {
        java.lang.Thread l0;
        java.lang.ThreadGroup $r0;

        l0 := @this: java.lang.Thread;

        $r0 = l0.<java.lang.Thread: java.lang.ThreadGroup group>;

        return $r0;
    }

    public final boolean isDaemon()
    {
        java.lang.Thread l0;
        boolean $z0;

        l0 := @this: java.lang.Thread;

        $z0 = l0.<java.lang.Thread: boolean daemon>;

        return $z0;
    }

    public final int getPriority()
    {
        java.lang.Thread l0;
        int $i0;

        l0 := @this: java.lang.Thread;

        $i0 = l0.<java.lang.Thread: int priority>;

        return $i0;
    }

    public final void setPriority(int)
    {
        java.lang.Thread l0;
        java.lang.ThreadGroup l2, $r1;
        int l1#1, $i1;
        java.lang.IllegalArgumentException $r0;

        l0 := @this: java.lang.Thread;

        l1#1 := @parameter0: int;

        virtualinvoke l0.<java.lang.Thread: void checkAccess()>();

        if l1#1 > 10 goto label1;

        if l1#1 >= 1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label2:
        $r1 = virtualinvoke l0.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        l2 = $r1;

        if $r1 == null goto label4;

        $i1 = virtualinvoke l2.<java.lang.ThreadGroup: int getMaxPriority()>();

        if l1#1 <= $i1 goto label3;

        l1#1 = virtualinvoke l2.<java.lang.ThreadGroup: int getMaxPriority()>();

     label3:
        l0.<java.lang.Thread: int priority> = l1#1;

        specialinvoke l0.<java.lang.Thread: void setPriority0(int)>(l1#1);

     label4:
        return;
    }

    public final void checkAccess()
    {
        java.lang.Thread l0;
        java.lang.SecurityManager l1;

        l0 := @this: java.lang.Thread;

        l1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if l1 == null goto label1;

        virtualinvoke l1.<java.lang.SecurityManager: void checkAccess(java.lang.Thread)>(l0);

     label1:
        return;
    }

    public synchronized void start()
    {
        java.lang.Thread l0;
        java.lang.Throwable l2, l3, l4, $r3, $r4, $r6;
        int $i0;
        java.lang.IllegalThreadStateException $r0;
        java.lang.ThreadGroup $r1, $r2, $r5;
        boolean l1#9, l1#12;

        l0 := @this: java.lang.Thread;

        $i0 = l0.<java.lang.Thread: int threadStatus>;

        if $i0 == 0 goto label01;

        $r0 = new java.lang.IllegalThreadStateException;

        specialinvoke $r0.<java.lang.IllegalThreadStateException: void <init>()>();

        throw $r0;

     label01:
        $r1 = l0.<java.lang.Thread: java.lang.ThreadGroup group>;

        virtualinvoke $r1.<java.lang.ThreadGroup: void add(java.lang.Thread)>(l0);

        l1#9 = 0;

     label02:
        specialinvoke l0.<java.lang.Thread: void start0()>();

        l1#12 = 1;

     label03:
        if l1#12 != 0 goto label04;

        $r2 = l0.<java.lang.Thread: java.lang.ThreadGroup group>;

        virtualinvoke $r2.<java.lang.ThreadGroup: void threadStartFailed(java.lang.Thread)>(l0);

     label04:
        goto label11;

     label05:
        $r3 := @caughtexception;

        l2 = $r3;

        goto label11;

     label06:
        $r4 := @caughtexception;

        l3 = $r4;

     label07:
        if l1#9 != 0 goto label08;

        $r5 = l0.<java.lang.Thread: java.lang.ThreadGroup group>;

        virtualinvoke $r5.<java.lang.ThreadGroup: void threadStartFailed(java.lang.Thread)>(l0);

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

        l4 = $r6;

     label10:
        throw l3;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    public void run()
    {
        java.lang.Thread this;
        java.lang.Runnable target;

        this := @this: java.lang.Thread;

        target = this.<java.lang.Thread: java.lang.Runnable target0>;

        if target == null goto label1;

        interfaceinvoke target.<java.lang.Runnable: void run()>();

     label1:
        return;
    }

    public final void setDaemon(boolean)
    {
        java.lang.Thread l0;
        boolean l1, $z0;
        java.lang.IllegalThreadStateException $r0;

        l0 := @this: java.lang.Thread;

        l1 := @parameter0: boolean;

        virtualinvoke l0.<java.lang.Thread: void checkAccess()>();

        $z0 = virtualinvoke l0.<java.lang.Thread: boolean isAlive()>();

        if $z0 == 0 goto label1;

        $r0 = new java.lang.IllegalThreadStateException;

        specialinvoke $r0.<java.lang.IllegalThreadStateException: void <init>()>();

        throw $r0;

     label1:
        l0.<java.lang.Thread: boolean daemon> = l1;

        return;
    }

    public static boolean interrupted()
    {
        java.lang.Thread $r0;
        boolean $z0;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = specialinvoke $r0.<java.lang.Thread: boolean isInterrupted(boolean)>(1);

        return $z0;
    }

    public long getId()
    {
        java.lang.Thread l0;
        long $l0;

        l0 := @this: java.lang.Thread;

        $l0 = l0.<java.lang.Thread: long tid>;

        return $l0;
    }

    public void interrupt()
    {
        java.lang.Thread l0, $r0;
        java.lang.Object l1, $r1;
        sun.nio.ch.Interruptible l2;
        java.lang.Throwable l3, $r2;

        l0 := @this: java.lang.Thread;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if l0 == $r0 goto label1;

        virtualinvoke l0.<java.lang.Thread: void checkAccess()>();

     label1:
        $r1 = l0.<java.lang.Thread: java.lang.Object blockerLock>;

        l1 = $r1;

        entermonitor $r1;

     label2:
        l2 = l0.<java.lang.Thread: sun.nio.ch.Interruptible blocker>;

        if l2 == null goto label4;

        specialinvoke l0.<java.lang.Thread: void interrupt0()>();

        interfaceinvoke l2.<sun.nio.ch.Interruptible: void interrupt(java.lang.Thread)>(l0);

        exitmonitor l1;

     label3:
        return;

     label4:
        exitmonitor l1;

     label5:
        goto label9;

     label6:
        $r2 := @caughtexception;

     label7:
        l3 = $r2;

        exitmonitor l1;

     label8:
        throw l3;

     label9:
        specialinvoke l0.<java.lang.Thread: void interrupt0()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void <init>()
    {
        java.lang.Thread l0;
        java.lang.Object $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        int $i0;
        java.lang.String $r4;

        l0 := @this: java.lang.Thread;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.lang.Thread: boolean daemon> = 0;

        l0.<java.lang.Thread: boolean stillborn> = 0;

        l0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals> = null;

        l0.<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals> = null;

        l0.<java.lang.Thread: int threadStatus> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        l0.<java.lang.Thread: java.lang.Object blockerLock> = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread-");

        $i0 = staticinvoke <java.lang.Thread: int nextThreadNum()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke l0.<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(null, null, $r4, 0L);

        return;
    }

    private static synchronized int nextThreadNum()
    {
        int $i0, $i1;

        $i0 = <java.lang.Thread: int threadInitNumber>;

        $i1 = $i0 + 1;

        <java.lang.Thread: int threadInitNumber> = $i1;

        return $i0;
    }

    public final synchronized void join(long) throws java.lang.InterruptedException
    {
        java.lang.Thread l0;
        long l1, l3, l7, l5#3, $l3;
        byte $b0, $b1, $b2;
        java.lang.IllegalArgumentException $r0;
        boolean $z0, $z1;

        l0 := @this: java.lang.Thread;

        l1 := @parameter0: long;

        l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l5#3 = 0L;

        $b0 = l1 cmp 0L;

        if $b0 >= 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout value is negative");

        throw $r0;

     label1:
        $b1 = l1 cmp 0L;

        if $b1 != 0 goto label3;

     label2:
        $z0 = virtualinvoke l0.<java.lang.Thread: boolean isAlive()>();

        if $z0 == 0 goto label5;

        virtualinvoke l0.<java.lang.Object: void wait(long)>(0L);

        goto label2;

     label3:
        $z1 = virtualinvoke l0.<java.lang.Thread: boolean isAlive()>();

        if $z1 == 0 goto label5;

        l7 = l1 - l5#3;

        $b2 = l7 cmp 0L;

        if $b2 > 0 goto label4;

        goto label5;

     label4:
        virtualinvoke l0.<java.lang.Object: void wait(long)>(l7);

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l5#3 = $l3 - l3;

        goto label3;

     label5:
        return;
    }


