    public static void setTypeBtree(com.sleepycat.je.DatabaseConfig)
    {
        com.sleepycat.je.DatabaseConfig dbConfig;

        dbConfig := @parameter0: com.sleepycat.je.DatabaseConfig;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        com.sleepycat.je.TransactionConfig $r1, $r2, $r5;
        com.sleepycat.je.Durability $r3;

        $r0 = class "com/sleepycat/compat/DbCompat";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.compat.DbCompat: boolean $assertionsDisabled> = $z1;

        <com.sleepycat.compat.DbCompat: boolean TRANSACTION_RUNNER_PRINT_STACK_TRACES> = 1;

        $r1 = new com.sleepycat.je.TransactionConfig;

        specialinvoke $r1.<com.sleepycat.je.TransactionConfig: void <init>()>();

        <com.sleepycat.compat.DbCompat: com.sleepycat.je.TransactionConfig READ_ONLY_TXN_CONFIG> = $r1;

        $r2 = <com.sleepycat.compat.DbCompat: com.sleepycat.je.TransactionConfig READ_ONLY_TXN_CONFIG>;

        $r3 = <com.sleepycat.je.Durability: com.sleepycat.je.Durability READ_ONLY_TXN>;

        virtualinvoke $r2.<com.sleepycat.je.TransactionConfig: com.sleepycat.je.TransactionConfig setDurability(com.sleepycat.je.Durability)>($r3);

        $r5 = <com.sleepycat.compat.DbCompat: com.sleepycat.je.TransactionConfig READ_ONLY_TXN_CONFIG>;

        virtualinvoke $r5.<com.sleepycat.je.TransactionConfig: com.sleepycat.je.TransactionConfig setReadCommitted(boolean)>(1);

        return;
    }

    public static com.sleepycat.je.Database openDatabase(com.sleepycat.je.Environment, com.sleepycat.je.Transaction, java.lang.String, java.lang.String, com.sleepycat.je.DatabaseConfig)
    {
        com.sleepycat.je.Environment env;
        com.sleepycat.je.Transaction txn;
        java.lang.String fileName, dbName;
        com.sleepycat.je.DatabaseConfig config;
        boolean $z0;
        java.lang.AssertionError $r0;
        com.sleepycat.je.Database $r1;
        com.sleepycat.je.DatabaseNotFoundException $r2, e#9;
        com.sleepycat.je.DatabaseExistsException $r3, e#12;

        env := @parameter0: com.sleepycat.je.Environment;

        txn := @parameter1: com.sleepycat.je.Transaction;

        fileName := @parameter2: java.lang.String;

        dbName := @parameter3: java.lang.String;

        config := @parameter4: com.sleepycat.je.DatabaseConfig;

        $z0 = <com.sleepycat.compat.DbCompat: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if fileName == null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = virtualinvoke env.<com.sleepycat.je.Environment: com.sleepycat.je.Database openDatabase(com.sleepycat.je.Transaction,java.lang.String,com.sleepycat.je.DatabaseConfig)>(txn, dbName, config);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

     label4:
        $r3 := @caughtexception;

        return null;

        catch com.sleepycat.je.DatabaseNotFoundException from label1 to label2 with label3;
        catch com.sleepycat.je.DatabaseExistsException from label1 to label2 with label4;
    }

    public static com.sleepycat.je.Transaction getThreadTransaction(com.sleepycat.je.Environment) throws com.sleepycat.je.DatabaseException
    {
        com.sleepycat.je.Environment env;
        com.sleepycat.je.Transaction $r0;

        env := @parameter0: com.sleepycat.je.Environment;

        $r0 = virtualinvoke env.<com.sleepycat.je.Environment: com.sleepycat.je.Transaction getThreadTransaction()>();

        return $r0;
    }

    public static java.lang.RuntimeException unexpectedState(java.lang.String)
    {
        java.lang.String msg;
        com.sleepycat.je.EnvironmentFailureException $r0;

        msg := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState(java.lang.String)>(msg);

        return $r0;
    }

    public static java.lang.ClassLoader getClassLoader(com.sleepycat.je.Environment)
    {
        com.sleepycat.je.Environment env;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        java.lang.ClassLoader $r1;

        env := @parameter0: com.sleepycat.je.Environment;

        $r0 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.dbi.EnvironmentImpl getNonNullEnvImpl(com.sleepycat.je.Environment)>(env);

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: java.lang.ClassLoader getClassLoader()>();

        return $r1;
    }

    public static java.lang.RuntimeException unexpectedException(java.lang.Exception)
    {
        java.lang.Exception cause;
        com.sleepycat.je.EnvironmentFailureException $r0;

        cause := @parameter0: java.lang.Exception;

        $r0 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.Exception)>(cause);

        return $r0;
    }

    public static boolean setImportunate(com.sleepycat.je.Transaction, boolean)
    {
        com.sleepycat.je.Transaction txn;
        boolean importunate, oldVal;
        com.sleepycat.je.txn.Txn $r0, $r1;

        txn := @parameter0: com.sleepycat.je.Transaction;

        importunate := @parameter1: boolean;

        $r0 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.txn.Txn getTxn(com.sleepycat.je.Transaction)>(txn);

        oldVal = virtualinvoke $r0.<com.sleepycat.je.txn.Txn: boolean getImportunate()>();

        $r1 = staticinvoke <com.sleepycat.je.DbInternal: com.sleepycat.je.txn.Txn getTxn(com.sleepycat.je.Transaction)>(txn);

        virtualinvoke $r1.<com.sleepycat.je.txn.Txn: void setImportunate(boolean)>(importunate);

        return oldVal;
    }

    public static boolean renameDatabase(com.sleepycat.je.Environment, com.sleepycat.je.Transaction, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.sleepycat.je.Environment env;
        com.sleepycat.je.Transaction txn;
        java.lang.String oldFileName, oldDbName, newFileName, newDbName;
        com.sleepycat.je.DatabaseNotFoundException e, $r2;
        boolean $z0, $z1;
        java.lang.AssertionError $r0, $r1;

        env := @parameter0: com.sleepycat.je.Environment;

        txn := @parameter1: com.sleepycat.je.Transaction;

        oldFileName := @parameter2: java.lang.String;

        oldDbName := @parameter3: java.lang.String;

        newFileName := @parameter4: java.lang.String;

        newDbName := @parameter5: java.lang.String;

        $z0 = <com.sleepycat.compat.DbCompat: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if oldFileName == null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $z1 = <com.sleepycat.compat.DbCompat: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if newFileName == null goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        virtualinvoke env.<com.sleepycat.je.Environment: void renameDatabase(com.sleepycat.je.Transaction,java.lang.String,java.lang.String)>(txn, oldDbName, newDbName);

     label3:
        return 1;

     label4:
        $r2 := @caughtexception;

        return 0;

        catch com.sleepycat.je.DatabaseNotFoundException from label2 to label3 with label4;
    }

    public static boolean removeDatabase(com.sleepycat.je.Environment, com.sleepycat.je.Transaction, java.lang.String, java.lang.String)
    {
        com.sleepycat.je.Environment env;
        com.sleepycat.je.Transaction txn;
        java.lang.String fileName, dbName;
        com.sleepycat.je.DatabaseNotFoundException e, $r1;
        boolean $z0;
        java.lang.AssertionError $r0;

        env := @parameter0: com.sleepycat.je.Environment;

        txn := @parameter1: com.sleepycat.je.Transaction;

        fileName := @parameter2: java.lang.String;

        dbName := @parameter3: java.lang.String;

        $z0 = <com.sleepycat.compat.DbCompat: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if fileName == null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        virtualinvoke env.<com.sleepycat.je.Environment: void removeDatabase(com.sleepycat.je.Transaction,java.lang.String)>(txn, dbName);

     label2:
        return 1;

     label3:
        $r1 := @caughtexception;

        return 0;

        catch com.sleepycat.je.DatabaseNotFoundException from label1 to label2 with label3;
    }

    public static boolean getDeferredWrite(com.sleepycat.je.DatabaseConfig)
    {
        com.sleepycat.je.DatabaseConfig dbConfig;
        boolean $z0;

        dbConfig := @parameter0: com.sleepycat.je.DatabaseConfig;

        $z0 = virtualinvoke dbConfig.<com.sleepycat.je.DatabaseConfig: boolean getDeferredWrite()>();

        return $z0;
    }

    public static boolean getInitializeCDB(com.sleepycat.je.EnvironmentConfig)
    {
        com.sleepycat.je.EnvironmentConfig config;

        config := @parameter0: com.sleepycat.je.EnvironmentConfig;

        return 0;
    }

    public static boolean getInitializeLocking(com.sleepycat.je.EnvironmentConfig)
    {
        com.sleepycat.je.EnvironmentConfig config;
        boolean $z0;

        config := @parameter0: com.sleepycat.je.EnvironmentConfig;

        $z0 = virtualinvoke config.<com.sleepycat.je.EnvironmentConfig: boolean getLocking()>();

        return $z0;
    }

    public static com.sleepycat.je.SecondaryDatabase openSecondaryDatabase(com.sleepycat.je.Environment, com.sleepycat.je.Transaction, java.lang.String, java.lang.String, com.sleepycat.je.Database, com.sleepycat.je.SecondaryConfig)
    {
        com.sleepycat.je.Environment env;
        com.sleepycat.je.Transaction txn;
        java.lang.String fileName, dbName;
        com.sleepycat.je.Database primaryDatabase;
        com.sleepycat.je.SecondaryConfig config;
        boolean $z0;
        java.lang.AssertionError $r0;
        com.sleepycat.je.SecondaryDatabase $r1;
        com.sleepycat.je.DatabaseNotFoundException $r2, e#9;
        com.sleepycat.je.DatabaseExistsException $r3, e#12;

        env := @parameter0: com.sleepycat.je.Environment;

        txn := @parameter1: com.sleepycat.je.Transaction;

        fileName := @parameter2: java.lang.String;

        dbName := @parameter3: java.lang.String;

        primaryDatabase := @parameter4: com.sleepycat.je.Database;

        config := @parameter5: com.sleepycat.je.SecondaryConfig;

        $z0 = <com.sleepycat.compat.DbCompat: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if fileName == null goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        $r1 = virtualinvoke env.<com.sleepycat.je.Environment: com.sleepycat.je.SecondaryDatabase openSecondaryDatabase(com.sleepycat.je.Transaction,java.lang.String,com.sleepycat.je.Database,com.sleepycat.je.SecondaryConfig)>(txn, dbName, primaryDatabase, config);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

     label4:
        $r3 := @caughtexception;

        return null;

        catch com.sleepycat.je.DatabaseNotFoundException from label1 to label2 with label3;
        catch com.sleepycat.je.DatabaseExistsException from label1 to label2 with label4;
    }

    public static java.lang.RuntimeException unexpectedException(java.lang.String, java.lang.Exception)
    {
        java.lang.String msg;
        java.lang.Exception cause;
        com.sleepycat.je.EnvironmentFailureException $r0;

        msg := @parameter0: java.lang.String;

        cause := @parameter1: java.lang.Exception;

        $r0 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedException(java.lang.String,java.lang.Exception)>(msg, cause);

        return $r0;
    }

    public static java.lang.RuntimeException unexpectedState()
    {
        com.sleepycat.je.EnvironmentFailureException $r0;

        $r0 = staticinvoke <com.sleepycat.je.EnvironmentFailureException: com.sleepycat.je.EnvironmentFailureException unexpectedState()>();

        return $r0;
    }

    public static int getRecordNumber(com.sleepycat.je.DatabaseEntry)
    {
        com.sleepycat.je.DatabaseEntry entry;
        java.lang.UnsupportedOperationException $r0;

        entry := @parameter0: com.sleepycat.je.DatabaseEntry;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }


