    static void <clinit>()
    {
        java.lang.ref.Reference$Lock $r0;
        java.lang.Thread $r1;
        java.lang.ThreadGroup l0#7, l1#9;
        java.lang.ref.Reference$ReferenceHandler $r2, l1#17;
        java.lang.ref.Reference$1 $r3;

        $r0 = new java.lang.ref.Reference$Lock;

        specialinvoke $r0.<java.lang.ref.Reference$Lock: void <init>(java.lang.ref.Reference$1)>(null);

        <java.lang.ref.Reference: java.lang.ref.Reference$Lock lock> = $r0;

        <java.lang.ref.Reference: java.lang.ref.Reference pending> = null;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        l0#7 = virtualinvoke $r1.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        l1#9 = l0#7;

     label1:
        if l1#9 == null goto label2;

        l0#7 = l1#9;

        l1#9 = virtualinvoke l0#7.<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>();

        goto label1;

     label2:
        $r2 = new java.lang.ref.Reference$ReferenceHandler;

        specialinvoke $r2.<java.lang.ref.Reference$ReferenceHandler: void <init>(java.lang.ThreadGroup,java.lang.String)>(l0#7, "Reference Handler");

        l1#17 = $r2;

        virtualinvoke l1#17.<java.lang.Thread: void setPriority(int)>(10);

        virtualinvoke l1#17.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke l1#17.<java.lang.Thread: void start()>();

        $r3 = new java.lang.ref.Reference$1;

        specialinvoke $r3.<java.lang.ref.Reference$1: void <init>()>();

        staticinvoke <sun.misc.SharedSecrets: void setJavaLangRefAccess(sun.misc.JavaLangRefAccess)>($r3);

        return;
    }

    static boolean tryHandlePending(boolean)
    {
        boolean l0, $z0;
        java.lang.ref.Reference l1, $r1, $r3;
        sun.misc.Cleaner l2, $r2;
        java.lang.Throwable l4, $r5;
        java.lang.ref.Reference$Lock $r0, l3#3, $r4;
        java.lang.OutOfMemoryError $r6, l3#23;
        java.lang.InterruptedException $r7, l3#26;
        java.lang.ref.ReferenceQueue l3#33, $r8;

        l0 := @parameter0: boolean;

     label01:
        $r0 = <java.lang.ref.Reference: java.lang.ref.Reference$Lock lock>;

        l3#3 = $r0;

        entermonitor $r0;

     label02:
        $r1 = <java.lang.ref.Reference: java.lang.ref.Reference pending>;

        if $r1 == null goto label05;

        l1 = <java.lang.ref.Reference: java.lang.ref.Reference pending>;

        $z0 = l1 instanceof sun.misc.Cleaner;

        if $z0 == 0 goto label03;

        $r2 = (sun.misc.Cleaner) l1;

        goto label04;

     label03:
        $r2 = null;

     label04:
        l2 = $r2;

        $r3 = l1.<java.lang.ref.Reference: java.lang.ref.Reference discovered>;

        <java.lang.ref.Reference: java.lang.ref.Reference pending> = $r3;

        l1.<java.lang.ref.Reference: java.lang.ref.Reference discovered> = null;

        goto label08;

     label05:
        if l0 == 0 goto label06;

        $r4 = <java.lang.ref.Reference: java.lang.ref.Reference$Lock lock>;

        virtualinvoke $r4.<java.lang.Object: void wait()>();

     label06:
        exitmonitor l3#3;

     label07:
        return l0;

     label08:
        exitmonitor l3#3;

     label09:
        goto label13;

     label10:
        $r5 := @caughtexception;

     label11:
        l4 = $r5;

        exitmonitor l3#3;

     label12:
        throw l4;

     label13:
        goto label16;

     label14:
        $r6 := @caughtexception;

        l3#23 = $r6;

        staticinvoke <java.lang.Thread: void yield()>();

        return 1;

     label15:
        $r7 := @caughtexception;

        l3#26 = $r7;

        return 1;

     label16:
        if l2 == null goto label17;

        virtualinvoke l2.<sun.misc.Cleaner: void clean()>();

        return 1;

     label17:
        l3#33 = l1.<java.lang.ref.Reference: java.lang.ref.ReferenceQueue queue>;

        $r8 = <java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue NULL>;

        if l3#33 == $r8 goto label18;

        virtualinvoke l3#33.<java.lang.ref.ReferenceQueue: boolean enqueue(java.lang.ref.Reference)>(l1);

     label18:
        return 1;

        catch java.lang.Throwable from label02 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.OutOfMemoryError from label01 to label07 with label14;
        catch java.lang.OutOfMemoryError from label08 to label13 with label14;
        catch java.lang.InterruptedException from label01 to label07 with label15;
        catch java.lang.InterruptedException from label08 to label13 with label15;
    }

    void <init>(java.lang.Object, java.lang.ref.ReferenceQueue)
    {
        java.lang.ref.Reference l0;
        java.lang.Object l1;
        java.lang.ref.ReferenceQueue l2, $r1;

        l0 := @this: java.lang.ref.Reference;

        l1 := @parameter0: java.lang.Object;

        l2 := @parameter1: java.lang.ref.ReferenceQueue;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.lang.ref.Reference: java.lang.Object referent> = l1;

        if l2 != null goto label1;

        $r1 = <java.lang.ref.ReferenceQueue: java.lang.ref.ReferenceQueue NULL>;

        goto label2;

     label1:
        $r1 = l2;

     label2:
        l0.<java.lang.ref.Reference: java.lang.ref.ReferenceQueue queue> = $r1;

        return;
    }

    public java.lang.Object get()
    {
        java.lang.ref.Reference l0;
        java.lang.Object $r0;

        l0 := @this: java.lang.ref.Reference;

        $r0 = l0.<java.lang.ref.Reference: java.lang.Object referent>;

        return $r0;
    }

    void <init>(java.lang.Object)
    {
        java.lang.ref.Reference l0;
        java.lang.Object l1;

        l0 := @this: java.lang.ref.Reference;

        l1 := @parameter0: java.lang.Object;

        specialinvoke l0.<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>(l1, null);

        return;
    }


