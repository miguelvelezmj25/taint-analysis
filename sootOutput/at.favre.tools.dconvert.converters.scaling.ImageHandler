    static void <clinit>()
    {
        java.awt.image.Kernel $r0;
        java.awt.Color $r1;
        java.awt.image.ConvolveOp $r2;
        float[] $r3;
        java.util.HashMap $r4;

        $r1 = <java.awt.Color: java.awt.Color white>;

        <at.favre.tools.dconvert.converters.scaling.ImageHandler: java.awt.Color DEFAULT_COLOR> = $r1;

        $r2 = new java.awt.image.ConvolveOp;

        $r0 = new java.awt.image.Kernel;

        $r3 = newarray (float)[9];

        $r3[0] = 0.0F;

        $r3[1] = 0.08F;

        $r3[2] = 0.0F;

        $r3[3] = 0.08F;

        $r3[4] = 0.68F;

        $r3[5] = 0.08F;

        $r3[6] = 0.0F;

        $r3[7] = 0.08F;

        $r3[8] = 0.0F;

        specialinvoke $r0.<java.awt.image.Kernel: void <init>(int,int,float[])>(3, 3, $r3);

        specialinvoke $r2.<java.awt.image.ConvolveOp: void <init>(java.awt.image.Kernel,int,java.awt.RenderingHints)>($r0, 1, null);

        <at.favre.tools.dconvert.converters.scaling.ImageHandler: java.awt.image.ConvolveOp OP_ANTIALIAS> = $r2;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <at.favre.tools.dconvert.converters.scaling.ImageHandler: java.util.Map traceMap> = $r4;

        return;
    }

    public void <init>(at.favre.tools.dconvert.arg.Arguments)
    {
        at.favre.tools.dconvert.converters.scaling.ImageHandler this;
        at.favre.tools.dconvert.arg.Arguments args;

        this := @this: at.favre.tools.dconvert.converters.scaling.ImageHandler;

        args := @parameter0: at.favre.tools.dconvert.arg.Arguments;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: at.favre.tools.dconvert.arg.Arguments args> = args;

        return;
    }

    public java.util.List saveToFile(java.io.File, at.favre.tools.dconvert.util.LoadedImage, java.awt.Dimension, boolean) throws java.lang.Exception
    {
        at.favre.tools.dconvert.converters.scaling.ImageHandler this;
        java.io.File targetFile, imageFile, $r3, $r8, fileToSave#112, $r41, $r42;
        at.favre.tools.dconvert.util.LoadedImage imageData;
        java.awt.Dimension targetDimension;
        boolean isNinePatch, $z0, $z1, $z2, $z3, $z4;
        java.util.ArrayList files, $r0;
        java.util.List compressionList, algorithms;
        java.util.Iterator l7, l11;
        at.favre.tools.dconvert.arg.ImageType$ECompression compression, $r29, $r53;
        at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm scaleAlgorithm, $r32;
        long startNanos, $l2, $l3, $l4, $l5;
        at.favre.tools.dconvert.arg.Arguments $r1, $r5, $r16, $r20, $r22, $r54;
        at.favre.tools.dconvert.arg.EOutputCompressionMode $r2, $r6;
        at.favre.tools.dconvert.arg.ImageType $r4;
        java.lang.Object $r7, $r24, $r37;
        java.lang.StringBuilder $r9, $r11, $r12, $r14, $r43, $r45, $r46, $r48, $r49, $r51;
        java.lang.String $r10, $r13, $r15, $r44, $r47, $r50, $r52, $r55, $r56;
        at.favre.tools.dconvert.arg.EScalingAlgorithm$Type $r17, $r19;
        at.favre.tools.dconvert.arg.EScalingAlgorithm $r18, $r21, $r23;
        java.util.Map $r25, $r26, $r35, $r36;
        java.lang.Long $r27, $r38, $r39;
        at.favre.tools.dconvert.util.NinePatchScaler $r30;
        java.awt.image.BufferedImage $r31, scaledImage#85, $r33;
        int $i0, $i1, $i6;
        java.awt.Color $r34;
        float $f0;

        this := @this: at.favre.tools.dconvert.converters.scaling.ImageHandler;

        targetFile := @parameter0: java.io.File;

        imageData := @parameter1: at.favre.tools.dconvert.util.LoadedImage;

        targetDimension := @parameter2: java.awt.Dimension;

        isNinePatch := @parameter3: boolean;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(2);

        files = $r0;

        $r1 = this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: at.favre.tools.dconvert.arg.Arguments args>;

        $r2 = $r1.<at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.EOutputCompressionMode outputCompressionMode>;

        $r3 = virtualinvoke imageData.<at.favre.tools.dconvert.util.LoadedImage: java.io.File getSourceFile()>();

        $r4 = staticinvoke <at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.ImageType getImageType(java.io.File)>($r3);

        compressionList = staticinvoke <at.favre.tools.dconvert.arg.Arguments: java.util.List getOutCompressionForType(at.favre.tools.dconvert.arg.EOutputCompressionMode,at.favre.tools.dconvert.arg.ImageType)>($r2, $r4);

        $r5 = this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: at.favre.tools.dconvert.arg.Arguments args>;

        $r6 = $r5.<at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.EOutputCompressionMode outputCompressionMode>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r6);

        if $r6 == null goto label12;

        l7 = interfaceinvoke compressionList.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke l7.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label12;

        $r7 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>();

        compression = (at.favre.tools.dconvert.arg.ImageType$ECompression) $r7;

        $r8 = new java.io.File;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke targetFile.<java.io.File: java.lang.String getAbsolutePath()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = compression.<at.favre.tools.dconvert.arg.ImageType$ECompression: java.lang.String extension>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r15);

        imageFile = $r8;

        $z1 = virtualinvoke imageFile.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label02;

        $r16 = this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: at.favre.tools.dconvert.arg.Arguments args>;

        $z2 = $r16.<at.favre.tools.dconvert.arg.Arguments: boolean skipExistingFiles>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label02;

        goto label12;

     label02:
        $r17 = specialinvoke this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type getScalingType(at.favre.tools.dconvert.util.LoadedImage,java.awt.Dimension)>(imageData, targetDimension);

        $r18 = specialinvoke this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: at.favre.tools.dconvert.arg.EScalingAlgorithm getScalingAlgorithm(at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)>($r17);

        $r19 = specialinvoke this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type getScalingType(at.favre.tools.dconvert.util.LoadedImage,java.awt.Dimension)>(imageData, targetDimension);

        algorithms = specialinvoke this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: java.util.List getScaleAlgorithm(at.favre.tools.dconvert.arg.EScalingAlgorithm,at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)>($r18, $r19);

        $r20 = this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: at.favre.tools.dconvert.arg.Arguments args>;

        $r21 = $r20.<at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.EScalingAlgorithm upScalingAlgorithm>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r21);

        if $r21 != null goto label03;

        $r22 = this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: at.favre.tools.dconvert.arg.Arguments args>;

        $r23 = $r22.<at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.EScalingAlgorithm downScalingAlgorithm>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r23);

        if $r23 == null goto label11;

     label03:
        l11 = interfaceinvoke algorithms.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke l11.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label11;

        $r24 = interfaceinvoke l11.<java.util.Iterator: java.lang.Object next()>();

        scaleAlgorithm = (at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm) $r24;

        $r25 = <at.favre.tools.dconvert.converters.scaling.ImageHandler: java.util.Map traceMap>;

        $z4 = interfaceinvoke $r25.<java.util.Map: boolean containsKey(java.lang.Object)>(scaleAlgorithm);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 != 0 goto label05;

        $r26 = <at.favre.tools.dconvert.converters.scaling.ImageHandler: java.util.Map traceMap>;

        $r27 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(scaleAlgorithm, $r27);

     label05:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(isNinePatch);

        if isNinePatch == 0 goto label06;

        $r29 = <at.favre.tools.dconvert.arg.ImageType$ECompression: at.favre.tools.dconvert.arg.ImageType$ECompression PNG>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(compression);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r29);

        if compression != $r29 goto label06;

        $r30 = new at.favre.tools.dconvert.util.NinePatchScaler;

        specialinvoke $r30.<at.favre.tools.dconvert.util.NinePatchScaler: void <init>()>();

        $r31 = virtualinvoke imageData.<at.favre.tools.dconvert.util.LoadedImage: java.awt.image.BufferedImage getImage()>();

        $r32 = specialinvoke this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm getAsScalingAlgorithm(at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,at.favre.tools.dconvert.arg.ImageType$ECompression)>(scaleAlgorithm, compression);

        scaledImage#85 = virtualinvoke $r30.<at.favre.tools.dconvert.util.NinePatchScaler: java.awt.image.BufferedImage scale(java.awt.image.BufferedImage,java.awt.Dimension,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm)>($r31, targetDimension, $r32);

        goto label07;

     label06:
        startNanos = staticinvoke <java.lang.System: long nanoTime()>();

        $r33 = virtualinvoke imageData.<at.favre.tools.dconvert.util.LoadedImage: java.awt.image.BufferedImage getImage()>();

        $i0 = targetDimension.<java.awt.Dimension: int width>;

        $i1 = targetDimension.<java.awt.Dimension: int height>;

        $r34 = <at.favre.tools.dconvert.converters.scaling.ImageHandler: java.awt.Color DEFAULT_COLOR>;

        scaledImage#85 = virtualinvoke this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: java.awt.image.BufferedImage scale(at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,java.awt.image.BufferedImage,int,int,at.favre.tools.dconvert.arg.ImageType$ECompression,java.awt.Color)>(scaleAlgorithm, $r33, $i0, $i1, compression, $r34);

        $r35 = <at.favre.tools.dconvert.converters.scaling.ImageHandler: java.util.Map traceMap>;

        $r36 = <at.favre.tools.dconvert.converters.scaling.ImageHandler: java.util.Map traceMap>;

        $r37 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>(scaleAlgorithm);

        $r38 = (java.lang.Long) $r37;

        $l2 = virtualinvoke $r38.<java.lang.Long: long longValue()>();

        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        $l4 = $l3 - startNanos;

        $l5 = $l2 + $l4;

        $r39 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(scaleAlgorithm, $r39);

     label07:
        fileToSave#112 = imageFile;

        $i6 = interfaceinvoke algorithms.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 <= 1 goto label08;

        $r41 = new java.io.File;

        $r42 = virtualinvoke imageFile.<java.io.File: java.io.File getParentFile()>();

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = staticinvoke <at.favre.tools.dconvert.util.MiscUtil: java.lang.String getFileNameWithoutExtension(java.io.File)>(imageFile);

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r47 = virtualinvoke scaleAlgorithm.<java.lang.Object: java.lang.String toString()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r50 = staticinvoke <at.favre.tools.dconvert.util.MiscUtil: java.lang.String getFileExtension(java.io.File)>(imageFile);

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.io.File: void <init>(java.io.File,java.lang.String)>($r42, $r52);

        fileToSave#112 = $r41;

     label08:
        $r53 = <at.favre.tools.dconvert.arg.ImageType$ECompression: at.favre.tools.dconvert.arg.ImageType$ECompression JPG>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(compression);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r53);

        if compression != $r53 goto label09;

        $r54 = this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: at.favre.tools.dconvert.arg.Arguments args>;

        $f0 = $r54.<at.favre.tools.dconvert.arg.Arguments: float compressionQuality>;

        specialinvoke this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: void compressJpeg(java.awt.image.BufferedImage,com.twelvemonkeys.imageio.metadata.CompoundDirectory,float,java.io.File)>(scaledImage#85, null, $f0, fileToSave#112);

        goto label10;

     label09:
        $r55 = virtualinvoke compression.<at.favre.tools.dconvert.arg.ImageType$ECompression: java.lang.String name()>();

        $r56 = virtualinvoke $r55.<java.lang.String: java.lang.String toLowerCase()>();

        staticinvoke <javax.imageio.ImageIO: boolean write(java.awt.image.RenderedImage,java.lang.String,java.io.File)>(scaledImage#85, $r56, fileToSave#112);

     label10:
        virtualinvoke scaledImage#85.<java.awt.image.BufferedImage: void flush()>();

        interfaceinvoke files.<java.util.List: boolean add(java.lang.Object)>(imageFile);

        goto label04;

     label11:
        goto label01;

     label12:
        return files;
    }

    private at.favre.tools.dconvert.arg.EScalingAlgorithm$Type getScalingType(at.favre.tools.dconvert.util.LoadedImage, java.awt.Dimension)
    {
        at.favre.tools.dconvert.converters.scaling.ImageHandler this;
        at.favre.tools.dconvert.util.LoadedImage imageData;
        java.awt.Dimension targetDimension;
        long targetSize, sourceSize;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.awt.image.BufferedImage $r0, $r1;
        byte $b6;
        at.favre.tools.dconvert.arg.EScalingAlgorithm$Type $r2;

        this := @this: at.favre.tools.dconvert.converters.scaling.ImageHandler;

        imageData := @parameter0: at.favre.tools.dconvert.util.LoadedImage;

        targetDimension := @parameter1: java.awt.Dimension;

        $i0 = targetDimension.<java.awt.Dimension: int height>;

        $i1 = targetDimension.<java.awt.Dimension: int width>;

        $i2 = $i0 * $i1;

        targetSize = (long) $i2;

        $r0 = virtualinvoke imageData.<at.favre.tools.dconvert.util.LoadedImage: java.awt.image.BufferedImage getImage()>();

        $i3 = virtualinvoke $r0.<java.awt.image.BufferedImage: int getHeight()>();

        $r1 = virtualinvoke imageData.<at.favre.tools.dconvert.util.LoadedImage: java.awt.image.BufferedImage getImage()>();

        $i4 = virtualinvoke $r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i5 = $i3 * $i4;

        sourceSize = (long) $i5;

        $b6 = targetSize cmp sourceSize;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b6);

        if $b6 < 0 goto label1;

        $r2 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type UPSCALING>;

        goto label2;

     label1:
        $r2 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type DOWNSCALING>;

     label2:
        return $r2;
    }

    private at.favre.tools.dconvert.arg.EScalingAlgorithm getScalingAlgorithm(at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)
    {
        at.favre.tools.dconvert.converters.scaling.ImageHandler this;
        at.favre.tools.dconvert.arg.EScalingAlgorithm$Type type, $r0;
        at.favre.tools.dconvert.arg.Arguments $r1, $r3;
        at.favre.tools.dconvert.arg.EScalingAlgorithm $r2;

        this := @this: at.favre.tools.dconvert.converters.scaling.ImageHandler;

        type := @parameter0: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type;

        $r0 = <at.favre.tools.dconvert.arg.EScalingAlgorithm$Type: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type UPSCALING>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(type);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if type != $r0 goto label1;

        $r1 = this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: at.favre.tools.dconvert.arg.Arguments args>;

        $r2 = $r1.<at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.EScalingAlgorithm upScalingAlgorithm>;

        goto label2;

     label1:
        $r3 = this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: at.favre.tools.dconvert.arg.Arguments args>;

        $r2 = $r3.<at.favre.tools.dconvert.arg.Arguments: at.favre.tools.dconvert.arg.EScalingAlgorithm downScalingAlgorithm>;

     label2:
        return $r2;
    }

    private java.util.List getScaleAlgorithm(at.favre.tools.dconvert.arg.EScalingAlgorithm, at.favre.tools.dconvert.arg.EScalingAlgorithm$Type)
    {
        at.favre.tools.dconvert.converters.scaling.ImageHandler this;
        at.favre.tools.dconvert.arg.EScalingAlgorithm algorithm;
        at.favre.tools.dconvert.arg.EScalingAlgorithm$Type type;
        at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm $r0;
        java.util.List $r1;

        this := @this: at.favre.tools.dconvert.converters.scaling.ImageHandler;

        algorithm := @parameter0: at.favre.tools.dconvert.arg.EScalingAlgorithm;

        type := @parameter1: at.favre.tools.dconvert.arg.EScalingAlgorithm$Type;

        $r0 = virtualinvoke algorithm.<at.favre.tools.dconvert.arg.EScalingAlgorithm: at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm getImplementation()>();

        $r1 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r0);

        return $r1;
    }

    private at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm getAsScalingAlgorithm(at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm, at.favre.tools.dconvert.arg.ImageType$ECompression)
    {
        at.favre.tools.dconvert.converters.scaling.ImageHandler this;
        at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm algorithm;
        at.favre.tools.dconvert.arg.ImageType$ECompression compression;
        at.favre.tools.dconvert.converters.scaling.MyScalingAlgorithm $r0;
        java.awt.Color $r1;

        this := @this: at.favre.tools.dconvert.converters.scaling.ImageHandler;

        algorithm := @parameter0: at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm;

        compression := @parameter1: at.favre.tools.dconvert.arg.ImageType$ECompression;

        $r0 = new at.favre.tools.dconvert.converters.scaling.MyScalingAlgorithm;

        $r1 = <at.favre.tools.dconvert.converters.scaling.ImageHandler: java.awt.Color DEFAULT_COLOR>;

        specialinvoke $r0.<at.favre.tools.dconvert.converters.scaling.MyScalingAlgorithm: void <init>(at.favre.tools.dconvert.converters.scaling.ImageHandler,at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm,at.favre.tools.dconvert.arg.ImageType$ECompression,java.awt.Color)>(this, algorithm, compression, $r1);

        return $r0;
    }

    public java.awt.image.BufferedImage scale(at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm, java.awt.image.BufferedImage, int, int, at.favre.tools.dconvert.arg.ImageType$ECompression, java.awt.Color)
    {
        at.favre.tools.dconvert.converters.scaling.ImageHandler this;
        at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm scaleAlgorithm;
        java.awt.image.BufferedImage imageToScale, convertedImg, scaledImage#8, $r0;
        int dWidth, dHeight, $i0, $i1, $i2, $i3;
        at.favre.tools.dconvert.arg.ImageType$ECompression compression;
        java.awt.Color background;
        boolean $z0, $z2;
        java.awt.Graphics $r1;
        at.favre.tools.dconvert.arg.Arguments $r2;
        java.awt.image.ConvolveOp $r3;

        this := @this: at.favre.tools.dconvert.converters.scaling.ImageHandler;

        scaleAlgorithm := @parameter0: at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm;

        imageToScale := @parameter1: java.awt.image.BufferedImage;

        dWidth := @parameter2: int;

        dHeight := @parameter3: int;

        compression := @parameter4: at.favre.tools.dconvert.arg.ImageType$ECompression;

        background := @parameter5: java.awt.Color;

        $i0 = virtualinvoke imageToScale.<java.awt.image.BufferedImage: int getWidth()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dWidth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if dWidth != $i0 goto label1;

        $i1 = virtualinvoke imageToScale.<java.awt.image.BufferedImage: int getHeight()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dHeight);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if dHeight != $i1 goto label1;

        scaledImage#8 = imageToScale;

        goto label2;

     label1:
        scaledImage#8 = interfaceinvoke scaleAlgorithm.<at.favre.tools.dconvert.converters.scaling.ScaleAlgorithm: java.awt.image.BufferedImage scale(java.awt.image.BufferedImage,int,int)>(imageToScale, dWidth, dHeight);

     label2:
        $z0 = compression.<at.favre.tools.dconvert.arg.ImageType$ECompression: boolean hasTransparency>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label3;

        $r0 = new java.awt.image.BufferedImage;

        $i2 = virtualinvoke scaledImage#8.<java.awt.image.BufferedImage: int getWidth()>();

        $i3 = virtualinvoke scaledImage#8.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i2, $i3, 1);

        convertedImg = $r0;

        $r1 = virtualinvoke convertedImg.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        virtualinvoke $r1.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)>(scaledImage#8, 0, 0, background, null);

        scaledImage#8 = convertedImg;

     label3:
        $r2 = this.<at.favre.tools.dconvert.converters.scaling.ImageHandler: at.favre.tools.dconvert.arg.Arguments args>;

        $z2 = $r2.<at.favre.tools.dconvert.arg.Arguments: boolean enableAntiAliasing>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label4;

        $r3 = <at.favre.tools.dconvert.converters.scaling.ImageHandler: java.awt.image.ConvolveOp OP_ANTIALIAS>;

        scaledImage#8 = virtualinvoke $r3.<java.awt.image.ConvolveOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(scaledImage#8, null);

     label4:
        return scaledImage#8;
    }

    private void compressJpeg(java.awt.image.BufferedImage, com.twelvemonkeys.imageio.metadata.CompoundDirectory, float, java.io.File) throws java.io.IOException
    {
        at.favre.tools.dconvert.converters.scaling.ImageHandler this;
        java.awt.image.BufferedImage bufferedImage;
        com.twelvemonkeys.imageio.metadata.CompoundDirectory exif;
        float quality;
        java.io.File targetFile;
        javax.imageio.ImageWriter jpgWriter, writer#15;
        javax.imageio.ImageWriteParam jpgWriteParam;
        javax.imageio.stream.FileImageOutputStream outputStream, $r2;
        java.lang.Throwable l11, l12, l13, l9#20, $r6, l10#36, $r7, l10#41, $r8, $r9, $r10;
        byte $b0;
        java.util.Iterator $r0, $r3;
        java.lang.Object $r1, $r4;
        javax.imageio.IIOImage $r5;

        this := @this: at.favre.tools.dconvert.converters.scaling.ImageHandler;

        bufferedImage := @parameter0: java.awt.image.BufferedImage;

        exif := @parameter1: com.twelvemonkeys.imageio.metadata.CompoundDirectory;

        quality := @parameter2: float;

        targetFile := @parameter3: java.io.File;

        $b0 = quality cmpl 0.0F;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 < 0 goto label22;

        $r0 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageWritersByFormatName(java.lang.String)>("jpg");

        $r1 = interfaceinvoke $r0.<java.util.Iterator: java.lang.Object next()>();

        jpgWriter = (javax.imageio.ImageWriter) $r1;

        jpgWriteParam = virtualinvoke jpgWriter.<javax.imageio.ImageWriter: javax.imageio.ImageWriteParam getDefaultWriteParam()>();

        virtualinvoke jpgWriteParam.<javax.imageio.ImageWriteParam: void setCompressionMode(int)>(2);

        virtualinvoke jpgWriteParam.<javax.imageio.ImageWriteParam: void setCompressionQuality(float)>(quality);

        writer#15 = null;

     label01:
        $r2 = new javax.imageio.stream.FileImageOutputStream;

        specialinvoke $r2.<javax.imageio.stream.FileImageOutputStream: void <init>(java.io.File)>(targetFile);

        outputStream = $r2;

        l9#20 = null;

     label02:
        $r3 = staticinvoke <javax.imageio.ImageIO: java.util.Iterator getImageWritersByFormatName(java.lang.String)>("jpg");

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        writer#15 = (javax.imageio.ImageWriter) $r4;

        virtualinvoke writer#15.<javax.imageio.ImageWriter: void setOutput(java.lang.Object)>(outputStream);

        $r5 = new javax.imageio.IIOImage;

        specialinvoke $r5.<javax.imageio.IIOImage: void <init>(java.awt.image.RenderedImage,java.util.List,javax.imageio.metadata.IIOMetadata)>(bufferedImage, null, null);

        virtualinvoke writer#15.<javax.imageio.ImageWriter: void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam)>(null, $r5, jpgWriteParam);

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(outputStream);

        if outputStream == null goto label17;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9#20);

        if l9#20 == null goto label07;

     label04:
        interfaceinvoke outputStream.<javax.imageio.stream.ImageOutputStream: void close()>();

     label05:
        goto label17;

     label06:
        $r6 := @caughtexception;

        l10#36 = $r6;

        virtualinvoke l9#20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l10#36);

        goto label17;

     label07:
        interfaceinvoke outputStream.<javax.imageio.stream.ImageOutputStream: void close()>();

        goto label17;

     label08:
        $r7 := @caughtexception;

     label09:
        l10#41 = $r7;

        l9#20 = l10#41;

        throw l10#41;

     label10:
        $r8 := @caughtexception;

        l11 = $r8;

     label11:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(outputStream);

        if outputStream == null goto label16;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l9#20);

        if l9#20 == null goto label15;

     label12:
        interfaceinvoke outputStream.<javax.imageio.stream.ImageOutputStream: void close()>();

     label13:
        goto label16;

     label14:
        $r9 := @caughtexception;

        l12 = $r9;

        virtualinvoke l9#20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(l12);

        goto label16;

     label15:
        interfaceinvoke outputStream.<javax.imageio.stream.ImageOutputStream: void close()>();

     label16:
        throw l11;

     label17:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(writer#15);

        if writer#15 == null goto label22;

        virtualinvoke writer#15.<javax.imageio.ImageWriter: void dispose()>();

        goto label22;

     label18:
        $r10 := @caughtexception;

     label19:
        l13 = $r10;

     label20:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(writer#15);

        if writer#15 == null goto label21;

        virtualinvoke writer#15.<javax.imageio.ImageWriter: void dispose()>();

     label21:
        throw l13;

     label22:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label09 to label11 with label10;
        catch java.lang.Throwable from label01 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }


