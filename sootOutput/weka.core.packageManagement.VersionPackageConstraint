    protected static weka.core.packageManagement.VersionPackageConstraint$VersionComparison getVersionComparison(java.lang.String)
    {
        java.lang.String compOpp, $r0;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison[] l1;
        int l2, l3#5;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison v;
        boolean $z0;

        compOpp := @parameter0: java.lang.String;

        l1 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison[] values()>();

        l2 = lengthof l1;

        l3#5 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3#5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l2);

        if l3#5 >= l2 goto label3;

        v = l1[l3#5];

        $r0 = virtualinvoke v.<weka.core.packageManagement.VersionPackageConstraint$VersionComparison: java.lang.String toString()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(compOpp);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        return v;

     label2:
        l3#5 = l3#5 + 1;

        goto label1;

     label3:
        return null;
    }

    static void <clinit>()
    {
        <weka.core.packageManagement.VersionPackageConstraint: java.lang.String VERSION_KEY> = "Version";

        return;
    }

    public static weka.core.packageManagement.VersionPackageConstraint$VersionComparison compare(java.lang.String, java.lang.String)
    {
        java.lang.String version1, version2;
        int[] majMinRev1, majMinRev2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison result#12;

        version1 := @parameter0: java.lang.String;

        version2 := @parameter1: java.lang.String;

        majMinRev1 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: int[] parseVersion(java.lang.String)>(version1);

        majMinRev2 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: int[] parseVersion(java.lang.String)>(version2);

        $i0 = majMinRev1[0];

        $i1 = majMinRev2[0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 >= $i1 goto label1;

        result#12 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison LESSTHAN>;

        goto label8;

     label1:
        $i2 = majMinRev1[0];

        $i3 = majMinRev2[0];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 != $i3 goto label7;

        $i4 = majMinRev1[1];

        $i5 = majMinRev2[1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i4 >= $i5 goto label2;

        result#12 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison LESSTHAN>;

        goto label8;

     label2:
        $i6 = majMinRev1[1];

        $i7 = majMinRev2[1];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i6 != $i7 goto label6;

        $i8 = majMinRev1[2];

        $i9 = majMinRev2[2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i8 >= $i9 goto label3;

        result#12 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison LESSTHAN>;

        goto label8;

     label3:
        $i10 = majMinRev1[2];

        $i11 = majMinRev2[2];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i10 != $i11 goto label5;

        $i12 = majMinRev1[3];

        $i13 = majMinRev2[3];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i12 != $i13 goto label4;

        result#12 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison EQUAL>;

        goto label8;

     label4:
        result#12 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison GREATERTHAN>;

        goto label8;

     label5:
        result#12 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison GREATERTHAN>;

        goto label8;

     label6:
        result#12 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison GREATERTHAN>;

        goto label8;

     label7:
        result#12 = <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison GREATERTHAN>;

     label8:
        return result#12;
    }

    protected static int[] parseVersion(java.lang.String)
    {
        java.lang.String version, tmpStr#12, $r0, tmpStr#18, tmpStr#23, $r1, tmpStr#42, $r2, tmpStr#61, $r3, tmpStr#79;
        int[] majMinRev;
        java.lang.Exception e, $r4;
        java.lang.Throwable l7, $r5;
        int major#2, minor#4, revision#6, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean point#8, $z0, point#87, $z1, $z2, $z3;
        byte revision#120;

        version := @parameter0: java.lang.String;

        major#2 = 0;

        minor#4 = 0;

        revision#6 = 0;

        point#8 = 0;

        majMinRev = newarray (int)[4];

     label01:
        tmpStr#12 = version;

        $r0 = virtualinvoke tmpStr#12.<java.lang.String: java.lang.String toLowerCase()>();

        tmpStr#18 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("-snapshot", "");

        tmpStr#23 = virtualinvoke tmpStr#18.<java.lang.String: java.lang.String replace(char,char)>(45, 46);

        $i0 = virtualinvoke tmpStr#23.<java.lang.String: int indexOf(java.lang.String)>(".");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= -1 goto label07;

        $i1 = virtualinvoke tmpStr#23.<java.lang.String: int indexOf(java.lang.String)>(".");

        $r1 = virtualinvoke tmpStr#23.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        major#2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $i2 = virtualinvoke tmpStr#23.<java.lang.String: int indexOf(java.lang.String)>(".");

        $i3 = $i2 + 1;

        tmpStr#42 = virtualinvoke tmpStr#23.<java.lang.String: java.lang.String substring(int)>($i3);

        $i4 = virtualinvoke tmpStr#42.<java.lang.String: int indexOf(java.lang.String)>(".");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= -1 goto label05;

        $i5 = virtualinvoke tmpStr#42.<java.lang.String: int indexOf(java.lang.String)>(".");

        $r2 = virtualinvoke tmpStr#42.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        minor#4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        $i6 = virtualinvoke tmpStr#42.<java.lang.String: int indexOf(java.lang.String)>(".");

        $i7 = $i6 + 1;

        tmpStr#61 = virtualinvoke tmpStr#42.<java.lang.String: java.lang.String substring(int)>($i7);

        $i8 = virtualinvoke tmpStr#61.<java.lang.String: int indexOf(java.lang.String)>(".");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 <= 0 goto label03;

        $i9 = virtualinvoke tmpStr#61.<java.lang.String: int indexOf(java.lang.String)>(".");

        $r3 = virtualinvoke tmpStr#61.<java.lang.String: java.lang.String substring(int,int)>(0, $i9);

        revision#6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $i10 = virtualinvoke tmpStr#61.<java.lang.String: int indexOf(java.lang.String)>(".");

        $i11 = $i10 + 1;

        tmpStr#79 = virtualinvoke tmpStr#61.<java.lang.String: java.lang.String substring(int)>($i11);

        $z0 = virtualinvoke tmpStr#79.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(tmpStr#79);

        goto label09;

     label02:
        point#87 = 0;

        goto label09;

     label03:
        $z1 = virtualinvoke tmpStr#61.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label04;

        revision#6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(tmpStr#61);

        goto label09;

     label04:
        revision#6 = 0;

        goto label09;

     label05:
        $z2 = virtualinvoke tmpStr#42.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 != 0 goto label06;

        minor#4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(tmpStr#42);

        goto label09;

     label06:
        minor#4 = 0;

        goto label09;

     label07:
        $z3 = virtualinvoke tmpStr#23.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 != 0 goto label08;

        major#2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(tmpStr#23);

        goto label09;

     label08:
        major#2 = 0;

     label09:
        majMinRev[0] = major#2;

        majMinRev[1] = minor#4;

        majMinRev[2] = revision#6;

        goto label16;

     label10:
        $r4 := @caughtexception;

     label11:
        e = $r4;

        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();

        major#2 = -1;

        minor#4 = -1;

        revision#120 = -1;

     label12:
        majMinRev[0] = major#2;

        majMinRev[1] = minor#4;

        majMinRev[2] = revision#120;

        goto label16;

     label13:
        $r5 := @caughtexception;

     label14:
        l7 = $r5;

     label15:
        majMinRev[0] = major#2;

        majMinRev[1] = minor#4;

        majMinRev[2] = revision#6;

        throw l7;

     label16:
        return majMinRev;

        catch java.lang.Exception from label01 to label09 with label10;
        catch java.lang.Throwable from label01 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void setVersionConstraint(weka.core.packageManagement.VersionPackageConstraint$VersionComparison)
    {
        weka.core.packageManagement.VersionPackageConstraint this;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison c;

        this := @this: weka.core.packageManagement.VersionPackageConstraint;

        c := @parameter0: weka.core.packageManagement.VersionPackageConstraint$VersionComparison;

        this.<weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison m_constraint> = c;

        return;
    }

    public void setVersionConstraint(java.lang.String)
    {
        weka.core.packageManagement.VersionPackageConstraint this;
        java.lang.String constraint, $r0;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison[] l2;
        int l3, l4#5;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison v;
        boolean $z0;

        this := @this: weka.core.packageManagement.VersionPackageConstraint;

        constraint := @parameter0: java.lang.String;

        l2 = staticinvoke <weka.core.packageManagement.VersionPackageConstraint$VersionComparison: weka.core.packageManagement.VersionPackageConstraint$VersionComparison[] values()>();

        l3 = lengthof l2;

        l4#5 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4#5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l4#5 >= l3 goto label3;

        v = l2[l4#5];

        $r0 = virtualinvoke v.<weka.core.packageManagement.VersionPackageConstraint$VersionComparison: java.lang.String toString()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(constraint);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        this.<weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison m_constraint> = v;

        goto label3;

     label2:
        l4#5 = l4#5 + 1;

        goto label1;

     label3:
        return;
    }

    public void <init>(weka.core.packageManagement.Package)
    {
        weka.core.packageManagement.VersionPackageConstraint this;
        weka.core.packageManagement.Package p;

        this := @this: weka.core.packageManagement.VersionPackageConstraint;

        p := @parameter0: weka.core.packageManagement.Package;

        specialinvoke this.<weka.core.packageManagement.PackageConstraint: void <init>()>();

        this.<weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison m_constraint> = null;

        virtualinvoke this.<weka.core.packageManagement.VersionPackageConstraint: void setPackage(weka.core.packageManagement.Package)>(p);

        return;
    }

    protected static boolean checkConstraint(java.lang.String, weka.core.packageManagement.VersionPackageConstraint$VersionComparison, java.lang.String)
    {
        java.lang.String version1, version2;
        weka.core.packageManagement.VersionPackageConstraint$VersionComparison constraint, c;
        boolean $z0;

        version1 := @parameter0: java.lang.String;

        constraint := @parameter1: weka.core.packageManagement.VersionPackageConstraint$VersionComparison;

        version2 := @parameter2: java.lang.String;

        c = staticinvoke <weka.core.packageManagement.VersionPackageConstraint: weka.core.packageManagement.VersionPackageConstraint$VersionComparison compare(java.lang.String,java.lang.String)>(version1, version2);

        $z0 = virtualinvoke constraint.<weka.core.packageManagement.VersionPackageConstraint$VersionComparison: boolean compatibleWith(weka.core.packageManagement.VersionPackageConstraint$VersionComparison)>(c);

        return $z0;
    }


