    public boolean forward(kanzi.SliceByteArray, kanzi.SliceByteArray)
    {
        kanzi.transform.SBRT this;
        kanzi.SliceByteArray input, output;
        int count, srcIdx, dstIdx, curVal, $i0, $i1, $i2, $i3, $i4, $i6, $i8, i#54, i#70, $i10, r#83, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        byte[] src, dst, $r0, $r1, $r2;
        int[] p, q, s2r, r2s;
        byte mask1, mask2, shift, $b5, $b7, $b9, $b11, $b13;
        short c;
        boolean $z0, $z1;

        this := @this: kanzi.transform.SBRT;

        input := @parameter0: kanzi.SliceByteArray;

        output := @parameter1: kanzi.SliceByteArray;

        $z0 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(input);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <kanzi.SliceByteArray: boolean isValid(kanzi.SliceByteArray)>(output);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r0 = input.<kanzi.SliceByteArray: byte[] array>;

        $r1 = output.<kanzi.SliceByteArray: byte[] array>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r1);

        if $r0 != $r1 goto label03;

        return 0;

     label03:
        count = input.<kanzi.SliceByteArray: int length>;

        $i0 = output.<kanzi.SliceByteArray: int length>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if $i0 >= count goto label04;

        return 0;

     label04:
        $i1 = output.<kanzi.SliceByteArray: int index>;

        $i2 = $i1 + count;

        $r2 = output.<kanzi.SliceByteArray: byte[] array>;

        $i3 = lengthof $r2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 <= $i3 goto label05;

        return 0;

     label05:
        src = input.<kanzi.SliceByteArray: byte[] array>;

        dst = output.<kanzi.SliceByteArray: byte[] array>;

        srcIdx = input.<kanzi.SliceByteArray: int index>;

        dstIdx = output.<kanzi.SliceByteArray: int index>;

        p = this.<kanzi.transform.SBRT: int[] prev>;

        q = this.<kanzi.transform.SBRT: int[] curr>;

        s2r = this.<kanzi.transform.SBRT: int[] symbols>;

        r2s = this.<kanzi.transform.SBRT: int[] ranks>;

        $i4 = this.<kanzi.transform.SBRT: int mode>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 != 3 goto label06;

        $b5 = 0;

        goto label07;

     label06:
        $b5 = -1;

     label07:
        mask1 = $b5;

        $i6 = this.<kanzi.transform.SBRT: int mode>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 != 1 goto label08;

        $b7 = 0;

        goto label09;

     label08:
        $b7 = -1;

     label09:
        mask2 = $b7;

        $i8 = this.<kanzi.transform.SBRT: int mode>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 != 2 goto label10;

        $b9 = 1;

        goto label11;

     label10:
        $b9 = 0;

     label11:
        shift = $b9;

        i#54 = 0;

     label12:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#54);

        if i#54 >= 256 goto label13;

        p[i#54] = 0;

        q[i#54] = 0;

        s2r[i#54] = i#54;

        r2s[i#54] = i#54;

        i#54 = i#54 + 1;

        goto label12;

     label13:
        i#70 = 0;

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#70);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(count);

        if i#70 >= count goto label17;

        $i10 = srcIdx + i#70;

        $b11 = src[$i10];

        c = $b11 & 255;

        r#83 = s2r[c];

        $i12 = dstIdx + i#70;

        $b13 = (byte) r#83;

        dst[$i12] = $b13;

        $i14 = i#70 & mask1;

        $i15 = p[c];

        $i16 = $i15 & mask2;

        $i17 = $i14 + $i16;

        $i18 = $i17 >> shift;

        q[c] = $i18;

        p[c] = i#70;

        curVal = q[c];

     label15:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#83);

        if r#83 <= 0 goto label16;

        $i19 = r#83 - 1;

        $i20 = r2s[$i19];

        $i21 = q[$i20];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i21);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(curVal);

        if $i21 > curVal goto label16;

        $i22 = r#83 - 1;

        $i23 = r2s[$i22];

        r2s[r#83] = $i23;

        $i24 = r2s[r#83];

        s2r[$i24] = r#83;

        r#83 = r#83 + -1;

        goto label15;

     label16:
        r2s[r#83] = c;

        s2r[c] = r#83;

        i#70 = i#70 + 1;

        goto label14;

     label17:
        $i25 = input.<kanzi.SliceByteArray: int index>;

        $i26 = $i25 + count;

        input.<kanzi.SliceByteArray: int index> = $i26;

        $i27 = output.<kanzi.SliceByteArray: int index>;

        $i28 = $i27 + count;

        output.<kanzi.SliceByteArray: int index> = $i28;

        return 1;
    }

    public void <init>(int)
    {
        kanzi.transform.SBRT this;
        int mode;
        java.lang.IllegalArgumentException $r0;
        int[] $r1, $r2, $r3, $r4;

        this := @this: kanzi.transform.SBRT;

        mode := @parameter0: int;

        specialinvoke this.<java.lang.Object: void <init>()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mode);

        if mode == 1 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mode);

        if mode == 2 goto label1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(mode);

        if mode == 3 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid mode parameter");

        throw $r0;

     label1:
        $r1 = newarray (int)[256];

        this.<kanzi.transform.SBRT: int[] prev> = $r1;

        $r2 = newarray (int)[256];

        this.<kanzi.transform.SBRT: int[] curr> = $r2;

        $r3 = newarray (int)[256];

        this.<kanzi.transform.SBRT: int[] symbols> = $r3;

        $r4 = newarray (int)[256];

        this.<kanzi.transform.SBRT: int[] ranks> = $r4;

        this.<kanzi.transform.SBRT: int mode> = mode;

        return;
    }


