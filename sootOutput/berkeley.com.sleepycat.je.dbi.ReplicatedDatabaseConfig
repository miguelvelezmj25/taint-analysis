    public void <init>()
    {
        berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig this;
        byte[] $r0, $r1;
        byte[][] $r2;

        this := @this: berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig;

        specialinvoke this.<berkeley.com.sleepycat.je.log.BasicVersionedWriteLoggable: void <init>()>();

        $r0 = <berkeley.com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[] btreeComparatorBytes> = $r0;

        $r1 = <berkeley.com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[] duplicateComparatorBytes> = $r1;

        $r2 = (byte[][]) null;

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[][] triggerBytes> = $r2;

        return;
    }

    public void readFromLog(java.nio.ByteBuffer, int)
    {
        berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig this;
        java.nio.ByteBuffer itemBuffer;
        int entryVersion, $i1;
        byte $b0;
        byte[] $r0, $r1;
        byte[][] $r3;

        this := @this: berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig;

        itemBuffer := @parameter0: java.nio.ByteBuffer;

        entryVersion := @parameter1: int;

        $b0 = virtualinvoke itemBuffer.<java.nio.ByteBuffer: byte get()>();

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte flags> = $b0;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readInt(java.nio.ByteBuffer,boolean)>(itemBuffer, 0);

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: int maxTreeEntriesPerNode> = $i1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entryVersion);

        if entryVersion >= 8 goto label1;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int readInt(java.nio.ByteBuffer,boolean)>(itemBuffer, 0);

     label1:
        $r0 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: byte[] readByteArray(java.nio.ByteBuffer,boolean)>(itemBuffer, 0);

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[] btreeComparatorBytes> = $r0;

        $r1 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: byte[] readByteArray(java.nio.ByteBuffer,boolean)>(itemBuffer, 0);

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[] duplicateComparatorBytes> = $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(entryVersion);

        if entryVersion >= 8 goto label2;

        $r3 = (byte[][]) null;

        goto label3;

     label2:
        $r3 = staticinvoke <berkeley.com.sleepycat.je.dbi.TriggerUtils: byte[][] readTriggers(java.nio.ByteBuffer,int)>(itemBuffer, entryVersion);

     label3:
        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[][] triggerBytes> = $r3;

        return;
    }

    void <init>(byte, int, byte[], byte[], byte[][])
    {
        berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig this;
        byte flags;
        int maxTreeEntriesPerNode;
        byte[] btreeComparatorBytes, duplicateComparatorBytes, $r0, $r1;
        byte[][] triggerBytes, $r2;

        this := @this: berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig;

        flags := @parameter0: byte;

        maxTreeEntriesPerNode := @parameter1: int;

        btreeComparatorBytes := @parameter2: byte[];

        duplicateComparatorBytes := @parameter3: byte[];

        triggerBytes := @parameter4: byte[][];

        specialinvoke this.<berkeley.com.sleepycat.je.log.BasicVersionedWriteLoggable: void <init>()>();

        $r0 = <berkeley.com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[] btreeComparatorBytes> = $r0;

        $r1 = <berkeley.com.sleepycat.je.log.LogUtils: byte[] ZERO_LENGTH_BYTE_ARRAY>;

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[] duplicateComparatorBytes> = $r1;

        $r2 = (byte[][]) null;

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[][] triggerBytes> = $r2;

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte flags> = flags;

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: int maxTreeEntriesPerNode> = maxTreeEntriesPerNode;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(btreeComparatorBytes);

        if btreeComparatorBytes == null goto label1;

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[] btreeComparatorBytes> = btreeComparatorBytes;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(duplicateComparatorBytes);

        if duplicateComparatorBytes == null goto label2;

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[] duplicateComparatorBytes> = duplicateComparatorBytes;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(triggerBytes);

        if triggerBytes == null goto label3;

        this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[][] triggerBytes> = triggerBytes;

     label3:
        return;
    }

    public void writeToLog(java.nio.ByteBuffer, int, boolean)
    {
        berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig this;
        java.nio.ByteBuffer logBuffer;
        int logVersion, $i1;
        boolean forReplication;
        byte $b0;
        byte[] $r1, $r2;
        byte[][] $r3;

        this := @this: berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig;

        logBuffer := @parameter0: java.nio.ByteBuffer;

        logVersion := @parameter1: int;

        forReplication := @parameter2: boolean;

        $b0 = this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte flags>;

        virtualinvoke logBuffer.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b0);

        $i1 = this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: int maxTreeEntriesPerNode>;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writePackedInt(java.nio.ByteBuffer,int)>(logBuffer, $i1);

        $r1 = this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[] btreeComparatorBytes>;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writeByteArray(java.nio.ByteBuffer,byte[])>(logBuffer, $r1);

        $r2 = this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[] duplicateComparatorBytes>;

        staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: void writeByteArray(java.nio.ByteBuffer,byte[])>(logBuffer, $r2);

        $r3 = this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[][] triggerBytes>;

        staticinvoke <berkeley.com.sleepycat.je.dbi.TriggerUtils: void writeTriggers(java.nio.ByteBuffer,byte[][])>(logBuffer, $r3);

        return;
    }

    public int getLogSize(int, boolean)
    {
        berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig this;
        int logVersion, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean forReplication;
        byte[] $r0, $r1;
        byte[][] $r2;

        this := @this: berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig;

        logVersion := @parameter0: int;

        forReplication := @parameter1: boolean;

        $i0 = this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: int maxTreeEntriesPerNode>;

        $i1 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getPackedIntLogSize(int)>($i0);

        $i2 = 1 + $i1;

        $r0 = this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[] btreeComparatorBytes>;

        $i3 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getByteArrayLogSize(byte[])>($r0);

        $i4 = $i2 + $i3;

        $r1 = this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[] duplicateComparatorBytes>;

        $i5 = staticinvoke <berkeley.com.sleepycat.je.log.LogUtils: int getByteArrayLogSize(byte[])>($r1);

        $i6 = $i4 + $i5;

        $r2 = this.<berkeley.com.sleepycat.je.dbi.ReplicatedDatabaseConfig: byte[][] triggerBytes>;

        $i7 = staticinvoke <berkeley.com.sleepycat.je.dbi.TriggerUtils: int logSize(byte[][])>($r2);

        $i8 = $i6 + $i7;

        return $i8;
    }


