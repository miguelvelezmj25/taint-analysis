    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "berkeley/com/sleepycat/je/cleaner/OffsetList";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <berkeley.com.sleepycat.je.cleaner.OffsetList: boolean $assertionsDisabled> = $z1;

        return;
    }

    public void <init>()
    {
        berkeley.com.sleepycat.je.cleaner.OffsetList this;
        berkeley.com.sleepycat.je.cleaner.OffsetList$Segment $r0, $r1;

        this := @this: berkeley.com.sleepycat.je.cleaner.OffsetList;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $r0 = new berkeley.com.sleepycat.je.cleaner.OffsetList$Segment;

        specialinvoke $r0.<berkeley.com.sleepycat.je.cleaner.OffsetList$Segment: void <init>()>();

        this.<berkeley.com.sleepycat.je.cleaner.OffsetList: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment head> = $r0;

        $r1 = this.<berkeley.com.sleepycat.je.cleaner.OffsetList: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment head>;

        this.<berkeley.com.sleepycat.je.cleaner.OffsetList: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment tail> = $r1;

        return;
    }

    public boolean add(long, boolean)
    {
        berkeley.com.sleepycat.je.cleaner.OffsetList this;
        long value;
        boolean checkDupOffsets, $z0, $z1, $z2;
        berkeley.com.sleepycat.je.cleaner.OffsetList$Segment oldTail, $r8, $r9, $r11;
        int $i0, $i1, $i2;
        java.lang.AssertionError $r0;
        java.lang.Exception $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6, $r7;

        this := @this: berkeley.com.sleepycat.je.cleaner.OffsetList;

        value := @parameter0: long;

        checkDupOffsets := @parameter1: boolean;

        $z0 = <berkeley.com.sleepycat.je.cleaner.OffsetList: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if checkDupOffsets == 0 goto label1;

        $i0 = this.<berkeley.com.sleepycat.je.cleaner.OffsetList: int size>;

        if $i0 > 100 goto label1;

        $z1 = virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.OffsetList: boolean contains(long)>(value);

        if $z1 == 0 goto label1;

        $r0 = new java.lang.AssertionError;

        $r1 = new java.lang.Exception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dup Offset ");

        $r4 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(value);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>($r6);

        $r7 = staticinvoke <berkeley.com.sleepycat.je.utilint.LoggerUtils: java.lang.String getStackTrace(java.lang.Throwable)>($r1);

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r0;

     label1:
        oldTail = this.<berkeley.com.sleepycat.je.cleaner.OffsetList: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment tail>;

        $r8 = this.<berkeley.com.sleepycat.je.cleaner.OffsetList: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment tail>;

        $r9 = virtualinvoke $r8.<berkeley.com.sleepycat.je.cleaner.OffsetList$Segment: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment add(long)>(value);

        this.<berkeley.com.sleepycat.je.cleaner.OffsetList: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment tail> = $r9;

        $i1 = this.<berkeley.com.sleepycat.je.cleaner.OffsetList: int size>;

        $i2 = $i1 + 1;

        this.<berkeley.com.sleepycat.je.cleaner.OffsetList: int size> = $i2;

        $r11 = this.<berkeley.com.sleepycat.je.cleaner.OffsetList: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment tail>;

        if $r11 == oldTail goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    boolean contains(long)
    {
        berkeley.com.sleepycat.je.cleaner.OffsetList this;
        long offset, $l1;
        berkeley.com.sleepycat.je.cleaner.OffsetList$Segment seg#3;
        int i#6, $i0;
        byte $b2;

        this := @this: berkeley.com.sleepycat.je.cleaner.OffsetList;

        offset := @parameter0: long;

        seg#3 = this.<berkeley.com.sleepycat.je.cleaner.OffsetList: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment head>;

     label1:
        if seg#3 == null goto label5;

        i#6 = 0;

     label2:
        $i0 = virtualinvoke seg#3.<berkeley.com.sleepycat.je.cleaner.OffsetList$Segment: int size()>();

        if i#6 >= $i0 goto label4;

        $l1 = virtualinvoke seg#3.<berkeley.com.sleepycat.je.cleaner.OffsetList$Segment: long get(int)>(i#6);

        $b2 = $l1 cmp offset;

        if $b2 != 0 goto label3;

        return 1;

     label3:
        i#6 = i#6 + 1;

        goto label2;

     label4:
        seg#3 = virtualinvoke seg#3.<berkeley.com.sleepycat.je.cleaner.OffsetList$Segment: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment next()>();

        goto label1;

     label5:
        return 0;
    }

    boolean merge(berkeley.com.sleepycat.je.cleaner.OffsetList)
    {
        berkeley.com.sleepycat.je.cleaner.OffsetList this, other;
        berkeley.com.sleepycat.je.cleaner.OffsetList$Segment next, seg#5, $r0;
        boolean oneSegFreed#2, $z0;
        int i#16, $i0;
        long $l1;

        this := @this: berkeley.com.sleepycat.je.cleaner.OffsetList;

        other := @parameter0: berkeley.com.sleepycat.je.cleaner.OffsetList;

        oneSegFreed#2 = 1;

        seg#5 = other.<berkeley.com.sleepycat.je.cleaner.OffsetList: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment head>;

     label1:
        next = virtualinvoke seg#5.<berkeley.com.sleepycat.je.cleaner.OffsetList$Segment: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment next()>();

        if next == null goto label2;

        $r0 = this.<berkeley.com.sleepycat.je.cleaner.OffsetList: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment head>;

        virtualinvoke seg#5.<berkeley.com.sleepycat.je.cleaner.OffsetList$Segment: void setNext(berkeley.com.sleepycat.je.cleaner.OffsetList$Segment)>($r0);

        this.<berkeley.com.sleepycat.je.cleaner.OffsetList: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment head> = seg#5;

        seg#5 = next;

        goto label6;

     label2:
        i#16 = 0;

     label3:
        $i0 = virtualinvoke seg#5.<berkeley.com.sleepycat.je.cleaner.OffsetList$Segment: int size()>();

        if i#16 >= $i0 goto label5;

        $l1 = virtualinvoke seg#5.<berkeley.com.sleepycat.je.cleaner.OffsetList$Segment: long get(int)>(i#16);

        $z0 = virtualinvoke this.<berkeley.com.sleepycat.je.cleaner.OffsetList: boolean add(long,boolean)>($l1, 0);

        if $z0 == 0 goto label4;

        oneSegFreed#2 = 0;

     label4:
        i#16 = i#16 + 1;

        goto label3;

     label5:
        goto label7;

     label6:
        goto label1;

     label7:
        return oneSegFreed#2;
    }

    public long[] toArray()
    {
        berkeley.com.sleepycat.je.cleaner.OffsetList this;
        long[] a;
        int $i0, next#5, i#11, $i1, $i2;
        berkeley.com.sleepycat.je.cleaner.OffsetList$Segment seg#8;
        long $l3;

        this := @this: berkeley.com.sleepycat.je.cleaner.OffsetList;

        $i0 = this.<berkeley.com.sleepycat.je.cleaner.OffsetList: int size>;

        a = newarray (long)[$i0];

        next#5 = 0;

        seg#8 = this.<berkeley.com.sleepycat.je.cleaner.OffsetList: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment head>;

     label1:
        if seg#8 == null goto label5;

        i#11 = 0;

     label2:
        $i1 = virtualinvoke seg#8.<berkeley.com.sleepycat.je.cleaner.OffsetList$Segment: int size()>();

        if i#11 >= $i1 goto label4;

        $i2 = lengthof a;

        if next#5 < $i2 goto label3;

        goto label5;

     label3:
        $l3 = virtualinvoke seg#8.<berkeley.com.sleepycat.je.cleaner.OffsetList$Segment: long get(int)>(i#11);

        a[next#5] = $l3;

        next#5 = next#5 + 1;

        i#11 = i#11 + 1;

        goto label2;

     label4:
        seg#8 = virtualinvoke seg#8.<berkeley.com.sleepycat.je.cleaner.OffsetList$Segment: berkeley.com.sleepycat.je.cleaner.OffsetList$Segment next()>();

        goto label1;

     label5:
        return a;
    }


