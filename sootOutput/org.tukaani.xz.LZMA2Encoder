    void <init>(org.tukaani.xz.LZMA2Options)
    {
        org.tukaani.xz.LZMA2Encoder this;
        org.tukaani.xz.LZMA2Options options, $r6;
        int d, $i0, $i1, $i2, $i3, $i4;
        byte[] $r0, $r1, $r3, $r4;
        java.lang.IllegalArgumentException $r2;
        byte $b5;
        java.lang.Object $r5;

        this := @this: org.tukaani.xz.LZMA2Encoder;

        options := @parameter0: org.tukaani.xz.LZMA2Options;

        specialinvoke this.<org.tukaani.xz.LZMA2Coder: void <init>()>();

        $r0 = newarray (byte)[1];

        this.<org.tukaani.xz.LZMA2Encoder: byte[] props> = $r0;

        $r1 = virtualinvoke options.<org.tukaani.xz.LZMA2Options: byte[] getPresetDict()>();

        if $r1 == null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("XZ doesn\'t support a preset dictionary for now");

        throw $r2;

     label1:
        $i0 = virtualinvoke options.<org.tukaani.xz.LZMA2Options: int getMode()>();

        if $i0 != 0 goto label2;

        $r3 = this.<org.tukaani.xz.LZMA2Encoder: byte[] props>;

        $r3[0] = 0;

        goto label3;

     label2:
        $i1 = virtualinvoke options.<org.tukaani.xz.LZMA2Options: int getDictSize()>();

        d = staticinvoke <java.lang.Math: int max(int,int)>($i1, 4096);

        $r4 = this.<org.tukaani.xz.LZMA2Encoder: byte[] props>;

        $i2 = d - 1;

        $i3 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: int getDistSlot(int)>($i2);

        $i4 = $i3 - 23;

        $b5 = (byte) $i4;

        $r4[0] = $b5;

     label3:
        $r5 = virtualinvoke options.<org.tukaani.xz.LZMA2Options: java.lang.Object clone()>();

        $r6 = (org.tukaani.xz.LZMA2Options) $r5;

        this.<org.tukaani.xz.LZMA2Encoder: org.tukaani.xz.LZMA2Options options> = $r6;

        return;
    }

    public byte[] getFilterProps()
    {
        org.tukaani.xz.LZMA2Encoder this;
        byte[] $r0;

        this := @this: org.tukaani.xz.LZMA2Encoder;

        $r0 = this.<org.tukaani.xz.LZMA2Encoder: byte[] props>;

        return $r0;
    }

    public long getFilterID()
    {
        org.tukaani.xz.LZMA2Encoder this;

        this := @this: org.tukaani.xz.LZMA2Encoder;

        return 33L;
    }

    public org.tukaani.xz.FinishableOutputStream getOutputStream(org.tukaani.xz.FinishableOutputStream)
    {
        org.tukaani.xz.LZMA2Encoder this;
        org.tukaani.xz.FinishableOutputStream out, $r1;
        org.tukaani.xz.LZMA2Options $r0;

        this := @this: org.tukaani.xz.LZMA2Encoder;

        out := @parameter0: org.tukaani.xz.FinishableOutputStream;

        $r0 = this.<org.tukaani.xz.LZMA2Encoder: org.tukaani.xz.LZMA2Options options>;

        $r1 = virtualinvoke $r0.<org.tukaani.xz.LZMA2Options: org.tukaani.xz.FinishableOutputStream getOutputStream(org.tukaani.xz.FinishableOutputStream)>(out);

        return $r1;
    }

    public boolean supportsFlushing()
    {
        org.tukaani.xz.LZMA2Encoder this;

        this := @this: org.tukaani.xz.LZMA2Encoder;

        return 1;
    }


