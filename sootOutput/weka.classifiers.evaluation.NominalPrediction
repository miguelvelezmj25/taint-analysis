    public void <init>(double, double[], double)
    {
        weka.classifiers.evaluation.NominalPrediction this;
        double actual, weight, $d0, $d1;
        double[] distribution, $r2;
        java.lang.NullPointerException $r0;
        java.lang.Object $r1;

        this := @this: weka.classifiers.evaluation.NominalPrediction;

        actual := @parameter0: double;

        distribution := @parameter1: double[];

        weight := @parameter2: double;

        specialinvoke this.<java.lang.Object: void <init>()>();

        $d0 = <weka.classifiers.evaluation.NominalPrediction: double MISSING_VALUE>;

        this.<weka.classifiers.evaluation.NominalPrediction: double m_Actual> = $d0;

        $d1 = <weka.classifiers.evaluation.NominalPrediction: double MISSING_VALUE>;

        this.<weka.classifiers.evaluation.NominalPrediction: double m_Predicted> = $d1;

        this.<weka.classifiers.evaluation.NominalPrediction: double m_Weight> = 1.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(distribution);

        if distribution != null goto label1;

        $r0 = new java.lang.NullPointerException;

        specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null distribution in NominalPrediction.");

        throw $r0;

     label1:
        this.<weka.classifiers.evaluation.NominalPrediction: double m_Actual> = actual;

        $r1 = virtualinvoke distribution.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (double[]) $r1;

        this.<weka.classifiers.evaluation.NominalPrediction: double[] m_Distribution> = $r2;

        this.<weka.classifiers.evaluation.NominalPrediction: double m_Weight> = weight;

        specialinvoke this.<weka.classifiers.evaluation.NominalPrediction: void updatePredicted()>();

        return;
    }

    private void updatePredicted()
    {
        weka.classifiers.evaluation.NominalPrediction this;
        int predictedClass#2, i#6, $i0;
        double bestProb#4, $d0, $d1, $d2;
        double[] $r0, $r1, $r2;
        byte $b1;

        this := @this: weka.classifiers.evaluation.NominalPrediction;

        predictedClass#2 = -1;

        bestProb#4 = 0.0;

        i#6 = 0;

     label1:
        $r0 = this.<weka.classifiers.evaluation.NominalPrediction: double[] m_Distribution>;

        $i0 = lengthof $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#6 >= $i0 goto label3;

        $r1 = this.<weka.classifiers.evaluation.NominalPrediction: double[] m_Distribution>;

        $d0 = $r1[i#6];

        $b1 = $d0 cmpl bestProb#4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 <= 0 goto label2;

        predictedClass#2 = i#6;

        $r2 = this.<weka.classifiers.evaluation.NominalPrediction: double[] m_Distribution>;

        bestProb#4 = $r2[i#6];

     label2:
        i#6 = i#6 + 1;

        goto label1;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(predictedClass#2);

        if predictedClass#2 == -1 goto label4;

        $d1 = (double) predictedClass#2;

        this.<weka.classifiers.evaluation.NominalPrediction: double m_Predicted> = $d1;

        goto label5;

     label4:
        $d2 = <weka.classifiers.evaluation.NominalPrediction: double MISSING_VALUE>;

        this.<weka.classifiers.evaluation.NominalPrediction: double m_Predicted> = $d2;

     label5:
        return;
    }


