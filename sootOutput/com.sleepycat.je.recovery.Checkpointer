    public static long getWakeupPeriod(com.sleepycat.je.dbi.DbConfigManager) throws java.lang.IllegalArgumentException
    {
        com.sleepycat.je.dbi.DbConfigManager configManager;
        long wakeupPeriod, bytePeriod;
        com.sleepycat.je.config.DurationConfigParam $r0, $r8;
        int $i0;
        com.sleepycat.je.config.LongConfigParam $r1, $r4;
        byte $b1, $b2, $b3;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r6, $r7, $r10, $r11;
        java.lang.String $r5, $r9, $r12;

        configManager := @parameter0: com.sleepycat.je.dbi.DbConfigManager;

        $r0 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.DurationConfigParam CHECKPOINTER_WAKEUP_INTERVAL>;

        $i0 = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: int getDuration(com.sleepycat.je.config.DurationConfigParam)>($r0);

        wakeupPeriod = (long) $i0;

        $r1 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.LongConfigParam CHECKPOINTER_BYTES_INTERVAL>;

        bytePeriod = virtualinvoke configManager.<com.sleepycat.je.dbi.DbConfigManager: long getLong(com.sleepycat.je.config.LongConfigParam)>($r1);

        $b1 = wakeupPeriod cmp 0L;

        if $b1 != 0 goto label1;

        $b2 = bytePeriod cmp 0L;

        if $b2 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.LongConfigParam CHECKPOINTER_BYTES_INTERVAL>;

        $r5 = virtualinvoke $r4.<com.sleepycat.je.config.LongConfigParam: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r8 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.DurationConfigParam CHECKPOINTER_WAKEUP_INTERVAL>;

        $r9 = virtualinvoke $r8.<com.sleepycat.je.config.DurationConfigParam: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot both be 0. ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r2;

     label1:
        $b3 = bytePeriod cmp 0L;

        if $b3 != 0 goto label2;

        return wakeupPeriod;

     label2:
        return 0L;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "com/sleepycat/je/recovery/Checkpointer";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sleepycat.je.recovery.Checkpointer: boolean $assertionsDisabled> = $z1;

        <com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.utilint.TestHook maxFlushLevelHook> = null;

        <com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.utilint.TestHook beforeFlushHook> = null;

        <com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.utilint.TestHook examineINForCheckpointHook> = null;

        return;
    }

    public void <init>(com.sleepycat.je.dbi.EnvironmentImpl, long, java.lang.String)
    {
        com.sleepycat.je.recovery.Checkpointer this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        long waitTime, $l0, $l1;
        java.lang.String name;
        com.sleepycat.je.dbi.DbConfigManager $r0, $r2, $r6;
        com.sleepycat.je.config.LongConfigParam $r1, $r3;
        com.sleepycat.je.recovery.Checkpointer$FlushStats $r4;
        com.sleepycat.je.recovery.DirtyINMap $r5;

        this := @this: com.sleepycat.je.recovery.Checkpointer;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        waitTime := @parameter1: long;

        name := @parameter2: java.lang.String;

        specialinvoke this.<com.sleepycat.je.utilint.DaemonThread: void <init>(long,java.lang.String,com.sleepycat.je.dbi.EnvironmentImpl)>(waitTime, name, envImpl);

        $r0 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        $r1 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.LongConfigParam CHECKPOINTER_BYTES_INTERVAL>;

        $l0 = virtualinvoke $r0.<com.sleepycat.je.dbi.DbConfigManager: long getLong(com.sleepycat.je.config.LongConfigParam)>($r1);

        this.<com.sleepycat.je.recovery.Checkpointer: long logSizeBytesInterval> = $l0;

        $r2 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        $r3 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.LongConfigParam LOG_FILE_MAX>;

        $l1 = virtualinvoke $r2.<com.sleepycat.je.dbi.DbConfigManager: long getLong(com.sleepycat.je.config.LongConfigParam)>($r3);

        this.<com.sleepycat.je.recovery.Checkpointer: long logFileMax> = $l1;

        this.<com.sleepycat.je.recovery.Checkpointer: long timeInterval> = waitTime;

        this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointMillis> = 0L;

        this.<com.sleepycat.je.recovery.Checkpointer: long nCheckpoints> = 0L;

        $r4 = new com.sleepycat.je.recovery.Checkpointer$FlushStats;

        specialinvoke $r4.<com.sleepycat.je.recovery.Checkpointer$FlushStats: void <init>()>();

        this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.Checkpointer$FlushStats flushStats> = $r4;

        $r5 = new com.sleepycat.je.recovery.DirtyINMap;

        specialinvoke $r5.<com.sleepycat.je.recovery.DirtyINMap: void <init>(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.DirtyINMap checkpointDirtyMap> = $r5;

        $r6 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbConfigManager getConfigManager()>();

        virtualinvoke this.<com.sleepycat.je.recovery.Checkpointer: void envConfigUpdate(com.sleepycat.je.dbi.DbConfigManager,com.sleepycat.je.EnvironmentMutableConfig)>($r6, null);

        virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: void addConfigObserver(com.sleepycat.je.dbi.EnvConfigObserver)>(this);

        return;
    }

    public void envConfigUpdate(com.sleepycat.je.dbi.DbConfigManager, com.sleepycat.je.EnvironmentMutableConfig)
    {
        com.sleepycat.je.recovery.Checkpointer this;
        com.sleepycat.je.dbi.DbConfigManager cm;
        com.sleepycat.je.EnvironmentMutableConfig ignore;
        com.sleepycat.je.config.BooleanConfigParam $r0;
        boolean $z0;

        this := @this: com.sleepycat.je.recovery.Checkpointer;

        cm := @parameter0: com.sleepycat.je.dbi.DbConfigManager;

        ignore := @parameter1: com.sleepycat.je.EnvironmentMutableConfig;

        $r0 = <com.sleepycat.je.config.EnvironmentParams: com.sleepycat.je.config.BooleanConfigParam CHECKPOINTER_HIGH_PRIORITY>;

        $z0 = virtualinvoke cm.<com.sleepycat.je.dbi.DbConfigManager: boolean getBoolean(com.sleepycat.je.config.BooleanConfigParam)>($r0);

        this.<com.sleepycat.je.recovery.Checkpointer: boolean highPriority> = $z0;

        return;
    }

    public com.sleepycat.je.utilint.StatGroup loadStats(com.sleepycat.je.StatsConfig)
    {
        com.sleepycat.je.recovery.Checkpointer this;
        com.sleepycat.je.StatsConfig config;
        com.sleepycat.je.utilint.StatGroup stats, $r0;
        com.sleepycat.je.utilint.LongStat $r1, $r3, $r5, $r11, $r14, $r17;
        com.sleepycat.je.utilint.StatDefinition $r2, $r4, $r6, $r8, $r10, $r12, $r15, $r18;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7;
        com.sleepycat.je.utilint.LSNStat $r7, $r9;
        com.sleepycat.je.recovery.Checkpointer$FlushStats $r13, $r16, $r19, $r20, $r21, $r22;
        boolean $z0;

        this := @this: com.sleepycat.je.recovery.Checkpointer;

        config := @parameter0: com.sleepycat.je.StatsConfig;

        $r0 = new com.sleepycat.je.utilint.StatGroup;

        specialinvoke $r0.<com.sleepycat.je.utilint.StatGroup: void <init>(java.lang.String,java.lang.String)>("Checkpoints", "Frequency and extent of checkpointing activity.");

        stats = $r0;

        $r1 = new com.sleepycat.je.utilint.LongStat;

        $r2 = <com.sleepycat.je.recovery.CheckpointStatDefinition: com.sleepycat.je.utilint.StatDefinition CKPT_LAST_CKPTID>;

        $l0 = this.<com.sleepycat.je.recovery.Checkpointer: long checkpointId>;

        specialinvoke $r1.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r2, $l0);

        $r3 = new com.sleepycat.je.utilint.LongStat;

        $r4 = <com.sleepycat.je.recovery.CheckpointStatDefinition: com.sleepycat.je.utilint.StatDefinition CKPT_CHECKPOINTS>;

        $l1 = this.<com.sleepycat.je.recovery.Checkpointer: long nCheckpoints>;

        specialinvoke $r3.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r4, $l1);

        $r5 = new com.sleepycat.je.utilint.LongStat;

        $r6 = <com.sleepycat.je.recovery.CheckpointStatDefinition: com.sleepycat.je.utilint.StatDefinition CKPT_LAST_CKPT_INTERVAL>;

        $l2 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointInterval>;

        specialinvoke $r5.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r6, $l2);

        $r7 = new com.sleepycat.je.utilint.LSNStat;

        $r8 = <com.sleepycat.je.recovery.CheckpointStatDefinition: com.sleepycat.je.utilint.StatDefinition CKPT_LAST_CKPT_START>;

        $l3 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointStart>;

        specialinvoke $r7.<com.sleepycat.je.utilint.LSNStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r8, $l3);

        $r9 = new com.sleepycat.je.utilint.LSNStat;

        $r10 = <com.sleepycat.je.recovery.CheckpointStatDefinition: com.sleepycat.je.utilint.StatDefinition CKPT_LAST_CKPT_END>;

        $l4 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointEnd>;

        specialinvoke $r9.<com.sleepycat.je.utilint.LSNStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r10, $l4);

        $r11 = new com.sleepycat.je.utilint.LongStat;

        $r12 = <com.sleepycat.je.recovery.CheckpointStatDefinition: com.sleepycat.je.utilint.StatDefinition CKPT_FULL_IN_FLUSH>;

        $r13 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.Checkpointer$FlushStats flushStats>;

        $l5 = $r13.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullINFlush>;

        specialinvoke $r11.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r12, $l5);

        $r14 = new com.sleepycat.je.utilint.LongStat;

        $r15 = <com.sleepycat.je.recovery.CheckpointStatDefinition: com.sleepycat.je.utilint.StatDefinition CKPT_FULL_BIN_FLUSH>;

        $r16 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.Checkpointer$FlushStats flushStats>;

        $l6 = $r16.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullBINFlush>;

        specialinvoke $r14.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r15, $l6);

        $r17 = new com.sleepycat.je.utilint.LongStat;

        $r18 = <com.sleepycat.je.recovery.CheckpointStatDefinition: com.sleepycat.je.utilint.StatDefinition CKPT_DELTA_IN_FLUSH>;

        $r19 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.Checkpointer$FlushStats flushStats>;

        $l7 = $r19.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nDeltaINFlush>;

        specialinvoke $r17.<com.sleepycat.je.utilint.LongStat: void <init>(com.sleepycat.je.utilint.StatGroup,com.sleepycat.je.utilint.StatDefinition,long)>(stats, $r18, $l7);

        $z0 = virtualinvoke config.<com.sleepycat.je.StatsConfig: boolean getClear()>();

        if $z0 == 0 goto label1;

        this.<com.sleepycat.je.recovery.Checkpointer: long nCheckpoints> = 0L;

        $r20 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.Checkpointer$FlushStats flushStats>;

        $r20.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullINFlush> = 0L;

        $r21 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.Checkpointer$FlushStats flushStats>;

        $r21.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullBINFlush> = 0L;

        $r22 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.Checkpointer$FlushStats flushStats>;

        $r22.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nDeltaINFlush> = 0L;

     label1:
        return stats;
    }

    public void wakeupAfterWrite()
    {
        com.sleepycat.je.recovery.Checkpointer this;
        long nextLsn, $l0, $l2, $l3, $l4, $l5;
        byte $b1, $b6;
        boolean $z0;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        com.sleepycat.je.log.FileManager $r1;

        this := @this: com.sleepycat.je.recovery.Checkpointer;

        $l0 = this.<com.sleepycat.je.recovery.Checkpointer: long logSizeBytesInterval>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $z0 = virtualinvoke this.<com.sleepycat.je.recovery.Checkpointer: boolean isRunning()>();

        if $z0 != 0 goto label1;

        $r0 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.log.FileManager getFileManager()>();

        nextLsn = virtualinvoke $r1.<com.sleepycat.je.log.FileManager: long getNextLsn()>();

        $l2 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointStart>;

        $l3 = this.<com.sleepycat.je.recovery.Checkpointer: long logFileMax>;

        $l4 = staticinvoke <com.sleepycat.je.utilint.DbLsn: long getNoCleaningDistance(long,long,long)>(nextLsn, $l2, $l3);

        $l5 = this.<com.sleepycat.je.recovery.Checkpointer: long logSizeBytesInterval>;

        $b6 = $l4 cmp $l5;

        if $b6 < 0 goto label1;

        virtualinvoke this.<com.sleepycat.je.recovery.Checkpointer: void wakeup()>();

     label1:
        return;
    }

    public synchronized void doCheckpoint(com.sleepycat.je.CheckpointConfig, java.lang.String)
    {
        com.sleepycat.je.recovery.Checkpointer this;
        com.sleepycat.je.CheckpointConfig config;
        java.lang.String invokingSource, $r47;
        boolean flushAll, flushExtraLevel, willDeleteFiles, $z0, $z1, $z2, $z3, success#32, traced#34, $z5, $z6, $z7;
        com.sleepycat.je.cleaner.Cleaner cleaner;
        com.sleepycat.je.cleaner.FileSelector$CheckpointStartCleanerState cleanerState;
        com.sleepycat.je.log.LogManager logManager;
        com.sleepycat.je.log.entry.SingleItemEntry startEntry, endEntry;
        long checkpointStart, $l0, $l1, $l2, $l3, $l4, $l5, firstActiveLsn#57, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19;
        com.sleepycat.je.dbi.DbTree dbTree;
        com.sleepycat.je.recovery.CheckpointEnd ckptEnd, $r27;
        com.sleepycat.je.DatabaseException e, $r42;
        java.lang.Throwable l19, $r48;
        com.sleepycat.je.dbi.EnvironmentImpl $r0, $r1, $r5, $r10, $r12, $r15, $r20, $r21, $r23, $r26, $r28, $r29, $r31, $r33, $r35, $r38, $r41, $r43, $r50;
        com.sleepycat.je.recovery.Checkpointer$FlushStats $r2, $r17;
        com.sleepycat.je.recovery.DirtyINMap $r6, $r13, $r16, $r18, $r19, $r40, $r49;
        com.sleepycat.je.log.LogEntryType $r7, $r37;
        com.sleepycat.je.recovery.CheckpointStart $r8;
        com.sleepycat.je.log.ReplicationContext $r9, $r39;
        com.sleepycat.je.txn.TxnManager $r11, $r34, $r36;
        byte $b6;
        com.sleepycat.je.utilint.TestHook $r14;
        com.sleepycat.je.cleaner.UtilizationProfile $r22;
        com.sleepycat.je.cleaner.UtilizationTracker $r24;
        java.util.Collection $r25;
        com.sleepycat.je.dbi.NodeSequence $r30, $r32;
        java.lang.StringBuilder $r44, $r45, $r46;

        this := @this: com.sleepycat.je.recovery.Checkpointer;

        config := @parameter0: com.sleepycat.je.CheckpointConfig;

        invokingSource := @parameter1: java.lang.String;

        $r0 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $z0 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReadOnly()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        $z1 = specialinvoke this.<com.sleepycat.je.recovery.Checkpointer: boolean isRunnable(com.sleepycat.je.CheckpointConfig)>(config);

        if $z1 != 0 goto label02;

        return;

     label02:
        flushAll = virtualinvoke config.<com.sleepycat.je.CheckpointConfig: boolean getMinimizeRecoveryTime()>();

        $r1 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        cleaner = virtualinvoke $r1.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.cleaner.Cleaner getCleaner()>();

        cleanerState = virtualinvoke cleaner.<com.sleepycat.je.cleaner.Cleaner: com.sleepycat.je.cleaner.FileSelector$CheckpointStartCleanerState getFilesAtCheckpointStart()>();

        $z2 = virtualinvoke cleanerState.<com.sleepycat.je.cleaner.FileSelector$CheckpointStartCleanerState: boolean isEmpty()>();

        if $z2 != 0 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        flushExtraLevel = $z3;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointMillis> = $l0;

        $r2 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.Checkpointer$FlushStats flushStats>;

        virtualinvoke $r2.<com.sleepycat.je.recovery.Checkpointer$FlushStats: void resetPerRunCounters()>();

        $l1 = this.<com.sleepycat.je.recovery.Checkpointer: long checkpointId>;

        $l2 = $l1 + 1L;

        this.<com.sleepycat.je.recovery.Checkpointer: long checkpointId> = $l2;

        $l3 = this.<com.sleepycat.je.recovery.Checkpointer: long nCheckpoints>;

        $l4 = $l3 + 1L;

        this.<com.sleepycat.je.recovery.Checkpointer: long nCheckpoints> = $l4;

        success#32 = 0;

        traced#34 = 0;

        $r5 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        logManager = virtualinvoke $r5.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.log.LogManager getLogManager()>();

        $r6 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.DirtyINMap checkpointDirtyMap>;

        virtualinvoke $r6.<com.sleepycat.je.recovery.DirtyINMap: void beginCheckpoint(boolean,boolean)>(flushAll, flushExtraLevel);

     label05:
        $r7 = <com.sleepycat.je.log.LogEntryType: com.sleepycat.je.log.LogEntryType LOG_CKPT_START>;

        $r8 = new com.sleepycat.je.recovery.CheckpointStart;

        $l5 = this.<com.sleepycat.je.recovery.Checkpointer: long checkpointId>;

        specialinvoke $r8.<com.sleepycat.je.recovery.CheckpointStart: void <init>(long,java.lang.String)>($l5, invokingSource);

        startEntry = staticinvoke <com.sleepycat.je.log.entry.SingleItemEntry: com.sleepycat.je.log.entry.SingleItemEntry create(com.sleepycat.je.log.LogEntryType,com.sleepycat.je.log.Loggable)>($r7, $r8);

        $r9 = <com.sleepycat.je.log.ReplicationContext: com.sleepycat.je.log.ReplicationContext NO_REPLICATE>;

        checkpointStart = virtualinvoke logManager.<com.sleepycat.je.log.LogManager: long log(com.sleepycat.je.log.entry.LogEntry,com.sleepycat.je.log.ReplicationContext)>(startEntry, $r9);

        $r10 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r11 = virtualinvoke $r10.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.txn.TxnManager getTxnManager()>();

        firstActiveLsn#57 = virtualinvoke $r11.<com.sleepycat.je.txn.TxnManager: long getFirstActiveLsn()>();

        $b6 = firstActiveLsn#57 cmp -1L;

        if $b6 != 0 goto label06;

        firstActiveLsn#57 = checkpointStart;

     label06:
        $r12 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r12.<com.sleepycat.je.dbi.EnvironmentImpl: void awaitVLSNConsistency()>();

        $r13 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.DirtyINMap checkpointDirtyMap>;

        virtualinvoke $r13.<com.sleepycat.je.recovery.DirtyINMap: void selectDirtyINsForCheckpoint()>();

        $r14 = <com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.utilint.TestHook beforeFlushHook>;

        staticinvoke <com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(com.sleepycat.je.utilint.TestHook)>($r14);

        $r15 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r16 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.DirtyINMap checkpointDirtyMap>;

        $z5 = this.<com.sleepycat.je.recovery.Checkpointer: boolean highPriority>;

        $r17 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.Checkpointer$FlushStats flushStats>;

        staticinvoke <com.sleepycat.je.recovery.Checkpointer: void flushDirtyNodes(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.recovery.DirtyINMap,long,boolean,com.sleepycat.je.recovery.Checkpointer$FlushStats)>($r15, $r16, checkpointStart, $z5, $r17);

        $r18 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.DirtyINMap checkpointDirtyMap>;

        virtualinvoke $r18.<com.sleepycat.je.recovery.DirtyINMap: void flushMapLNs(long)>(checkpointStart);

        $r19 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.DirtyINMap checkpointDirtyMap>;

        virtualinvoke $r19.<com.sleepycat.je.recovery.DirtyINMap: void flushRoot(long)>(checkpointStart);

        $r20 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        virtualinvoke $r20.<com.sleepycat.je.dbi.EnvironmentImpl: void preCheckpointEndFlush()>();

        $r21 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r22 = virtualinvoke $r21.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.cleaner.UtilizationProfile getUtilizationProfile()>();

        $r23 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r24 = virtualinvoke $r23.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.cleaner.UtilizationTracker getUtilizationTracker()>();

        $r25 = virtualinvoke $r24.<com.sleepycat.je.cleaner.UtilizationTracker: java.util.Collection getTrackedFiles()>();

        virtualinvoke $r22.<com.sleepycat.je.cleaner.UtilizationProfile: void flushFileUtilization(java.util.Collection)>($r25);

        $r26 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        dbTree = virtualinvoke $r26.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        $z6 = virtualinvoke cleanerState.<com.sleepycat.je.cleaner.FileSelector$CheckpointStartCleanerState: boolean isEmpty()>();

        if $z6 != 0 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        willDeleteFiles = $z7;

        $r27 = new com.sleepycat.je.recovery.CheckpointEnd;

        $r28 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $l7 = virtualinvoke $r28.<com.sleepycat.je.dbi.EnvironmentImpl: long getRootLsn()>();

        $r29 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r30 = virtualinvoke $r29.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.NodeSequence getNodeSequence()>();

        $l8 = virtualinvoke $r30.<com.sleepycat.je.dbi.NodeSequence: long getLastLocalNodeId()>();

        $r31 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r32 = virtualinvoke $r31.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.NodeSequence getNodeSequence()>();

        $l9 = virtualinvoke $r32.<com.sleepycat.je.dbi.NodeSequence: long getLastReplicatedNodeId()>();

        $l10 = virtualinvoke dbTree.<com.sleepycat.je.dbi.DbTree: long getLastLocalDbId()>();

        $l11 = virtualinvoke dbTree.<com.sleepycat.je.dbi.DbTree: long getLastReplicatedDbId()>();

        $r33 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r34 = virtualinvoke $r33.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.txn.TxnManager getTxnManager()>();

        $l12 = virtualinvoke $r34.<com.sleepycat.je.txn.TxnManager: long getLastLocalTxnId()>();

        $r35 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r36 = virtualinvoke $r35.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.txn.TxnManager getTxnManager()>();

        $l13 = virtualinvoke $r36.<com.sleepycat.je.txn.TxnManager: long getLastReplicatedTxnId()>();

        $l14 = this.<com.sleepycat.je.recovery.Checkpointer: long checkpointId>;

        specialinvoke $r27.<com.sleepycat.je.recovery.CheckpointEnd: void <init>(java.lang.String,long,long,long,long,long,long,long,long,long,long,boolean)>(invokingSource, checkpointStart, $l7, firstActiveLsn#57, $l8, $l9, $l10, $l11, $l12, $l13, $l14, willDeleteFiles);

        ckptEnd = $r27;

        $r37 = <com.sleepycat.je.log.LogEntryType: com.sleepycat.je.log.LogEntryType LOG_CKPT_END>;

        endEntry = staticinvoke <com.sleepycat.je.log.entry.SingleItemEntry: com.sleepycat.je.log.entry.SingleItemEntry create(com.sleepycat.je.log.LogEntryType,com.sleepycat.je.log.Loggable)>($r37, ckptEnd);

        $r38 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke this.<com.sleepycat.je.recovery.Checkpointer: void trace(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,boolean)>($r38, invokingSource, 1);

        traced#34 = 1;

        $l15 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointStart>;

        $l16 = this.<com.sleepycat.je.recovery.Checkpointer: long logFileMax>;

        $l17 = staticinvoke <com.sleepycat.je.utilint.DbLsn: long getNoCleaningDistance(long,long,long)>(checkpointStart, $l15, $l16);

        this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointInterval> = $l17;

        $r39 = <com.sleepycat.je.log.ReplicationContext: com.sleepycat.je.log.ReplicationContext NO_REPLICATE>;

        $l18 = virtualinvoke logManager.<com.sleepycat.je.log.LogManager: long logForceFlush(com.sleepycat.je.log.entry.LogEntry,boolean,com.sleepycat.je.log.ReplicationContext)>(endEntry, 1, $r39);

        this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointEnd> = $l18;

        this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointStart> = checkpointStart;

        success#32 = 1;

        virtualinvoke cleaner.<com.sleepycat.je.cleaner.Cleaner: void updateFilesAtCheckpointEnd(com.sleepycat.je.cleaner.FileSelector$CheckpointStartCleanerState)>(cleanerState);

     label09:
        $r40 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.DirtyINMap checkpointDirtyMap>;

        virtualinvoke $r40.<com.sleepycat.je.recovery.DirtyINMap: void reset()>();

        if traced#34 != 0 goto label15;

        $r41 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke this.<com.sleepycat.je.recovery.Checkpointer: void trace(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,boolean)>($r41, invokingSource, success#32);

        goto label15;

     label10:
        $r42 := @caughtexception;

     label11:
        e = $r42;

        $r43 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkpointId=");

        $l19 = this.<com.sleepycat.je.recovery.Checkpointer: long checkpointId>;

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l19);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void traceAndLogException(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r43, "Checkpointer", "doCheckpoint", $r47, e);

        throw e;

     label12:
        $r48 := @caughtexception;

        l19 = $r48;

     label13:
        $r49 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.DirtyINMap checkpointDirtyMap>;

        virtualinvoke $r49.<com.sleepycat.je.recovery.DirtyINMap: void reset()>();

        if traced#34 != 0 goto label14;

        $r50 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        specialinvoke this.<com.sleepycat.je.recovery.Checkpointer: void trace(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,boolean)>($r50, invokingSource, success#32);

     label14:
        throw l19;

     label15:
        return;

        catch com.sleepycat.je.DatabaseException from label05 to label09 with label10;
        catch java.lang.Throwable from label05 to label09 with label12;
        catch java.lang.Throwable from label11 to label13 with label12;
    }

    private static void flushDirtyNodes(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.recovery.DirtyINMap, long, boolean, com.sleepycat.je.recovery.Checkpointer$FlushStats)
    {
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.recovery.DirtyINMap dirtyMap;
        long checkpointStart;
        boolean highPriority, $z0;
        com.sleepycat.je.recovery.Checkpointer$FlushStats fstats;
        com.sleepycat.je.dbi.DbTree dbTree;
        java.util.HashMap dbCache, $r0;
        java.lang.Integer currentLevel;
        int currentLevelVal, maxFlushLevel, $i0;
        com.sleepycat.je.recovery.Checkpointer$CheckpointReference targetRef;
        com.sleepycat.je.dbi.DatabaseImpl db;
        java.lang.Throwable l13, $r2;
        com.sleepycat.je.dbi.DatabaseId $r1;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        dirtyMap := @parameter1: com.sleepycat.je.recovery.DirtyINMap;

        checkpointStart := @parameter2: long;

        highPriority := @parameter3: boolean;

        fstats := @parameter4: com.sleepycat.je.recovery.Checkpointer$FlushStats;

        dbTree = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        dbCache = $r0;

     label01:
        $i0 = virtualinvoke dirtyMap.<com.sleepycat.je.recovery.DirtyINMap: int getNumLevels()>();

        if $i0 <= 0 goto label06;

        currentLevel = virtualinvoke dirtyMap.<com.sleepycat.je.recovery.DirtyINMap: java.lang.Integer getLowestLevelSet()>();

        currentLevelVal = virtualinvoke currentLevel.<java.lang.Integer: int intValue()>();

        if currentLevelVal != 131072 goto label02;

        virtualinvoke dirtyMap.<com.sleepycat.je.recovery.DirtyINMap: void flushMapLNs(long)>(checkpointStart);

     label02:
        targetRef = virtualinvoke dirtyMap.<com.sleepycat.je.recovery.DirtyINMap: com.sleepycat.je.recovery.Checkpointer$CheckpointReference removeNextNode(java.lang.Integer)>(currentLevel);

        if targetRef != null goto label03;

        goto label05;

     label03:
        $r1 = targetRef.<com.sleepycat.je.recovery.Checkpointer$CheckpointReference: com.sleepycat.je.dbi.DatabaseId dbId>;

        db = virtualinvoke dbTree.<com.sleepycat.je.dbi.DbTree: com.sleepycat.je.dbi.DatabaseImpl getDb(com.sleepycat.je.dbi.DatabaseId,long,java.util.Map)>($r1, -1L, dbCache);

        if db == null goto label04;

        $z0 = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeleted()>();

        if $z0 != 0 goto label04;

        maxFlushLevel = virtualinvoke dirtyMap.<com.sleepycat.je.recovery.DirtyINMap: int getHighestFlushLevel(com.sleepycat.je.dbi.DatabaseImpl)>(db);

        if currentLevelVal > maxFlushLevel goto label04;

        staticinvoke <com.sleepycat.je.recovery.Checkpointer: void flushIN(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.recovery.Checkpointer$CheckpointReference,com.sleepycat.je.recovery.DirtyINMap,int,boolean,com.sleepycat.je.recovery.Checkpointer$FlushStats,boolean)>(db, targetRef, dirtyMap, maxFlushLevel, highPriority, fstats, 1);

        virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: void sleepAfterBackgroundIO()>();

     label04:
        virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: void checkIfInvalid()>();

        goto label02;

     label05:
        virtualinvoke dirtyMap.<com.sleepycat.je.recovery.DirtyINMap: void removeLevel(java.lang.Integer)>(currentLevel);

        goto label01;

     label06:
        virtualinvoke dbTree.<com.sleepycat.je.dbi.DbTree: void releaseDbs(java.util.Map)>(dbCache);

        goto label10;

     label07:
        $r2 := @caughtexception;

     label08:
        l13 = $r2;

     label09:
        virtualinvoke dbTree.<com.sleepycat.je.dbi.DbTree: void releaseDbs(java.util.Map)>(dbCache);

        throw l13;

     label10:
        return;

        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    private static void flushIN(com.sleepycat.je.dbi.DatabaseImpl, com.sleepycat.je.recovery.Checkpointer$CheckpointReference, com.sleepycat.je.recovery.DirtyINMap, int, boolean, com.sleepycat.je.recovery.Checkpointer$FlushStats, boolean)
    {
        com.sleepycat.je.dbi.DatabaseImpl db;
        com.sleepycat.je.recovery.Checkpointer$CheckpointReference targetRef, childRef, childRef, parentRef#186;
        com.sleepycat.je.recovery.DirtyINMap dirtyMap;
        int maxFlushLevel, targetLevel, index, parentLevel, $i5, $i6, $i7, $i8, $i9, i#146, $i20;
        boolean highPriority, allowLogSubtree, bottomLevelTarget, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z13;
        com.sleepycat.je.recovery.Checkpointer$FlushStats fstats;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.tree.Tree tree;
        com.sleepycat.je.recovery.Checkpointer$RootFlusher flusher, $r3;
        com.sleepycat.je.dbi.DbTree dbTree;
        com.sleepycat.je.CacheMode $r0;
        com.sleepycat.je.tree.SearchResult result;
        com.sleepycat.je.tree.IN parent, target, child, $r8;
        long childId, childLsn, $l0, $l1, $l2, $l3, $l4, $l10, $l12, $l13, $l15, $l17, $l18, $l21, $l22, $l23;
        java.lang.Throwable l25, $r15;
        java.util.Iterator l16;
        com.sleepycat.je.utilint.TestHook $r1;
        java.lang.AssertionError $r2, $r9, $r10, $r11;
        byte[] $r7;
        com.sleepycat.je.log.Provisional provisional#70;
        byte $b11, $b14, $b16, $b19;
        com.sleepycat.je.tree.Node $r12, $r14;
        java.util.ArrayList logSiblingsSeparately#142, $r13;
        java.lang.Object $r16;

        db := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        targetRef := @parameter1: com.sleepycat.je.recovery.Checkpointer$CheckpointReference;

        dirtyMap := @parameter2: com.sleepycat.je.recovery.DirtyINMap;

        maxFlushLevel := @parameter3: int;

        highPriority := @parameter4: boolean;

        fstats := @parameter5: com.sleepycat.je.recovery.Checkpointer$FlushStats;

        allowLogSubtree := @parameter6: boolean;

        envImpl = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.dbi.EnvironmentImpl getEnv()>();

        tree = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: com.sleepycat.je.tree.Tree getTree()>();

        targetLevel = targetRef.<com.sleepycat.je.recovery.Checkpointer$CheckpointReference: int nodeLevel>;

        $z0 = <com.sleepycat.je.recovery.Checkpointer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if targetLevel < maxFlushLevel goto label01;

        $r1 = <com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.utilint.TestHook maxFlushLevelHook>;

        $z1 = staticinvoke <com.sleepycat.je.utilint.TestHookExecute: boolean doHookIfSet(com.sleepycat.je.utilint.TestHook)>($r1);

        if $z1 != 0 goto label01;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label01:
        $z2 = targetRef.<com.sleepycat.je.recovery.Checkpointer$CheckpointReference: boolean isRoot>;

        if $z2 == 0 goto label03;

        $r3 = new com.sleepycat.je.recovery.Checkpointer$RootFlusher;

        $l0 = targetRef.<com.sleepycat.je.recovery.Checkpointer$CheckpointReference: long nodeId>;

        specialinvoke $r3.<com.sleepycat.je.recovery.Checkpointer$RootFlusher: void <init>(com.sleepycat.je.dbi.DatabaseImpl,long)>(db, $l0);

        flusher = $r3;

        virtualinvoke tree.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.IN withRootLatchedExclusive(com.sleepycat.je.tree.WithRootLatched)>(flusher);

        $z3 = virtualinvoke flusher.<com.sleepycat.je.recovery.Checkpointer$RootFlusher: boolean getFlushed()>();

        if $z3 == 0 goto label02;

        dbTree = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.dbi.DbTree getDbTree()>();

        virtualinvoke dbTree.<com.sleepycat.je.dbi.DbTree: void modifyDbRoot(com.sleepycat.je.dbi.DatabaseImpl)>(db);

        $l1 = fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullINFlushThisRun>;

        $l2 = $l1 + 1L;

        fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullINFlushThisRun> = $l2;

        $l3 = fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullINFlush>;

        $l4 = $l3 + 1L;

        fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullINFlush> = $l4;

     label02:
        $z4 = virtualinvoke flusher.<com.sleepycat.je.recovery.Checkpointer$RootFlusher: boolean stillRoot()>();

        if $z4 == 0 goto label03;

        return;

     label03:
        $r7 = targetRef.<com.sleepycat.je.recovery.Checkpointer$CheckpointReference: byte[] treeKey>;

        $i5 = targetRef.<com.sleepycat.je.recovery.Checkpointer$CheckpointReference: int nodeLevel>;

        $i6 = targetRef.<com.sleepycat.je.recovery.Checkpointer$CheckpointReference: int nodeLevel>;

        $i7 = $i6 + 1;

        $r0 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode UNCHANGED>;

        result = virtualinvoke tree.<com.sleepycat.je.tree.Tree: com.sleepycat.je.tree.SearchResult getParentINForChildIN(long,byte[],int,int,boolean,boolean,com.sleepycat.je.CacheMode,java.util.List)>(-1L, $r7, $i5, $i7, 0, 0, $r0, null);

        $r8 = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        if $r8 != null goto label04;

        return;

     label04:
        parent = result.<com.sleepycat.je.tree.SearchResult: com.sleepycat.je.tree.IN parent>;

        index = result.<com.sleepycat.je.tree.SearchResult: int index>;

        parentLevel = virtualinvoke parent.<com.sleepycat.je.tree.IN: int getLevel()>();

     label05:
        $i8 = parentLevel & 65535;

        if $i8 != 2 goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        bottomLevelTarget = $z5;

        if targetLevel < maxFlushLevel goto label08;

        provisional#70 = <com.sleepycat.je.log.Provisional: com.sleepycat.je.log.Provisional NO>;

        goto label10;

     label08:
        if bottomLevelTarget == 0 goto label09;

        provisional#70 = <com.sleepycat.je.log.Provisional: com.sleepycat.je.log.Provisional YES>;

        goto label10;

     label09:
        provisional#70 = <com.sleepycat.je.log.Provisional: com.sleepycat.je.log.Provisional BEFORE_CKPT_END>;

     label10:
        $z6 = result.<com.sleepycat.je.tree.SearchResult: boolean exactParentFound>;

        if $z6 != 0 goto label12;

        if parentLevel <= targetLevel goto label11;

        virtualinvoke dirtyMap.<com.sleepycat.je.recovery.DirtyINMap: void addIN(com.sleepycat.je.tree.IN,int,boolean,boolean)>(parent, -1, 0, 1);

     label11:
        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return;

     label12:
        $z7 = <com.sleepycat.je.recovery.Checkpointer: boolean $assertionsDisabled>;

        if $z7 != 0 goto label13;

        $i9 = targetLevel + 1;

        if parentLevel == $i9 goto label13;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label13:
        virtualinvoke dirtyMap.<com.sleepycat.je.recovery.DirtyINMap: void addIN(com.sleepycat.je.tree.IN,int,boolean,boolean)>(parent, -1, 0, 1);

        $l10 = targetRef.<com.sleepycat.je.recovery.Checkpointer$CheckpointReference: long lsn>;

        $b11 = $l10 cmp -1L;

        if $b11 == 0 goto label15;

        $l12 = targetRef.<com.sleepycat.je.recovery.Checkpointer$CheckpointReference: long lsn>;

        $l13 = virtualinvoke parent.<com.sleepycat.je.tree.IN: long getLsn(int)>(index);

        $b14 = $l12 cmp $l13;

        if $b14 == 0 goto label19;

     label14:
        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return;

     label15:
        $z8 = <com.sleepycat.je.recovery.Checkpointer: boolean $assertionsDisabled>;

        if $z8 != 0 goto label16;

        $l15 = targetRef.<com.sleepycat.je.recovery.Checkpointer$CheckpointReference: long nodeId>;

        $b16 = $l15 cmp 0L;

        if $b16 >= 0 goto label16;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label16:
        $z9 = <com.sleepycat.je.recovery.Checkpointer: boolean $assertionsDisabled>;

        if $z9 != 0 goto label17;

        $z10 = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDeferredWriteMode()>();

        if $z10 != 0 goto label17;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label17:
        $r12 = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.tree.Node getTarget(int)>(index);

        target = (com.sleepycat.je.tree.IN) $r12;

        if target == null goto label18;

        $l17 = targetRef.<com.sleepycat.je.recovery.Checkpointer$CheckpointReference: long nodeId>;

        $l18 = virtualinvoke target.<com.sleepycat.je.tree.IN: long getNodeId()>();

        $b19 = $l17 cmp $l18;

        if $b19 == 0 goto label19;

     label18:
        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return;

     label19:
        staticinvoke <com.sleepycat.je.recovery.Checkpointer: void logDirtyIN(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.tree.IN,int,com.sleepycat.je.log.Provisional,com.sleepycat.je.recovery.Checkpointer$FlushStats)>(envImpl, parent, index, provisional#70, fstats);

        if bottomLevelTarget == 0 goto label20;

        if allowLogSubtree != 0 goto label21;

     label20:
        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return;

     label21:
        if highPriority == 0 goto label22;

        $z11 = virtualinvoke db.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDurableDeferredWrite()>();

        if $z11 != 0 goto label22;

        logSiblingsSeparately#142 = null;

        goto label23;

     label22:
        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        logSiblingsSeparately#142 = $r13;

     label23:
        i#146 = 0;

     label24:
        $i20 = virtualinvoke parent.<com.sleepycat.je.tree.IN: int getNEntries()>();

        if i#146 >= $i20 goto label31;

        if i#146 != index goto label25;

        goto label30;

     label25:
        $r14 = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.tree.Node getTarget(int)>(i#146);

        child = (com.sleepycat.je.tree.IN) $r14;

        if child == null goto label26;

        $l21 = virtualinvoke child.<com.sleepycat.je.tree.IN: long getNodeId()>();

        goto label27;

     label26:
        $l21 = -1L;

     label27:
        childId = $l21;

        childLsn = virtualinvoke parent.<com.sleepycat.je.tree.IN: long getLsn(int)>(i#146);

        childRef = virtualinvoke dirtyMap.<com.sleepycat.je.recovery.DirtyINMap: com.sleepycat.je.recovery.Checkpointer$CheckpointReference removeNode(int,long,long)>(targetLevel, childLsn, childId);

        if childRef != null goto label28;

        goto label30;

     label28:
        if logSiblingsSeparately#142 == null goto label29;

        interfaceinvoke logSiblingsSeparately#142.<java.util.List: boolean add(java.lang.Object)>(childRef);

        goto label30;

     label29:
        staticinvoke <com.sleepycat.je.recovery.Checkpointer: void logDirtyIN(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.tree.IN,int,com.sleepycat.je.log.Provisional,com.sleepycat.je.recovery.Checkpointer$FlushStats)>(envImpl, parent, i#146, provisional#70, fstats);

     label30:
        i#146 = i#146 + 1;

        goto label24;

     label31:
        if parentLevel > maxFlushLevel goto label32;

        $l22 = virtualinvoke parent.<com.sleepycat.je.tree.IN: long getLastLoggedLsn()>();

        $l23 = virtualinvoke parent.<com.sleepycat.je.tree.IN: long getNodeId()>();

        parentRef#186 = virtualinvoke dirtyMap.<com.sleepycat.je.recovery.DirtyINMap: com.sleepycat.je.recovery.Checkpointer$CheckpointReference removeNode(int,long,long)>(parentLevel, $l22, $l23);

        goto label33;

     label32:
        parentRef#186 = null;

     label33:
        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label37;

     label34:
        $r15 := @caughtexception;

     label35:
        l25 = $r15;

     label36:
        virtualinvoke parent.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l25;

     label37:
        if logSiblingsSeparately#142 == null goto label39;

        l16 = interfaceinvoke logSiblingsSeparately#142.<java.util.List: java.util.Iterator iterator()>();

     label38:
        $z13 = interfaceinvoke l16.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label39;

        $r16 = interfaceinvoke l16.<java.util.Iterator: java.lang.Object next()>();

        childRef = (com.sleepycat.je.recovery.Checkpointer$CheckpointReference) $r16;

        staticinvoke <com.sleepycat.je.recovery.Checkpointer: void flushIN(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.recovery.Checkpointer$CheckpointReference,com.sleepycat.je.recovery.DirtyINMap,int,boolean,com.sleepycat.je.recovery.Checkpointer$FlushStats,boolean)>(db, childRef, dirtyMap, maxFlushLevel, highPriority, fstats, 0);

        goto label38;

     label39:
        if parentRef#186 == null goto label40;

        staticinvoke <com.sleepycat.je.recovery.Checkpointer: void flushIN(com.sleepycat.je.dbi.DatabaseImpl,com.sleepycat.je.recovery.Checkpointer$CheckpointReference,com.sleepycat.je.recovery.DirtyINMap,int,boolean,com.sleepycat.je.recovery.Checkpointer$FlushStats,boolean)>(db, parentRef#186, dirtyMap, maxFlushLevel, highPriority, fstats, 0);

     label40:
        return;

        catch java.lang.Throwable from label05 to label11 with label34;
        catch java.lang.Throwable from label12 to label14 with label34;
        catch java.lang.Throwable from label15 to label18 with label34;
        catch java.lang.Throwable from label19 to label20 with label34;
        catch java.lang.Throwable from label21 to label33 with label34;
        catch java.lang.Throwable from label35 to label36 with label34;
    }

    private static void logDirtyIN(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.tree.IN, int, com.sleepycat.je.log.Provisional, com.sleepycat.je.recovery.Checkpointer$FlushStats)
    {
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.tree.IN parent, child;
        int index;
        com.sleepycat.je.log.Provisional provisional;
        com.sleepycat.je.recovery.Checkpointer$FlushStats fstats;
        java.lang.Throwable l10, $r4;
        com.sleepycat.je.evictor.OffHeapCache ohCache;
        com.sleepycat.je.log.entry.INLogEntry logEntry;
        com.sleepycat.je.tree.Node $r0;
        com.sleepycat.je.CacheMode $r1;
        boolean $z0, $z1, $z2, isBIN#30, $z3, isDelta#36;
        com.sleepycat.je.dbi.DatabaseImpl $r2;
        long newLsn#21, $l1, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14;
        byte $b0, $b2;
        java.lang.AssertionError $r3;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        parent := @parameter1: com.sleepycat.je.tree.IN;

        index := @parameter2: int;

        provisional := @parameter3: com.sleepycat.je.log.Provisional;

        fstats := @parameter4: com.sleepycat.je.recovery.Checkpointer$FlushStats;

        $r0 = virtualinvoke parent.<com.sleepycat.je.tree.IN: com.sleepycat.je.tree.Node getTarget(int)>(index);

        child = (com.sleepycat.je.tree.IN) $r0;

        if child == null goto label13;

        $r1 = <com.sleepycat.je.CacheMode: com.sleepycat.je.CacheMode UNCHANGED>;

        virtualinvoke child.<com.sleepycat.je.tree.IN: void latch(com.sleepycat.je.CacheMode)>($r1);

     label01:
        $z0 = virtualinvoke child.<com.sleepycat.je.tree.IN: boolean getDirty()>();

        if $z0 != 0 goto label03;

     label02:
        virtualinvoke child.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        return;

     label03:
        $r2 = virtualinvoke child.<com.sleepycat.je.tree.IN: com.sleepycat.je.dbi.DatabaseImpl getDatabase()>();

        $z1 = virtualinvoke $r2.<com.sleepycat.je.dbi.DatabaseImpl: boolean isDurableDeferredWrite()>();

        if $z1 == 0 goto label04;

        virtualinvoke child.<com.sleepycat.je.tree.IN: void logDirtyChildren()>();

     label04:
        newLsn#21 = virtualinvoke child.<com.sleepycat.je.tree.IN: long log(boolean,com.sleepycat.je.log.Provisional,boolean,com.sleepycat.je.tree.IN)>(1, provisional, 1, parent);

        $z2 = <com.sleepycat.je.recovery.Checkpointer: boolean $assertionsDisabled>;

        if $z2 != 0 goto label05;

        $b0 = newLsn#21 cmp -1L;

        if $b0 != 0 goto label05;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label05:
        isBIN#30 = virtualinvoke child.<com.sleepycat.je.tree.IN: boolean isBIN()>();

        $l1 = virtualinvoke child.<com.sleepycat.je.tree.IN: long getLastDeltaLsn()>();

        $b2 = newLsn#21 cmp $l1;

        if $b2 != 0 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        isDelta#36 = $z3;

     label08:
        virtualinvoke child.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        goto label12;

     label09:
        $r4 := @caughtexception;

     label10:
        l10 = $r4;

     label11:
        virtualinvoke child.<com.sleepycat.je.tree.IN: void releaseLatch()>();

        throw l10;

     label12:
        goto label15;

     label13:
        ohCache = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.evictor.OffHeapCache getOffHeapCache()>();

        logEntry = virtualinvoke ohCache.<com.sleepycat.je.evictor.OffHeapCache: com.sleepycat.je.log.entry.INLogEntry createBINLogEntryForCheckpoint(com.sleepycat.je.tree.IN,int)>(parent, index);

        if logEntry != null goto label14;

        return;

     label14:
        isBIN#30 = 1;

        isDelta#36 = virtualinvoke logEntry.<com.sleepycat.je.log.entry.INLogEntry: boolean isBINDelta()>();

        newLsn#21 = staticinvoke <com.sleepycat.je.tree.IN: long logEntry(com.sleepycat.je.log.entry.INLogEntry,com.sleepycat.je.log.Provisional,boolean,com.sleepycat.je.tree.IN)>(logEntry, provisional, 1, parent);

        virtualinvoke ohCache.<com.sleepycat.je.evictor.OffHeapCache: void postBINLog(com.sleepycat.je.tree.IN,int,com.sleepycat.je.log.entry.INLogEntry,long)>(parent, index, logEntry, newLsn#21);

     label15:
        virtualinvoke parent.<com.sleepycat.je.tree.IN: void updateEntry(int,long,long,int)>(index, newLsn#21, -1L, 0);

        if isDelta#36 == 0 goto label16;

        $l3 = fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nDeltaINFlushThisRun>;

        $l4 = $l3 + 1L;

        fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nDeltaINFlushThisRun> = $l4;

        $l5 = fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nDeltaINFlush>;

        $l6 = $l5 + 1L;

        fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nDeltaINFlush> = $l6;

        goto label17;

     label16:
        $l7 = fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullINFlushThisRun>;

        $l8 = $l7 + 1L;

        fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullINFlushThisRun> = $l8;

        $l9 = fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullINFlush>;

        $l10 = $l9 + 1L;

        fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullINFlush> = $l10;

        if isBIN#30 == 0 goto label17;

        $l11 = fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullBINFlush>;

        $l12 = $l11 + 1L;

        fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullBINFlush> = $l12;

        $l13 = fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullBINFlushThisRun>;

        $l14 = $l13 + 1L;

        fstats.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullBINFlushThisRun> = $l14;

     label17:
        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private boolean isRunnable(com.sleepycat.je.CheckpointConfig)
    {
        com.sleepycat.je.recovery.Checkpointer this;
        com.sleepycat.je.CheckpointConfig config;
        long lastUsedLsn, useBytesInterval#2, useTimeInterval#4, nextLsn#6, $l1, $l3, $l5, $l7, $l15, $l18, $l19, $l20, $l23, $l24, $l25, $l27, $l30, $l32, $l34, $l36;
        java.lang.Throwable l11, $r64;
        java.lang.StringBuilder sb, $r2, sb#20, $r3, $r5, $r11, $r13, $r15, $r22, sb#83, $r23, $r25, $r31, $r33, $r35, $r46, sb#199, $r47, $r49, $r55, $r57, $r59, $r67, $r68, $r70, $r76, $r78, $r80;
        boolean runnable#8, $z0, l9#13, $z1, $z2, $z3, $z4, l9#76, $z5, $z6, l9#192, $z7, $z8, $z9, $z10;
        java.util.logging.Logger $r0, $r17, $r20, $r37, $r44, $r61, $r65, $r82;
        java.util.logging.Level $r1, $r21, $r45, $r66;
        byte $b0, $b2, $b4, $b6, $b16, $b17, $b21, $b22, $b26, $b29, $b31, $b33, $b35;
        java.lang.String $r6, $r9, $r19, $r26, $r29, $r39, $r50, $r53, $r63, $r71, $r74, $r84;
        com.sleepycat.je.dbi.EnvironmentImpl $r18, $r38, $r40, $r42, $r62, $r83;
        int $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i28;
        com.sleepycat.je.log.FileManager $r41, $r43;

        this := @this: com.sleepycat.je.recovery.Checkpointer;

        config := @parameter0: com.sleepycat.je.CheckpointConfig;

        useBytesInterval#2 = 0L;

        useTimeInterval#4 = 0L;

        nextLsn#6 = -1L;

        runnable#8 = 0;

     label01:
        $z0 = virtualinvoke config.<com.sleepycat.je.CheckpointConfig: boolean getForce()>();

        if $z0 == 0 goto label06;

        runnable#8 = 1;

        l9#13 = 1;

     label02:
        $r0 = this.<com.sleepycat.je.recovery.Checkpointer: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $z1 = virtualinvoke $r0.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z1 == 0 goto label05;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        sb#20 = $r2;

        $r3 = virtualinvoke sb#20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size interval=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(useBytesInterval#2);

        $b0 = nextLsn#6 cmp -1L;

        if $b0 == 0 goto label03;

        $r5 = virtualinvoke sb#20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nextLsn=");

        $r6 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(nextLsn#6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label03:
        $l1 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointEnd>;

        $b2 = $l1 cmp -1L;

        if $b2 == 0 goto label04;

        virtualinvoke sb#20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastCkpt=");

        $l3 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointEnd>;

        $r9 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l3);

        virtualinvoke sb#20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label04:
        $r11 = virtualinvoke sb#20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" time interval=");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(useTimeInterval#4);

        $r13 = virtualinvoke sb#20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" force=");

        $z2 = virtualinvoke config.<com.sleepycat.je.CheckpointConfig: boolean getForce()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r15 = virtualinvoke sb#20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" runnable=");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(runnable#8);

        $r17 = this.<com.sleepycat.je.recovery.Checkpointer: java.util.logging.Logger logger>;

        $r18 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r19 = virtualinvoke sb#20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void finest(java.util.logging.Logger,com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r17, $r18, $r19);

     label05:
        return l9#13;

     label06:
        $z3 = this.<com.sleepycat.je.recovery.Checkpointer: boolean wakeupAfterNoWrites>;

        if $z3 == 0 goto label11;

        $z4 = specialinvoke this.<com.sleepycat.je.recovery.Checkpointer: boolean needCheckpointForCleanedFiles()>();

        if $z4 == 0 goto label11;

        runnable#8 = 1;

        l9#76 = 1;

     label07:
        $r20 = this.<com.sleepycat.je.recovery.Checkpointer: java.util.logging.Logger logger>;

        $r21 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $z5 = virtualinvoke $r20.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r21);

        if $z5 == 0 goto label10;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        sb#83 = $r22;

        $r23 = virtualinvoke sb#83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size interval=");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(useBytesInterval#2);

        $b4 = nextLsn#6 cmp -1L;

        if $b4 == 0 goto label08;

        $r25 = virtualinvoke sb#83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nextLsn=");

        $r26 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(nextLsn#6);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

     label08:
        $l5 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointEnd>;

        $b6 = $l5 cmp -1L;

        if $b6 == 0 goto label09;

        virtualinvoke sb#83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastCkpt=");

        $l7 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointEnd>;

        $r29 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l7);

        virtualinvoke sb#83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

     label09:
        $r31 = virtualinvoke sb#83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" time interval=");

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(useTimeInterval#4);

        $r33 = virtualinvoke sb#83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" force=");

        $z6 = virtualinvoke config.<com.sleepycat.je.CheckpointConfig: boolean getForce()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r35 = virtualinvoke sb#83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" runnable=");

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(runnable#8);

        $r37 = this.<com.sleepycat.je.recovery.Checkpointer: java.util.logging.Logger logger>;

        $r38 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r39 = virtualinvoke sb#83.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void finest(java.util.logging.Logger,com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r37, $r38, $r39);

     label10:
        return l9#76;

     label11:
        $i8 = virtualinvoke config.<com.sleepycat.je.CheckpointConfig: int getKBytes()>();

        if $i8 == 0 goto label12;

        $i9 = virtualinvoke config.<com.sleepycat.je.CheckpointConfig: int getKBytes()>();

        $i10 = $i9 << 10;

        useBytesInterval#2 = (long) $i10;

        goto label15;

     label12:
        $i11 = virtualinvoke config.<com.sleepycat.je.CheckpointConfig: int getMinutes()>();

        if $i11 == 0 goto label13;

        $i12 = virtualinvoke config.<com.sleepycat.je.CheckpointConfig: int getMinutes()>();

        $i13 = $i12 * 60;

        $i14 = $i13 * 1000;

        useTimeInterval#4 = (long) $i14;

        goto label15;

     label13:
        $l15 = this.<com.sleepycat.je.recovery.Checkpointer: long logSizeBytesInterval>;

        $b16 = $l15 cmp 0L;

        if $b16 == 0 goto label14;

        useBytesInterval#2 = this.<com.sleepycat.je.recovery.Checkpointer: long logSizeBytesInterval>;

        goto label15;

     label14:
        useTimeInterval#4 = this.<com.sleepycat.je.recovery.Checkpointer: long timeInterval>;

     label15:
        $b17 = useBytesInterval#2 cmp 0L;

        if $b17 == 0 goto label16;

        $r40 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r41 = virtualinvoke $r40.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.log.FileManager getFileManager()>();

        nextLsn#6 = virtualinvoke $r41.<com.sleepycat.je.log.FileManager: long getNextLsn()>();

        $l18 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointStart>;

        $l19 = this.<com.sleepycat.je.recovery.Checkpointer: long logFileMax>;

        $l20 = staticinvoke <com.sleepycat.je.utilint.DbLsn: long getNoCleaningDistance(long,long,long)>(nextLsn#6, $l18, $l19);

        $b21 = $l20 cmp useBytesInterval#2;

        if $b21 < 0 goto label17;

        runnable#8 = 1;

        goto label17;

     label16:
        $b22 = useTimeInterval#4 cmp 0L;

        if $b22 == 0 goto label17;

        $r42 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r43 = virtualinvoke $r42.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.log.FileManager getFileManager()>();

        lastUsedLsn = virtualinvoke $r43.<com.sleepycat.je.log.FileManager: long getLastUsedLsn()>();

        $l23 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l24 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointMillis>;

        $l25 = $l23 - $l24;

        $b26 = $l25 cmp useTimeInterval#4;

        if $b26 < 0 goto label17;

        $l27 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointEnd>;

        $i28 = staticinvoke <com.sleepycat.je.utilint.DbLsn: int compareTo(long,long)>(lastUsedLsn, $l27);

        if $i28 == 0 goto label17;

        runnable#8 = 1;

     label17:
        l9#192 = runnable#8;

     label18:
        $r44 = this.<com.sleepycat.je.recovery.Checkpointer: java.util.logging.Logger logger>;

        $r45 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $z7 = virtualinvoke $r44.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r45);

        if $z7 == 0 goto label21;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        sb#199 = $r46;

        $r47 = virtualinvoke sb#199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size interval=");

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(useBytesInterval#2);

        $b29 = nextLsn#6 cmp -1L;

        if $b29 == 0 goto label19;

        $r49 = virtualinvoke sb#199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nextLsn=");

        $r50 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(nextLsn#6);

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

     label19:
        $l30 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointEnd>;

        $b31 = $l30 cmp -1L;

        if $b31 == 0 goto label20;

        virtualinvoke sb#199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastCkpt=");

        $l32 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointEnd>;

        $r53 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l32);

        virtualinvoke sb#199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

     label20:
        $r55 = virtualinvoke sb#199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" time interval=");

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(useTimeInterval#4);

        $r57 = virtualinvoke sb#199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" force=");

        $z8 = virtualinvoke config.<com.sleepycat.je.CheckpointConfig: boolean getForce()>();

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r59 = virtualinvoke sb#199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" runnable=");

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(runnable#8);

        $r61 = this.<com.sleepycat.je.recovery.Checkpointer: java.util.logging.Logger logger>;

        $r62 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r63 = virtualinvoke sb#199.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void finest(java.util.logging.Logger,com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r61, $r62, $r63);

     label21:
        return l9#192;

     label22:
        $r64 := @caughtexception;

     label23:
        l11 = $r64;

     label24:
        $r65 = this.<com.sleepycat.je.recovery.Checkpointer: java.util.logging.Logger logger>;

        $r66 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $z9 = virtualinvoke $r65.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r66);

        if $z9 == 0 goto label27;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        sb = $r67;

        $r68 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size interval=");

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(useBytesInterval#2);

        $b33 = nextLsn#6 cmp -1L;

        if $b33 == 0 goto label25;

        $r70 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nextLsn=");

        $r71 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>(nextLsn#6);

        virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

     label25:
        $l34 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointEnd>;

        $b35 = $l34 cmp -1L;

        if $b35 == 0 goto label26;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastCkpt=");

        $l36 = this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointEnd>;

        $r74 = staticinvoke <com.sleepycat.je.utilint.DbLsn: java.lang.String getNoFormatString(long)>($l36);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r74);

     label26:
        $r76 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" time interval=");

        virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(useTimeInterval#4);

        $r78 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" force=");

        $z10 = virtualinvoke config.<com.sleepycat.je.CheckpointConfig: boolean getForce()>();

        virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z10);

        $r80 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" runnable=");

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(runnable#8);

        $r82 = this.<com.sleepycat.je.recovery.Checkpointer: java.util.logging.Logger logger>;

        $r83 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r84 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void finest(java.util.logging.Logger,com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String)>($r82, $r83, $r84);

     label27:
        throw l11;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label11 to label18 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private void trace(com.sleepycat.je.dbi.EnvironmentImpl, java.lang.String, boolean)
    {
        com.sleepycat.je.recovery.Checkpointer this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        java.lang.String invokingSource, $r15;
        boolean success;
        java.lang.StringBuilder sb, $r1, $r2, $r4, $r6;
        java.util.logging.Level $r0;
        long $l0, $l1, $l2;
        com.sleepycat.je.recovery.Checkpointer$FlushStats $r9, $r12;
        java.util.logging.Logger $r14;

        this := @this: com.sleepycat.je.recovery.Checkpointer;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        invokingSource := @parameter1: java.lang.String;

        success := @parameter2: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        sb = $r1;

        $r2 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checkpoint ");

        $l0 = this.<com.sleepycat.je.recovery.Checkpointer: long checkpointId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": source=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(invokingSource);

        $r6 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" success=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(success);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nFullINFlushThisRun=");

        $r9 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.Checkpointer$FlushStats flushStats>;

        $l1 = $r9.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nFullINFlushThisRun>;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nDeltaINFlushThisRun=");

        $r12 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.Checkpointer$FlushStats flushStats>;

        $l2 = $r12.<com.sleepycat.je.recovery.Checkpointer$FlushStats: long nDeltaINFlushThisRun>;

        virtualinvoke sb.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r14 = this.<com.sleepycat.je.recovery.Checkpointer: java.util.logging.Logger logger>;

        $r0 = <java.util.logging.Level: java.util.logging.Level CONFIG>;

        $r15 = virtualinvoke sb.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void logMsg(java.util.logging.Logger,com.sleepycat.je.dbi.EnvironmentImpl,java.util.logging.Level,java.lang.String)>($r14, envImpl, $r0, $r15);

        return;
    }

    private boolean needCheckpointForCleanedFiles()
    {
        com.sleepycat.je.recovery.Checkpointer this;
        com.sleepycat.je.dbi.EnvironmentImpl $r0;
        com.sleepycat.je.cleaner.Cleaner $r1;
        com.sleepycat.je.cleaner.FileSelector $r2;
        boolean $z0;

        this := @this: com.sleepycat.je.recovery.Checkpointer;

        $r0 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.dbi.EnvironmentImpl envImpl>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.cleaner.Cleaner getCleaner()>();

        $r2 = virtualinvoke $r1.<com.sleepycat.je.cleaner.Cleaner: com.sleepycat.je.cleaner.FileSelector getFileSelector()>();

        $z0 = virtualinvoke $r2.<com.sleepycat.je.cleaner.FileSelector: boolean isCheckpointNeeded()>();

        return $z0;
    }

    public void syncDatabase(com.sleepycat.je.dbi.EnvironmentImpl, com.sleepycat.je.dbi.DatabaseImpl, boolean)
    {
        com.sleepycat.je.recovery.Checkpointer this;
        com.sleepycat.je.dbi.EnvironmentImpl envImpl;
        com.sleepycat.je.dbi.DatabaseImpl dbImpl;
        boolean flushLog, $z0;
        com.sleepycat.je.recovery.DirtyINMap dirtyMap, $r0;
        com.sleepycat.je.recovery.Checkpointer$FlushStats fstats, $r1;
        com.sleepycat.je.DatabaseException e, $r3;
        java.lang.Throwable l7, $r9;
        int $i0;
        com.sleepycat.je.log.LogManager $r2;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6, $r8;

        this := @this: com.sleepycat.je.recovery.Checkpointer;

        envImpl := @parameter0: com.sleepycat.je.dbi.EnvironmentImpl;

        dbImpl := @parameter1: com.sleepycat.je.dbi.DatabaseImpl;

        flushLog := @parameter2: boolean;

        $z0 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = new com.sleepycat.je.recovery.DirtyINMap;

        specialinvoke $r0.<com.sleepycat.je.recovery.DirtyINMap: void <init>(com.sleepycat.je.dbi.EnvironmentImpl)>(envImpl);

        dirtyMap = $r0;

        $r1 = new com.sleepycat.je.recovery.Checkpointer$FlushStats;

        specialinvoke $r1.<com.sleepycat.je.recovery.Checkpointer$FlushStats: void <init>()>();

        fstats = $r1;

     label2:
        virtualinvoke dirtyMap.<com.sleepycat.je.recovery.DirtyINMap: void selectDirtyINsForDbSync(com.sleepycat.je.dbi.DatabaseImpl)>(dbImpl);

        $i0 = virtualinvoke dirtyMap.<com.sleepycat.je.recovery.DirtyINMap: int getNumEntries()>();

        if $i0 <= 0 goto label3;

        staticinvoke <com.sleepycat.je.recovery.Checkpointer: void flushDirtyNodes(com.sleepycat.je.dbi.EnvironmentImpl,com.sleepycat.je.recovery.DirtyINMap,long,boolean,com.sleepycat.je.recovery.Checkpointer$FlushStats)>(envImpl, dirtyMap, -1L, 0, fstats);

        if flushLog == 0 goto label3;

        $r2 = virtualinvoke envImpl.<com.sleepycat.je.dbi.EnvironmentImpl: com.sleepycat.je.log.LogManager getLogManager()>();

        virtualinvoke $r2.<com.sleepycat.je.log.LogManager: void flushSync()>();

     label3:
        virtualinvoke dirtyMap.<com.sleepycat.je.recovery.DirtyINMap: void reset()>();

        goto label8;

     label4:
        $r3 := @caughtexception;

     label5:
        e = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("of ");

        $r6 = virtualinvoke dbImpl.<com.sleepycat.je.dbi.DatabaseImpl: java.lang.String getDebugName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.sleepycat.je.utilint.LoggerUtils: void traceAndLogException(com.sleepycat.je.dbi.EnvironmentImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>(envImpl, "Checkpointer", "syncDatabase", $r8, e);

        throw e;

     label6:
        $r9 := @caughtexception;

        l7 = $r9;

     label7:
        virtualinvoke dirtyMap.<com.sleepycat.je.recovery.DirtyINMap: void reset()>();

        throw l7;

     label8:
        return;

        catch com.sleepycat.je.DatabaseException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    public synchronized void setCheckpointId(long)
    {
        com.sleepycat.je.recovery.Checkpointer this;
        long lastCheckpointId;

        this := @this: com.sleepycat.je.recovery.Checkpointer;

        lastCheckpointId := @parameter0: long;

        this.<com.sleepycat.je.recovery.Checkpointer: long checkpointId> = lastCheckpointId;

        return;
    }

    public void initIntervals(long, long, long)
    {
        com.sleepycat.je.recovery.Checkpointer this;
        long lastCheckpointStart, lastCheckpointEnd, lastCheckpointMillis;

        this := @this: com.sleepycat.je.recovery.Checkpointer;

        lastCheckpointStart := @parameter0: long;

        lastCheckpointEnd := @parameter1: long;

        lastCheckpointMillis := @parameter2: long;

        this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointStart> = lastCheckpointStart;

        this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointEnd> = lastCheckpointEnd;

        this.<com.sleepycat.je.recovery.Checkpointer: long lastCheckpointMillis> = lastCheckpointMillis;

        return;
    }

    public com.sleepycat.je.log.Provisional coordinateEvictionWithCheckpoint(com.sleepycat.je.dbi.DatabaseImpl, int, com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.recovery.Checkpointer this;
        com.sleepycat.je.dbi.DatabaseImpl db;
        int targetLevel;
        com.sleepycat.je.tree.IN parent;
        com.sleepycat.je.recovery.DirtyINMap $r0;
        com.sleepycat.je.log.Provisional $r1;

        this := @this: com.sleepycat.je.recovery.Checkpointer;

        db := @parameter0: com.sleepycat.je.dbi.DatabaseImpl;

        targetLevel := @parameter1: int;

        parent := @parameter2: com.sleepycat.je.tree.IN;

        $r0 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.DirtyINMap checkpointDirtyMap>;

        $r1 = virtualinvoke $r0.<com.sleepycat.je.recovery.DirtyINMap: com.sleepycat.je.log.Provisional coordinateEvictionWithCheckpoint(com.sleepycat.je.dbi.DatabaseImpl,int,com.sleepycat.je.tree.IN)>(db, targetLevel, parent);

        return $r1;
    }

    public void coordinateSplitWithCheckpoint(com.sleepycat.je.tree.IN)
    {
        com.sleepycat.je.recovery.Checkpointer this;
        com.sleepycat.je.tree.IN newSibling;
        com.sleepycat.je.recovery.DirtyINMap $r0;

        this := @this: com.sleepycat.je.recovery.Checkpointer;

        newSibling := @parameter0: com.sleepycat.je.tree.IN;

        $r0 = this.<com.sleepycat.je.recovery.Checkpointer: com.sleepycat.je.recovery.DirtyINMap checkpointDirtyMap>;

        virtualinvoke $r0.<com.sleepycat.je.recovery.DirtyINMap: void coordinateSplitWithCheckpoint(com.sleepycat.je.tree.IN)>(newSibling);

        return;
    }


