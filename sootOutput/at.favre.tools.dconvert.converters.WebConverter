    public void <init>()
    {
        at.favre.tools.dconvert.converters.WebConverter this;

        this := @this: at.favre.tools.dconvert.converters.WebConverter;

        specialinvoke this.<at.favre.tools.dconvert.converters.APlatformConverter: void <init>()>();

        return;
    }

    public java.lang.String getConverterName()
    {
        at.favre.tools.dconvert.converters.WebConverter this;

        this := @this: at.favre.tools.dconvert.converters.WebConverter;

        return "web-converter";
    }

    public java.util.List usedOutputDensities(at.favre.tools.dconvert.arg.Arguments)
    {
        at.favre.tools.dconvert.converters.WebConverter this;
        at.favre.tools.dconvert.arg.Arguments arguments;
        java.util.List $r0;

        this := @this: at.favre.tools.dconvert.converters.WebConverter;

        arguments := @parameter0: at.favre.tools.dconvert.arg.Arguments;

        $r0 = staticinvoke <at.favre.tools.dconvert.converters.WebConverter: java.util.List getWebDescriptors()>();

        return $r0;
    }

    public java.io.File createMainSubFolder(java.io.File, java.lang.String, at.favre.tools.dconvert.arg.Arguments)
    {
        at.favre.tools.dconvert.converters.WebConverter this;
        java.lang.String targetImageFileName, $r2, $r4;
        at.favre.tools.dconvert.arg.Arguments arguments;
        java.io.File destinationFolder#1, $r1, $r3, $r5;
        java.util.Set $r0;
        int $i0;
        boolean $z0, $z1;

        this := @this: at.favre.tools.dconvert.converters.WebConverter;

        destinationFolder#1 := @parameter0: java.io.File;

        targetImageFileName := @parameter1: java.lang.String;

        arguments := @parameter2: at.favre.tools.dconvert.arg.Arguments;

        $r0 = arguments.<at.favre.tools.dconvert.arg.Arguments: java.util.Set platform>;

        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 1 goto label1;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(destinationFolder#1, "web");

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $z0 = arguments.<at.favre.tools.dconvert.arg.Arguments: boolean dryRun>;

        destinationFolder#1 = staticinvoke <at.favre.tools.dconvert.util.MiscUtil: java.io.File createAndCheckFolder(java.lang.String,boolean)>($r2, $z0);

     label1:
        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(destinationFolder#1, "img");

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $z1 = arguments.<at.favre.tools.dconvert.arg.Arguments: boolean dryRun>;

        $r5 = staticinvoke <at.favre.tools.dconvert.util.MiscUtil: java.io.File createAndCheckFolder(java.lang.String,boolean)>($r4, $z1);

        return $r5;
    }

    public void onPreExecute(java.io.File, java.lang.String, java.util.List, at.favre.tools.dconvert.arg.ImageType, at.favre.tools.dconvert.arg.Arguments) throws java.lang.Exception
    {
        at.favre.tools.dconvert.converters.WebConverter this;
        java.io.File dstFolder;
        java.lang.String targetFileName;
        java.util.List densityDescriptions;
        at.favre.tools.dconvert.arg.ImageType imageType;
        at.favre.tools.dconvert.arg.Arguments arguments;

        this := @this: at.favre.tools.dconvert.converters.WebConverter;

        dstFolder := @parameter0: java.io.File;

        targetFileName := @parameter1: java.lang.String;

        densityDescriptions := @parameter2: java.util.List;

        imageType := @parameter3: at.favre.tools.dconvert.arg.ImageType;

        arguments := @parameter4: at.favre.tools.dconvert.arg.Arguments;

        return;
    }

    public volatile java.io.File createFolderForOutputFile(java.io.File, at.favre.tools.dconvert.converters.descriptors.DensityDescriptor, java.awt.Dimension, java.lang.String, at.favre.tools.dconvert.arg.Arguments)
    {
        at.favre.tools.dconvert.converters.WebConverter this;
        java.io.File l1, $r1;
        at.favre.tools.dconvert.converters.descriptors.DensityDescriptor l2;
        java.awt.Dimension l3;
        java.lang.String l4;
        at.favre.tools.dconvert.arg.Arguments l5;
        at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor $r0;

        this := @this: at.favre.tools.dconvert.converters.WebConverter;

        l1 := @parameter0: java.io.File;

        l2 := @parameter1: at.favre.tools.dconvert.converters.descriptors.DensityDescriptor;

        l3 := @parameter2: java.awt.Dimension;

        l4 := @parameter3: java.lang.String;

        l5 := @parameter4: at.favre.tools.dconvert.arg.Arguments;

        $r0 = (at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor) l2;

        $r1 = virtualinvoke this.<at.favre.tools.dconvert.converters.WebConverter: java.io.File createFolderForOutputFile(java.io.File,at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor,java.awt.Dimension,java.lang.String,at.favre.tools.dconvert.arg.Arguments)>(l1, $r0, l3, l4, l5);

        return $r1;
    }

    public volatile java.lang.String createDestinationFileNameWithoutExtension(at.favre.tools.dconvert.converters.descriptors.DensityDescriptor, java.awt.Dimension, java.lang.String, at.favre.tools.dconvert.arg.Arguments)
    {
        at.favre.tools.dconvert.converters.WebConverter this;
        at.favre.tools.dconvert.converters.descriptors.DensityDescriptor l1;
        java.awt.Dimension l2;
        java.lang.String l3, $r1;
        at.favre.tools.dconvert.arg.Arguments l4;
        at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor $r0;

        this := @this: at.favre.tools.dconvert.converters.WebConverter;

        l1 := @parameter0: at.favre.tools.dconvert.converters.descriptors.DensityDescriptor;

        l2 := @parameter1: java.awt.Dimension;

        l3 := @parameter2: java.lang.String;

        l4 := @parameter3: at.favre.tools.dconvert.arg.Arguments;

        $r0 = (at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor) l1;

        $r1 = virtualinvoke this.<at.favre.tools.dconvert.converters.WebConverter: java.lang.String createDestinationFileNameWithoutExtension(at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor,java.awt.Dimension,java.lang.String,at.favre.tools.dconvert.arg.Arguments)>($r0, l2, l3, l4);

        return $r1;
    }

    public void onPostExecute(at.favre.tools.dconvert.arg.Arguments)
    {
        at.favre.tools.dconvert.converters.WebConverter this;
        at.favre.tools.dconvert.arg.Arguments arguments;

        this := @this: at.favre.tools.dconvert.converters.WebConverter;

        arguments := @parameter0: at.favre.tools.dconvert.arg.Arguments;

        return;
    }

    public static java.util.List getWebDescriptors()
    {
        java.util.ArrayList list, $r0;
        at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor $r1, $r2;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        list = $r0;

        $r1 = new at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor;

        specialinvoke $r1.<at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor: void <init>(float,java.lang.String,java.lang.String)>(1.0F, "1x", "-1x");

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r2 = new at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor;

        specialinvoke $r2.<at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor: void <init>(float,java.lang.String,java.lang.String)>(2.0F, "2x", "-2x");

        interfaceinvoke list.<java.util.List: boolean add(java.lang.Object)>($r2);

        return list;
    }

    public java.lang.String createDestinationFileNameWithoutExtension(at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor, java.awt.Dimension, java.lang.String, at.favre.tools.dconvert.arg.Arguments)
    {
        at.favre.tools.dconvert.converters.WebConverter this;
        at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor density;
        java.awt.Dimension dimension;
        java.lang.String targetFileName, $r2, $r4;
        at.favre.tools.dconvert.arg.Arguments arguments;
        java.lang.StringBuilder $r0, $r1, $r3;

        this := @this: at.favre.tools.dconvert.converters.WebConverter;

        density := @parameter0: at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor;

        dimension := @parameter1: java.awt.Dimension;

        targetFileName := @parameter2: java.lang.String;

        arguments := @parameter3: at.favre.tools.dconvert.arg.Arguments;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(targetFileName);

        $r2 = density.<at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor: java.lang.String postFix>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public java.io.File createFolderForOutputFile(java.io.File, at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor, java.awt.Dimension, java.lang.String, at.favre.tools.dconvert.arg.Arguments)
    {
        at.favre.tools.dconvert.converters.WebConverter this;
        java.io.File mainSubFolder;
        at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor density;
        java.awt.Dimension dimension;
        java.lang.String targetFileName;
        at.favre.tools.dconvert.arg.Arguments arguments;

        this := @this: at.favre.tools.dconvert.converters.WebConverter;

        mainSubFolder := @parameter0: java.io.File;

        density := @parameter1: at.favre.tools.dconvert.converters.descriptors.PostfixDescriptor;

        dimension := @parameter2: java.awt.Dimension;

        targetFileName := @parameter3: java.lang.String;

        arguments := @parameter4: at.favre.tools.dconvert.arg.Arguments;

        return mainSubFolder;
    }


