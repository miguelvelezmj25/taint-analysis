    public static java.lang.String doubleToString(double, int)
    {
        double value;
        int afterDecimalPoint;
        java.lang.ThreadLocal $r0, $r3;
        java.lang.Object $r1, $r4;
        java.text.DecimalFormat $r2, $r5;
        java.lang.String $r6;

        value := @parameter0: double;

        afterDecimalPoint := @parameter1: int;

        $r0 = <weka.core.Utils: java.lang.ThreadLocal DF>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (java.text.DecimalFormat) $r1;

        virtualinvoke $r2.<java.text.DecimalFormat: void setMaximumFractionDigits(int)>(afterDecimalPoint);

        $r3 = <weka.core.Utils: java.lang.ThreadLocal DF>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r5 = (java.text.DecimalFormat) $r4;

        $r6 = virtualinvoke $r5.<java.text.DecimalFormat: java.lang.String format(double)>(value);

        return $r6;
    }

    public static void checkForRemainingOptions(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] options, l3;
        java.lang.StringBuffer text, $r0;
        int l4, illegalOptionsFound#2, l5#10, $i0;
        java.lang.String option, $r4, $r10;
        java.lang.StringBuilder $r1, $r2, $r3, $r7, $r8, $r9;
        java.lang.Exception $r6;

        options := @parameter0: java.lang.String[];

        illegalOptionsFound#2 = 0;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        text = $r0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(options);

        if options != null goto label1;

        return;

     label1:
        l3 = options;

        l4 = lengthof l3;

        l5#10 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l5#10 >= l4 goto label4;

        option = l3[l5#10];

        $i0 = virtualinvoke option.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label3;

        illegalOptionsFound#2 = illegalOptionsFound#2 + 1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(option);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke text.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label3:
        l5#10 = l5#10 + 1;

        goto label2;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(illegalOptionsFound#2);

        if illegalOptionsFound#2 <= 0 goto label5;

        $r6 = new java.lang.Exception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal options: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(text);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>($r10);

        throw $r6;

     label5:
        return;
    }

    public static boolean getFlag(java.lang.String, java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String flag;
        java.lang.String[] options;
        int pos;
        boolean $z0;

        flag := @parameter0: java.lang.String;

        options := @parameter1: java.lang.String[];

        pos = staticinvoke <weka.core.Utils: int getOptionPos(java.lang.String,java.lang.String[])>(flag, options);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pos);

        if pos <= -1 goto label1;

        options[pos] = "";

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(pos);

        if pos <= -1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static java.lang.String getOption(java.lang.String, java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String flag, newString, $r0, $r4, $r10, $r11, $r12, $r13;
        java.lang.String[] options;
        int i, $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r7, $r8, $r9;
        boolean $z0;
        java.lang.Exception $r5;
        char $c4;

        flag := @parameter0: java.lang.String;

        options := @parameter1: java.lang.String[];

        i = staticinvoke <weka.core.Utils: int getOptionPos(java.lang.String,java.lang.String[])>(flag, options);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i);

        if i <= -1 goto label3;

        $r0 = options[i];

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(flag);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        $i0 = i + 1;

        $i1 = lengthof options;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 != $i1 goto label1;

        $r5 = new java.lang.Exception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No value given for -");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(flag);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" option.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        options[i] = "";

        $r11 = new java.lang.String;

        $i2 = i + 1;

        $r12 = options[$i2];

        specialinvoke $r11.<java.lang.String: void <init>(java.lang.String)>($r12);

        newString = $r11;

        $i3 = i + 1;

        options[$i3] = "";

        return newString;

     label2:
        $r13 = options[i];

        $c4 = virtualinvoke $r13.<java.lang.String: char charAt(int)>(1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c4);

        if $c4 != 45 goto label3;

        return "";

     label3:
        return "";
    }

    public static java.lang.String getOption(char, java.lang.String[]) throws java.lang.Exception
    {
        char flag;
        java.lang.String[] options;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3, $r4;

        flag := @parameter0: char;

        options := @parameter1: java.lang.String[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(flag);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <weka.core.Utils: java.lang.String getOption(java.lang.String,java.lang.String[])>($r3, options);

        return $r4;
    }

    public static boolean getFlag(char, java.lang.String[]) throws java.lang.Exception
    {
        char flag;
        java.lang.String[] options;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;
        boolean $z0;

        flag := @parameter0: char;

        options := @parameter1: java.lang.String[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(flag);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = staticinvoke <weka.core.Utils: boolean getFlag(java.lang.String,java.lang.String[])>($r3, options);

        return $z0;
    }

    static void <clinit>()
    {
        double $d0;
        weka.core.Utils$1 $r0;

        $d0 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        <weka.core.Utils: double log2> = $d0;

        <weka.core.Utils: double SMALL> = 1.0E-6;

        $r0 = new weka.core.Utils$1;

        specialinvoke $r0.<weka.core.Utils$1: void <init>()>();

        <weka.core.Utils: java.lang.ThreadLocal DF> = $r0;

        return;
    }

    public static int getOptionPos(java.lang.String, java.lang.String[])
    {
        java.lang.String flag, $r0, $r1, $r2, $r5, $r9, $r10;
        java.lang.String[] options;
        java.lang.NumberFormatException e, $r4;
        int i#4, $i0, $i1;
        char $c2, $c3;
        java.lang.StringBuilder $r6, $r7, $r8;
        boolean $z0;

        flag := @parameter0: java.lang.String;

        options := @parameter1: java.lang.String[];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(options);

        if options != null goto label1;

        return -1;

     label1:
        i#4 = 0;

     label2:
        $i0 = lengthof options;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#4 >= $i0 goto label8;

        $r0 = options[i#4];

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label7;

        $r1 = options[i#4];

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c2);

        if $c2 != 45 goto label7;

     label3:
        $r2 = options[i#4];

        staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r2);

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        e = $r4;

        $r5 = options[i#4];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(flag);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label6;

        return i#4;

     label6:
        $r10 = options[i#4];

        $c3 = virtualinvoke $r10.<java.lang.String: char charAt(int)>(1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c3);

        if $c3 != 45 goto label7;

        return -1;

     label7:
        i#4 = i#4 + 1;

        goto label2;

     label8:
        return -1;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public static java.lang.Object forName(java.lang.Class, java.lang.String, java.lang.String[]) throws java.lang.Exception
    {
        java.lang.Class classType, c#20, $r2, c#85;
        java.lang.String[] options;
        java.util.List matches;
        java.lang.StringBuffer sb, $r9;
        java.util.Iterator l5;
        java.lang.String s, className#1, $r0, $r8, $r14, $r20, $r22, className#80, $r29;
        java.lang.Object o, $r1, $r3, $r15, $r23;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1;
        java.lang.Exception $r4, $r21, $r24, $r25;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r16, $r17, $r18, $r19, $r26, $r27, $r28;
        weka.core.OptionHandler $r30;

        classType := @parameter0: java.lang.Class;

        className#1 := @parameter1: java.lang.String;

        options := @parameter2: java.lang.String[];

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("weka.test.maventest", "");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label01;

        $r1 = staticinvoke <weka.core.Utils: java.lang.Object forNameNoSchemeMatch(java.lang.Class,java.lang.String,java.lang.String[])>(classType, className#1, options);

        return $r1;

     label01:
        matches = staticinvoke <weka.Run: java.util.List findSchemeMatch(java.lang.Class,java.lang.String,boolean,boolean)>(classType, className#1, 0, 1);

        $i0 = interfaceinvoke matches.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label04;

        c#20 = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.Class forName(java.lang.String)>(className#1);

        $z1 = virtualinvoke c#20.<java.lang.Class: boolean isArray()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label03;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classType);

        if classType == null goto label02;

        $z2 = virtualinvoke classType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(c#20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label03;

     label02:
        $r2 = virtualinvoke c#20.<java.lang.Class: java.lang.Class getComponentType()>();

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r2, 0);

        return $r3;

     label03:
        $r4 = new java.lang.Exception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find a permissible class called: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(className#1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>($r8);

        throw $r4;

     label04:
        $i1 = interfaceinvoke matches.<java.util.List: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 1 goto label07;

        $r9 = new java.lang.StringBuffer;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("More than one possibility matched \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(className#1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\':\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.StringBuffer: void <init>(java.lang.String)>($r14);

        sb = $r9;

        l5 = interfaceinvoke matches.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label06;

        $r15 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        s = (java.lang.String) $r15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(s);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        goto label05;

     label06:
        $r21 = new java.lang.Exception;

        $r22 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.Exception: void <init>(java.lang.String)>($r22);

        throw $r21;

     label07:
        $r23 = interfaceinvoke matches.<java.util.List: java.lang.Object get(int)>(0);

        className#80 = (java.lang.String) $r23;

     label08:
        c#85 = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.Class forName(java.lang.String)>(className#80);

     label09:
        goto label11;

     label10:
        $r24 := @caughtexception;

        $r25 = new java.lang.Exception;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find a permissible class called: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(className#80);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.Exception: void <init>(java.lang.String)>($r29);

        throw $r25;

     label11:
        o = virtualinvoke c#85.<java.lang.Class: java.lang.Object newInstance()>();

        $z4 = o instanceof weka.core.OptionHandler;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label12;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(options);

        if options == null goto label12;

        $r30 = (weka.core.OptionHandler) o;

        interfaceinvoke $r30.<weka.core.OptionHandler: void setOptions(java.lang.String[])>(options);

        staticinvoke <weka.core.Utils: void checkForRemainingOptions(java.lang.String[])>(options);

     label12:
        return o;

        catch java.lang.Exception from label08 to label09 with label10;
    }

    public static java.lang.String[] splitOptions(java.lang.String) throws java.lang.Exception
    {
        java.lang.String quotedOptionString, $r1, str#6, str#19, optStr#57, optStr#60, optStr#81, $r5;
        java.util.Vector optionsVec, $r0;
        java.lang.String[] options;
        int i#8, $i0, $i2, i#27, $i4, $i8, $i9, $i10, i#69, $i11, $i13, i#91, $i14;
        char $c1, $c3, $c5, $c6, $c7, $c12;
        boolean $z0, $z1;
        java.lang.Exception $r2, $r3;
        java.lang.Object $r4;

        quotedOptionString := @parameter0: java.lang.String;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        optionsVec = $r0;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>(quotedOptionString);

        str#6 = $r1;

     label01:
        i#8 = 0;

     label02:
        $i0 = virtualinvoke str#6.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#8);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#8 >= $i0 goto label03;

        $c1 = virtualinvoke str#6.<java.lang.String: char charAt(int)>(i#8);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label03;

        i#8 = i#8 + 1;

        goto label02;

     label03:
        str#19 = virtualinvoke str#6.<java.lang.String: java.lang.String substring(int)>(i#8);

        $i2 = virtualinvoke str#19.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 0 goto label04;

        goto label13;

     label04:
        $c3 = virtualinvoke str#19.<java.lang.String: char charAt(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c3);

        if $c3 != 34 goto label10;

        i#27 = 1;

     label05:
        $i4 = virtualinvoke str#19.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#27);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#27 >= $i4 goto label08;

        $c5 = virtualinvoke str#19.<java.lang.String: char charAt(int)>(i#27);

        $c6 = virtualinvoke str#19.<java.lang.String: char charAt(int)>(0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c6);

        if $c5 != $c6 goto label06;

        goto label08;

     label06:
        $c7 = virtualinvoke str#19.<java.lang.String: char charAt(int)>(i#27);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c7);

        if $c7 != 92 goto label07;

        i#27 = i#27 + 1;

        $i8 = virtualinvoke str#19.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#27);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if i#27 < $i8 goto label07;

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>("String should not finish with \\");

        throw $r2;

     label07:
        i#27 = i#27 + 1;

        goto label05;

     label08:
        $i9 = virtualinvoke str#19.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#27);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if i#27 < $i9 goto label09;

        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>("Quote parse error.");

        throw $r3;

     label09:
        optStr#57 = virtualinvoke str#19.<java.lang.String: java.lang.String substring(int,int)>(1, i#27);

        optStr#60 = staticinvoke <weka.core.Utils: java.lang.String unbackQuoteChars(java.lang.String)>(optStr#57);

        virtualinvoke optionsVec.<java.util.Vector: void addElement(java.lang.Object)>(optStr#60);

        $i10 = i#27 + 1;

        str#6 = virtualinvoke str#19.<java.lang.String: java.lang.String substring(int)>($i10);

        goto label01;

     label10:
        i#69 = 0;

     label11:
        $i11 = virtualinvoke str#19.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#69);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if i#69 >= $i11 goto label12;

        $c12 = virtualinvoke str#19.<java.lang.String: char charAt(int)>(i#69);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c12);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label12;

        i#69 = i#69 + 1;

        goto label11;

     label12:
        optStr#81 = virtualinvoke str#19.<java.lang.String: java.lang.String substring(int,int)>(0, i#69);

        virtualinvoke optionsVec.<java.util.Vector: void addElement(java.lang.Object)>(optStr#81);

        str#6 = virtualinvoke str#19.<java.lang.String: java.lang.String substring(int)>(i#69);

        goto label01;

     label13:
        $i13 = virtualinvoke optionsVec.<java.util.Vector: int size()>();

        options = newarray (java.lang.String)[$i13];

        i#91 = 0;

     label14:
        $i14 = virtualinvoke optionsVec.<java.util.Vector: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#91);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if i#91 >= $i14 goto label15;

        $r4 = virtualinvoke optionsVec.<java.util.Vector: java.lang.Object elementAt(int)>(i#91);

        $r5 = (java.lang.String) $r4;

        options[i#91] = $r5;

        i#91 = i#91 + 1;

        goto label14;

     label15:
        return options;
    }

    protected static java.lang.Object forNameNoSchemeMatch(java.lang.Class, java.lang.String, java.lang.String[]) throws java.lang.Exception
    {
        java.lang.Class classType, c#5;
        java.lang.String className, $r5, $r8, $r12;
        java.lang.String[] options;
        java.lang.Object o;
        java.lang.Exception $r0, $r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r9, $r10, $r11;
        boolean $z0, $z1;
        weka.core.OptionHandler $r13;

        classType := @parameter0: java.lang.Class;

        className := @parameter1: java.lang.String;

        options := @parameter2: java.lang.String[];

     label1:
        c#5 = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.Class forName(java.lang.String)>(className);

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        $r1 = new java.lang.Exception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find class called: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(className);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String)>($r5);

        throw $r1;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(classType);

        if classType == null goto label5;

        $z0 = virtualinvoke classType.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(c#5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label5;

        $r6 = new java.lang.Exception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke classType.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not assignable from ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(className);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>($r12);

        throw $r6;

     label5:
        o = virtualinvoke c#5.<java.lang.Class: java.lang.Object newInstance()>();

        $z1 = o instanceof weka.core.OptionHandler;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label6;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(options);

        if options == null goto label6;

        $r13 = (weka.core.OptionHandler) o;

        interfaceinvoke $r13.<weka.core.OptionHandler: void setOptions(java.lang.String[])>(options);

        staticinvoke <weka.core.Utils: void checkForRemainingOptions(java.lang.String[])>(options);

     label6:
        return o;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String unbackQuoteChars(java.lang.String)
    {
        java.lang.String string, $r2, str#59, $r4, $r6, $r9, $r10;
        java.lang.String[] charsFind, $r0;
        char[] charsReplace, $r1;
        int[] pos;
        java.lang.StringBuffer newStringBuffer, $r3;
        int $i0, $i1, curPos#66, index#68, i#70, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10;
        char $c7;

        string := @parameter0: java.lang.String;

        $r0 = newarray (java.lang.String)[8];

        $r0[0] = "\\\\";

        $r0[1] = "\\\'";

        $r0[2] = "\\t";

        $r0[3] = "\\n";

        $r0[4] = "\\r";

        $r0[5] = "\\\"";

        $r0[6] = "\\%";

        $r0[7] = "\\u001E";

        charsFind = $r0;

        $r1 = newarray (char)[8];

        $r1[0] = 92;

        $r1[1] = 39;

        $r1[2] = 9;

        $r1[3] = 10;

        $r1[4] = 13;

        $r1[5] = 34;

        $r1[6] = 37;

        $r1[7] = 30;

        charsReplace = $r1;

        $i0 = lengthof charsFind;

        pos = newarray (int)[$i0];

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(java.lang.String)>(string);

        str#59 = $r2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        newStringBuffer = $r3;

     label1:
        $i1 = virtualinvoke str#59.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label6;

        curPos#66 = virtualinvoke str#59.<java.lang.String: int length()>();

        index#68 = -1;

        i#70 = 0;

     label2:
        $i2 = lengthof pos;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#70);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if i#70 >= $i2 goto label4;

        $r4 = charsFind[i#70];

        $i3 = virtualinvoke str#59.<java.lang.String: int indexOf(java.lang.String)>($r4);

        pos[i#70] = $i3;

        $i4 = pos[i#70];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= -1 goto label3;

        $i5 = pos[i#70];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(curPos#66);

        if $i5 >= curPos#66 goto label3;

        index#68 = i#70;

        curPos#66 = pos[i#70];

     label3:
        i#70 = i#70 + 1;

        goto label2;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index#68);

        if index#68 != -1 goto label5;

        virtualinvoke newStringBuffer.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(str#59);

        str#59 = "";

        goto label1;

     label5:
        $i6 = pos[index#68];

        $r6 = virtualinvoke str#59.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        virtualinvoke newStringBuffer.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $c7 = charsReplace[index#68];

        virtualinvoke newStringBuffer.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c7);

        $i8 = pos[index#68];

        $r9 = charsFind[index#68];

        $i9 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i10 = $i8 + $i9;

        str#59 = virtualinvoke str#59.<java.lang.String: java.lang.String substring(int)>($i10);

        goto label1;

     label6:
        $r10 = virtualinvoke newStringBuffer.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r10;
    }

    public static double missingValue()
    {
        return #NaN;
    }

    public static boolean isMissingValue(double)
    {
        double val;
        boolean $z0;

        val := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(val);

        return $z0;
    }

    public static boolean gr(double, double)
    {
        double a, b, $d0, $d1;
        byte $b0;
        boolean $z0;

        a := @parameter0: double;

        b := @parameter1: double;

        $d0 = a - b;

        $d1 = <weka.core.Utils: double SMALL>;

        $b0 = $d0 cmpl $d1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean eq(double, double)
    {
        double a, b, $d0, $d1, $d2, $d3;
        byte $b0, $b1, $b2;
        boolean $z0;

        a := @parameter0: double;

        b := @parameter1: double;

        $b0 = a cmpl b;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 == 0 goto label1;

        $d0 = a - b;

        $d1 = <weka.core.Utils: double SMALL>;

        $b1 = $d0 cmpg $d1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 >= 0 goto label2;

        $d2 = b - a;

        $d3 = <weka.core.Utils: double SMALL>;

        $b2 = $d2 cmpg $d3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 >= 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static java.lang.String padRight(java.lang.String, int)
    {
        java.lang.String inString, $r6, $r8;
        int length;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5;
        java.lang.Object[] $r7;

        inString := @parameter0: java.lang.String;

        length := @parameter1: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%1$-");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(length);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(length);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = inString;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r6, $r7);

        return $r8;
    }

    public static java.lang.String padLeft(java.lang.String, int)
    {
        java.lang.String inString, $r6, $r8;
        int length;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5;
        java.lang.Object[] $r7;

        inString := @parameter0: java.lang.String;

        length := @parameter1: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%1$");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(length);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(length);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = inString;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r6, $r7);

        return $r8;
    }

    public static java.lang.String doubleToString(double, int, int)
    {
        double value;
        int width, afterDecimalPoint, i#10, $i0, dotPosition#21, $i1, $i2, $i3, offset#40, i#45, $i4, i#58, $i6, $i7;
        java.lang.String tempString, $r0;
        char[] result;
        char $c5, $c8;

        value := @parameter0: double;

        width := @parameter1: int;

        afterDecimalPoint := @parameter2: int;

        tempString = staticinvoke <weka.core.Utils: java.lang.String doubleToString(double,int)>(value, afterDecimalPoint);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(afterDecimalPoint);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(width);

        if afterDecimalPoint < width goto label01;

        return tempString;

     label01:
        result = newarray (char)[width];

        i#10 = 0;

     label02:
        $i0 = lengthof result;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#10 >= $i0 goto label03;

        result[i#10] = 32;

        i#10 = i#10 + 1;

        goto label02;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(afterDecimalPoint);

        if afterDecimalPoint <= 0 goto label05;

        dotPosition#21 = virtualinvoke tempString.<java.lang.String: int indexOf(int)>(46);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dotPosition#21);

        if dotPosition#21 != -1 goto label04;

        dotPosition#21 = virtualinvoke tempString.<java.lang.String: int length()>();

        goto label06;

     label04:
        $i1 = width - afterDecimalPoint;

        $i2 = $i1 - 1;

        result[$i2] = 46;

        goto label06;

     label05:
        dotPosition#21 = virtualinvoke tempString.<java.lang.String: int length()>();

     label06:
        $i3 = width - afterDecimalPoint;

        offset#40 = $i3 - dotPosition#21;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(afterDecimalPoint);

        if afterDecimalPoint <= 0 goto label07;

        offset#40 = offset#40 + -1;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(offset#40);

        if offset#40 >= 0 goto label08;

        return tempString;

     label08:
        i#45 = 0;

     label09:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#45);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(dotPosition#21);

        if i#45 >= dotPosition#21 goto label10;

        $i4 = offset#40 + i#45;

        $c5 = virtualinvoke tempString.<java.lang.String: char charAt(int)>(i#45);

        result[$i4] = $c5;

        i#45 = i#45 + 1;

        goto label09;

     label10:
        i#58 = dotPosition#21 + 1;

     label11:
        $i6 = virtualinvoke tempString.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#58);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if i#58 >= $i6 goto label12;

        $i7 = offset#40 + i#58;

        $c8 = virtualinvoke tempString.<java.lang.String: char charAt(int)>(i#58);

        result[$i7] = $c8;

        i#58 = i#58 + 1;

        goto label11;

     label12:
        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(char[])>(result);

        return $r0;
    }

    public static java.util.Properties readProperties(java.lang.String) throws java.lang.Exception
    {
        java.lang.String resourceName;
        weka.core.Utils utils, $r0;
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;
        java.util.Properties $r3;

        resourceName := @parameter0: java.lang.String;

        $r0 = new weka.core.Utils;

        specialinvoke $r0.<weka.core.Utils: void <init>()>();

        utils = $r0;

        $r1 = virtualinvoke utils.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = staticinvoke <weka.core.Utils: java.util.Properties readProperties(java.lang.String,java.lang.ClassLoader)>(resourceName, $r2);

        return $r3;
    }

    public static java.util.Properties readProperties(java.lang.String, java.lang.ClassLoader) throws java.lang.Exception
    {
        java.lang.ClassLoader loader;
        java.util.Enumeration urls;
        java.net.URL url;
        java.util.Properties props, userProps, localProps, $r0, defaultProps#4, $r3, $r11, $r30;
        java.lang.Exception ex, ex, ex, $r5, $r24, $r25, $r33, $r34;
        int slInd, $i0;
        java.lang.String resourceName#1, $r10, $r17, $r19, $r22, $r29, $r38;
        boolean first#9, $z0, $z1, $z3, $z4;
        java.lang.Object $r1;
        java.io.InputStream $r2, $r4;
        java.io.PrintStream $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r15, $r18, $r20, $r21, $r26, $r27, $r28, $r35, $r36, $r37;
        java.io.File $r12, $r13, $r14, $r16, propFile#65, $r31, propFile#88;
        java.io.FileInputStream $r23, $r32;
        weka.core.EnvironmentProperties $r39;

        resourceName#1 := @parameter0: java.lang.String;

        loader := @parameter1: java.lang.ClassLoader;

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        defaultProps#4 = $r0;

     label01:
        urls = virtualinvoke loader.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(resourceName#1);

        first#9 = 1;

     label02:
        $z0 = interfaceinvoke urls.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label05;

        $r1 = interfaceinvoke urls.<java.util.Enumeration: java.lang.Object nextElement()>();

        url = (java.net.URL) $r1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(first#9);

        if first#9 == 0 goto label03;

        $r2 = virtualinvoke url.<java.net.URL: java.io.InputStream openStream()>();

        virtualinvoke defaultProps#4.<java.util.Properties: void load(java.io.InputStream)>($r2);

        first#9 = 0;

        goto label04;

     label03:
        $r3 = new java.util.Properties;

        specialinvoke $r3.<java.util.Properties: void <init>(java.util.Properties)>(defaultProps#4);

        props = $r3;

        $r4 = virtualinvoke url.<java.net.URL: java.io.InputStream openStream()>();

        virtualinvoke props.<java.util.Properties: void load(java.io.InputStream)>($r4);

        defaultProps#4 = props;

     label04:
        goto label02;

     label05:
        goto label07;

     label06:
        $r5 := @caughtexception;

        ex = $r5;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning, unable to load properties file(s) from system resource (Utils.java): ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(resourceName#1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label07:
        slInd = virtualinvoke resourceName#1.<java.lang.String: int lastIndexOf(int)>(47);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(slInd);

        if slInd == -1 goto label08;

        $i0 = slInd + 1;

        resourceName#1 = virtualinvoke resourceName#1.<java.lang.String: java.lang.String substring(int)>($i0);

     label08:
        $r11 = new java.util.Properties;

        specialinvoke $r11.<java.util.Properties: void <init>(java.util.Properties)>(defaultProps#4);

        userProps = $r11;

        $r12 = <weka.core.WekaPackageManager: java.io.File PROPERTIES_DIR>;

        $z1 = virtualinvoke $r12.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label09;

        $r13 = <weka.core.WekaPackageManager: java.io.File PROPERTIES_DIR>;

        virtualinvoke $r13.<java.io.File: boolean mkdir()>();

     label09:
        $r14 = new java.io.File;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = <weka.core.WekaPackageManager: java.io.File PROPERTIES_DIR>;

        $r17 = virtualinvoke $r16.<java.io.File: java.lang.String toString()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = <java.io.File: java.lang.String separator>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(resourceName#1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>($r22);

        propFile#65 = $r14;

        $z3 = virtualinvoke propFile#65.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label13;

     label10:
        $r23 = new java.io.FileInputStream;

        specialinvoke $r23.<java.io.FileInputStream: void <init>(java.io.File)>(propFile#65);

        virtualinvoke userProps.<java.util.Properties: void load(java.io.InputStream)>($r23);

     label11:
        goto label13;

     label12:
        $r24 := @caughtexception;

        ex = $r24;

        $r25 = new java.lang.Exception;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem reading user properties: ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(propFile#65);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.Exception: void <init>(java.lang.String)>($r29);

        throw $r25;

     label13:
        $r30 = new java.util.Properties;

        specialinvoke $r30.<java.util.Properties: void <init>(java.util.Properties)>(userProps);

        localProps = $r30;

        $r31 = new java.io.File;

        specialinvoke $r31.<java.io.File: void <init>(java.lang.String)>(resourceName#1);

        propFile#88 = $r31;

        $z4 = virtualinvoke propFile#88.<java.io.File: boolean exists()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z4);

        if $z4 == 0 goto label17;

     label14:
        $r32 = new java.io.FileInputStream;

        specialinvoke $r32.<java.io.FileInputStream: void <init>(java.io.File)>(propFile#88);

        virtualinvoke localProps.<java.util.Properties: void load(java.io.InputStream)>($r32);

     label15:
        goto label17;

     label16:
        $r33 := @caughtexception;

        ex = $r33;

        $r34 = new java.lang.Exception;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem reading local properties: ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(propFile#88);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.Exception: void <init>(java.lang.String)>($r38);

        throw $r34;

     label17:
        $r39 = new weka.core.EnvironmentProperties;

        specialinvoke $r39.<weka.core.EnvironmentProperties: void <init>(java.util.Properties)>(localProps);

        return $r39;

        catch java.lang.Exception from label01 to label05 with label06;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label14 to label15 with label16;
    }

    public void <init>()
    {
        weka.core.Utils this;

        this := @this: weka.core.Utils;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.File convertToRelativePath(java.io.File) throws java.lang.Exception
    {
        java.io.File absolute, $r7, result#26;
        java.lang.String $r0, fileStr#8, $r2, $r3, $r5, fileStr#21;
        boolean $z0;
        java.lang.StringBuilder $r1, $r4, $r6;
        java.lang.Exception $r8;

        absolute := @parameter0: java.io.File;

        $r0 = <java.io.File: java.lang.String separator>;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("\\");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label4;

     label1:
        fileStr#8 = virtualinvoke absolute.<java.io.File: java.lang.String getPath()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke fileStr#8.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke fileStr#8.<java.lang.String: java.lang.String substring(int)>(1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        fileStr#21 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>(fileStr#21);

        result#26 = staticinvoke <weka.core.Utils: java.io.File createRelativePath(java.io.File)>($r7);

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        result#26 = staticinvoke <weka.core.Utils: java.io.File createRelativePath(java.io.File)>(absolute);

        goto label5;

     label4:
        result#26 = staticinvoke <weka.core.Utils: java.io.File createRelativePath(java.io.File)>(absolute);

     label5:
        return result#26;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected static java.io.File createRelativePath(java.io.File) throws java.lang.Exception
    {
        java.io.File absolute, userDir, $r0, $r8, $r40;
        java.lang.String userPath, targetPath, fileName, tpart, upart, $r1, $r3, $r5, $r9, $r10, $r12, $r16, $r19, temp#54, $r20, $r21, $r22, targetTemp#72, $r23, userTemp#76, $r24, $r25, $r26, $r28, $r31, $r33, $r38, $r41;
        java.lang.StringBuffer relativePath, $r14;
        int subdir, ll, ind, ind, ind2, $i0, $i1, sepCount#50, $i2, $i3, $i4, tcount#78, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i#131, $i14;
        java.lang.StringBuilder $r2, $r4, $r6, $r7, $r11, $r13, $r29, $r30, $r32, $r35, $r36, $r37;
        java.lang.Exception $r27;

        absolute := @parameter0: java.io.File;

        $r0 = new java.io.File;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir");

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r1);

        userDir = $r0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke userDir.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = <java.io.File: java.lang.String separator>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        userPath = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = new java.io.File;

        $r9 = virtualinvoke absolute.<java.io.File: java.lang.String getParent()>();

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r9);

        $r10 = virtualinvoke $r8.<java.io.File: java.lang.String getPath()>();

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = <java.io.File: java.lang.String separator>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        targetPath = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        fileName = virtualinvoke absolute.<java.io.File: java.lang.String getName()>();

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        relativePath = $r14;

        subdir = virtualinvoke targetPath.<java.lang.String: int indexOf(java.lang.String)>(userPath);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(subdir);

        if subdir != 0 goto label02;

        $i0 = virtualinvoke userPath.<java.lang.String: int length()>();

        $i1 = virtualinvoke targetPath.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i0 != $i1 goto label01;

        virtualinvoke relativePath.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(fileName);

        goto label12;

     label01:
        ll = virtualinvoke userPath.<java.lang.String: int length()>();

        $r16 = virtualinvoke targetPath.<java.lang.String: java.lang.String substring(int)>(ll);

        virtualinvoke relativePath.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        virtualinvoke relativePath.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(fileName);

        goto label12;

     label02:
        sepCount#50 = 0;

        $r19 = new java.lang.String;

        specialinvoke $r19.<java.lang.String: void <init>(java.lang.String)>(userPath);

        temp#54 = $r19;

     label03:
        $r20 = <java.io.File: java.lang.String separator>;

        $i2 = virtualinvoke temp#54.<java.lang.String: int indexOf(java.lang.String)>($r20);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 == -1 goto label04;

        $r21 = <java.io.File: java.lang.String separator>;

        ind = virtualinvoke temp#54.<java.lang.String: int indexOf(java.lang.String)>($r21);

        sepCount#50 = sepCount#50 + 1;

        $i3 = ind + 1;

        $i4 = virtualinvoke temp#54.<java.lang.String: int length()>();

        temp#54 = virtualinvoke temp#54.<java.lang.String: java.lang.String substring(int,int)>($i3, $i4);

        goto label03;

     label04:
        $r22 = new java.lang.String;

        specialinvoke $r22.<java.lang.String: void <init>(java.lang.String)>(targetPath);

        targetTemp#72 = $r22;

        $r23 = new java.lang.String;

        specialinvoke $r23.<java.lang.String: void <init>(java.lang.String)>(userPath);

        userTemp#76 = $r23;

        tcount#78 = 0;

     label05:
        $r24 = <java.io.File: java.lang.String separator>;

        $i5 = virtualinvoke targetTemp#72.<java.lang.String: int indexOf(java.lang.String)>($r24);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 == -1 goto label07;

        $r25 = <java.io.File: java.lang.String separator>;

        ind = virtualinvoke targetTemp#72.<java.lang.String: int indexOf(java.lang.String)>($r25);

        $r26 = <java.io.File: java.lang.String separator>;

        ind2 = virtualinvoke userTemp#76.<java.lang.String: int indexOf(java.lang.String)>($r26);

        $i6 = ind + 1;

        tpart = virtualinvoke targetTemp#72.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        $i7 = ind2 + 1;

        upart = virtualinvoke userTemp#76.<java.lang.String: java.lang.String substring(int,int)>(0, $i7);

        $i8 = virtualinvoke tpart.<java.lang.String: int compareTo(java.lang.String)>(upart);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 == 0 goto label06;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(tcount#78);

        if tcount#78 != 0 goto label07;

        tcount#78 = -1;

        goto label07;

     label06:
        tcount#78 = tcount#78 + 1;

        $i9 = ind + 1;

        $i10 = virtualinvoke targetTemp#72.<java.lang.String: int length()>();

        targetTemp#72 = virtualinvoke targetTemp#72.<java.lang.String: java.lang.String substring(int,int)>($i9, $i10);

        $i11 = ind2 + 1;

        $i12 = virtualinvoke userTemp#76.<java.lang.String: int length()>();

        userTemp#76 = virtualinvoke userTemp#76.<java.lang.String: java.lang.String substring(int,int)>($i11, $i12);

        goto label05;

     label07:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(tcount#78);

        if tcount#78 != -1 goto label08;

        $r27 = new java.lang.Exception;

        specialinvoke $r27.<java.lang.Exception: void <init>(java.lang.String)>("Can\'t construct a path to file relative to user dir.");

        throw $r27;

     label08:
        $r28 = <java.io.File: java.lang.String separator>;

        $i13 = virtualinvoke targetTemp#72.<java.lang.String: int indexOf(java.lang.String)>($r28);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i13);

        if $i13 != -1 goto label09;

        targetTemp#72 = "";

     label09:
        i#131 = 0;

     label10:
        $i14 = sepCount#50 - tcount#78;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#131);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i14);

        if i#131 >= $i14 goto label11;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $r31 = <java.io.File: java.lang.String separator>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke relativePath.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        i#131 = i#131 + 1;

        goto label10;

     label11:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(targetTemp#72);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(fileName);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke relativePath.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

     label12:
        $r40 = new java.io.File;

        $r41 = virtualinvoke relativePath.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r40.<java.io.File: void <init>(java.lang.String)>($r41);

        return $r40;
    }

    public static java.lang.String quote(java.lang.String)
    {
        java.lang.String string#1, $r0, $r1;
        boolean quote#3, $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        string#1 := @parameter0: java.lang.String;

        quote#3 = 0;

        $i0 = virtualinvoke string#1.<java.lang.String: int indexOf(int)>(10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != -1 goto label1;

        $i1 = virtualinvoke string#1.<java.lang.String: int indexOf(int)>(13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != -1 goto label1;

        $i2 = virtualinvoke string#1.<java.lang.String: int indexOf(int)>(39);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != -1 goto label1;

        $i3 = virtualinvoke string#1.<java.lang.String: int indexOf(int)>(34);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i3 != -1 goto label1;

        $i4 = virtualinvoke string#1.<java.lang.String: int indexOf(int)>(92);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 != -1 goto label1;

        $i5 = virtualinvoke string#1.<java.lang.String: int indexOf(int)>(9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if $i5 != -1 goto label1;

        $i6 = virtualinvoke string#1.<java.lang.String: int indexOf(int)>(37);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 != -1 goto label1;

        $i7 = virtualinvoke string#1.<java.lang.String: int indexOf(int)>(30);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 == -1 goto label2;

     label1:
        string#1 = staticinvoke <weka.core.Utils: java.lang.String backQuoteChars(java.lang.String)>(string#1);

        quote#3 = 1;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(quote#3);

        if quote#3 == 1 goto label3;

        $i8 = virtualinvoke string#1.<java.lang.String: int indexOf(int)>(123);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 != -1 goto label3;

        $i9 = virtualinvoke string#1.<java.lang.String: int indexOf(int)>(125);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i9 != -1 goto label3;

        $i10 = virtualinvoke string#1.<java.lang.String: int indexOf(int)>(44);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if $i10 != -1 goto label3;

        $z0 = virtualinvoke string#1.<java.lang.String: boolean equals(java.lang.Object)>("?");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label3;

        $i11 = virtualinvoke string#1.<java.lang.String: int indexOf(int)>(32);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if $i11 != -1 goto label3;

        $z1 = virtualinvoke string#1.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label4;

     label3:
        $r0 = "\'";

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>(string#1);

        string#1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>("\'");

     label4:
        return string#1;
    }

    public static java.lang.String backQuoteChars(java.lang.String)
    {
        char[] charsFind, $r0;
        java.lang.String[] charsReplace, $r1;
        java.lang.StringBuffer newStringBuffer, $r2;
        int index, i#55, $i0, $i2, $i4, $i5, $i6, $i7;
        java.lang.String string#1, $r3, $r5;
        char $c1, $c3;

        string#1 := @parameter0: java.lang.String;

        $r0 = newarray (char)[8];

        $r0[0] = 92;

        $r0[1] = 39;

        $r0[2] = 9;

        $r0[3] = 10;

        $r0[4] = 13;

        $r0[5] = 34;

        $r0[6] = 37;

        $r0[7] = 30;

        charsFind = $r0;

        $r1 = newarray (java.lang.String)[8];

        $r1[0] = "\\\\";

        $r1[1] = "\\\'";

        $r1[2] = "\\t";

        $r1[3] = "\\n";

        $r1[4] = "\\r";

        $r1[5] = "\\\"";

        $r1[6] = "\\%";

        $r1[7] = "\\u001E";

        charsReplace = $r1;

        i#55 = 0;

     label1:
        $i0 = lengthof charsFind;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#55);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#55 >= $i0 goto label7;

        $c1 = charsFind[i#55];

        $i2 = virtualinvoke string#1.<java.lang.String: int indexOf(int)>($c1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 == -1 goto label6;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        newStringBuffer = $r2;

     label2:
        $c3 = charsFind[i#55];

        $i4 = virtualinvoke string#1.<java.lang.String: int indexOf(int)>($c3);

        index = $i4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 == -1 goto label5;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(index);

        if index <= 0 goto label3;

        $r3 = virtualinvoke string#1.<java.lang.String: java.lang.String substring(int,int)>(0, index);

        virtualinvoke newStringBuffer.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label3:
        $r5 = charsReplace[i#55];

        virtualinvoke newStringBuffer.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $i5 = index + 1;

        $i6 = virtualinvoke string#1.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i5 >= $i6 goto label4;

        $i7 = index + 1;

        string#1 = virtualinvoke string#1.<java.lang.String: java.lang.String substring(int)>($i7);

        goto label2;

     label4:
        string#1 = "";

        goto label2;

     label5:
        virtualinvoke newStringBuffer.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(string#1);

        string#1 = virtualinvoke newStringBuffer.<java.lang.StringBuffer: java.lang.String toString()>();

     label6:
        i#55 = i#55 + 1;

        goto label1;

     label7:
        return string#1;
    }

    public static int[] sort(double[])
    {
        int[] index;
        double[] array#1, array#11;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r0;

        array#1 := @parameter0: double[];

        $i0 = lengthof array#1;

        index = staticinvoke <weka.core.Utils: int[] initialIndex(int)>($i0);

        $i1 = lengthof array#1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 1 goto label1;

        $r0 = virtualinvoke array#1.<java.lang.Object: java.lang.Object clone()>();

        array#11 = (double[]) $r0;

        staticinvoke <weka.core.Utils: void replaceMissingWithMAX_VALUE(double[])>(array#11);

        $i2 = lengthof array#11;

        $i3 = $i2 - 1;

        staticinvoke <weka.core.Utils: void quickSort(double[],int[],int,int)>(array#11, index, 0, $i3);

     label1:
        return index;
    }

    private static void quickSort(double[], int[], int, int)
    {
        double[] array;
        int[] index;
        int left, right, diff, pivotLocation, center, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        double $d0;

        array := @parameter0: double[];

        index := @parameter1: int[];

        left := @parameter2: int;

        right := @parameter3: int;

        diff = right - left;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(diff);

        tableswitch(diff)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        return;

     label2:
        staticinvoke <weka.core.Utils: void conditionalSwap(double[],int[],int,int)>(array, index, left, right);

        return;

     label3:
        $i0 = left + 1;

        staticinvoke <weka.core.Utils: void conditionalSwap(double[],int[],int,int)>(array, index, left, $i0);

        staticinvoke <weka.core.Utils: void conditionalSwap(double[],int[],int,int)>(array, index, left, right);

        $i1 = left + 1;

        staticinvoke <weka.core.Utils: void conditionalSwap(double[],int[],int,int)>(array, index, $i1, right);

        return;

     label4:
        pivotLocation = staticinvoke <weka.core.Utils: int sortLeftRightAndCenter(double[],int[],int,int)>(array, index, left, right);

        $i2 = right - 1;

        staticinvoke <weka.core.Utils: void swap(int[],int,int)>(index, pivotLocation, $i2);

        $i3 = right - 1;

        $i4 = index[$i3];

        $d0 = array[$i4];

        center = staticinvoke <weka.core.Utils: int partition(double[],int[],int,int,double)>(array, index, left, right, $d0);

        $i5 = right - 1;

        staticinvoke <weka.core.Utils: void swap(int[],int,int)>(index, center, $i5);

        $i6 = center - 1;

        staticinvoke <weka.core.Utils: void quickSort(double[],int[],int,int)>(array, index, left, $i6);

        $i7 = center + 1;

        staticinvoke <weka.core.Utils: void quickSort(double[],int[],int,int)>(array, index, $i7, right);

        return;
    }

    public static void replaceMissingWithMAX_VALUE(double[])
    {
        double[] array;
        int i#2, $i0;
        double $d0;
        boolean $z0;

        array := @parameter0: double[];

        i#2 = 0;

     label1:
        $i0 = lengthof array;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#2 >= $i0 goto label3;

        $d0 = array[i#2];

        $z0 = staticinvoke <weka.core.Utils: boolean isMissingValue(double)>($d0);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label2;

        array[i#2] = 1.7976931348623157E308;

     label2:
        i#2 = i#2 + 1;

        goto label1;

     label3:
        return;
    }

    private static int[] initialIndex(int)
    {
        int size, i#4;
        int[] index;

        size := @parameter0: int;

        index = newarray (int)[size];

        i#4 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#4);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(size);

        if i#4 >= size goto label2;

        index[i#4] = i#4;

        i#4 = i#4 + 1;

        goto label1;

     label2:
        return index;
    }

    private static void swap(int[], int, int)
    {
        int[] index;
        int l, r, help, $i0;

        index := @parameter0: int[];

        l := @parameter1: int;

        r := @parameter2: int;

        help = index[l];

        $i0 = index[r];

        index[l] = $i0;

        index[r] = help;

        return;
    }

    private static int partition(double[], int[], int, int, double)
    {
        double[] array;
        int[] index;
        double pivot, $d0, $d1;
        int l#1, r#2, r#3, $i0, $i2;
        byte $b1, $b3;

        array := @parameter0: double[];

        index := @parameter1: int[];

        l#1 := @parameter2: int;

        r#2 := @parameter3: int;

        pivot := @parameter4: double;

        r#3 = r#2 + -1;

     label1:
        l#1 = l#1 + 1;

        $i0 = index[l#1];

        $d0 = array[$i0];

        $b1 = $d0 cmpg pivot;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 >= 0 goto label2;

        goto label1;

     label2:
        r#3 = r#3 + -1;

        $i2 = index[r#3];

        $d1 = array[$i2];

        $b3 = $d1 cmpl pivot;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b3);

        if $b3 <= 0 goto label3;

        goto label2;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#3);

        if l#1 < r#3 goto label4;

        return l#1;

     label4:
        staticinvoke <weka.core.Utils: void swap(int[],int,int)>(index, l#1, r#3);

        goto label1;
    }

    private static int sortLeftRightAndCenter(double[], int[], int, int)
    {
        double[] array;
        int[] index;
        int l, r, c, $i0;

        array := @parameter0: double[];

        index := @parameter1: int[];

        l := @parameter2: int;

        r := @parameter3: int;

        $i0 = l + r;

        c = $i0 / 2;

        staticinvoke <weka.core.Utils: void conditionalSwap(double[],int[],int,int)>(array, index, l, c);

        staticinvoke <weka.core.Utils: void conditionalSwap(double[],int[],int,int)>(array, index, l, r);

        staticinvoke <weka.core.Utils: void conditionalSwap(double[],int[],int,int)>(array, index, c, r);

        return c;
    }

    private static void conditionalSwap(double[], int[], int, int)
    {
        double[] array;
        int[] index;
        int left, right, help, $i0, $i1, $i3;
        double $d0, $d1;
        byte $b2;

        array := @parameter0: double[];

        index := @parameter1: int[];

        left := @parameter2: int;

        right := @parameter3: int;

        $i0 = index[left];

        $d0 = array[$i0];

        $i1 = index[right];

        $d1 = array[$i1];

        $b2 = $d0 cmpl $d1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b2);

        if $b2 <= 0 goto label1;

        help = index[left];

        $i3 = index[right];

        index[left] = $i3;

        index[right] = help;

     label1:
        return;
    }

    public static java.lang.Class getArrayClass(java.lang.Class)
    {
        java.lang.Class c, $r0, $r1, $r2, $r3;
        boolean $z0;

        c := @parameter0: java.lang.Class;

        $r0 = virtualinvoke c.<java.lang.Class: java.lang.Class getComponentType()>();

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isArray()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke c.<java.lang.Class: java.lang.Class getComponentType()>();

        $r2 = staticinvoke <weka.core.Utils: java.lang.Class getArrayClass(java.lang.Class)>($r1);

        return $r2;

     label1:
        $r3 = virtualinvoke c.<java.lang.Class: java.lang.Class getComponentType()>();

        return $r3;
    }

    public static int getArrayDimensions(java.lang.Object)
    {
        java.lang.Object array;
        java.lang.Class $r0;
        int $i0;

        array := @parameter0: java.lang.Object;

        $r0 = virtualinvoke array.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = staticinvoke <weka.core.Utils: int getArrayDimensions(java.lang.Class)>($r0);

        return $i0;
    }

    public static int getArrayDimensions(java.lang.Class)
    {
        java.lang.Class array, $r0, $r1;
        boolean $z0;
        int $i0, $i1;

        array := @parameter0: java.lang.Class;

        $r0 = virtualinvoke array.<java.lang.Class: java.lang.Class getComponentType()>();

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isArray()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke array.<java.lang.Class: java.lang.Class getComponentType()>();

        $i0 = staticinvoke <weka.core.Utils: int getArrayDimensions(java.lang.Class)>($r1);

        $i1 = 1 + $i0;

        return $i1;

     label1:
        return 1;
    }

    public static double log2(double)
    {
        double a, $d0, $d1, $d2;

        a := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double log(double)>(a);

        $d0 = <weka.core.Utils: double log2>;

        $d2 = $d1 / $d0;

        return $d2;
    }

    public static int maxIndex(double[])
    {
        double[] doubles;
        double maximum#2, $d0;
        int maxIndex#4, i#6, $i0;
        byte $b1;

        doubles := @parameter0: double[];

        maximum#2 = 0.0;

        maxIndex#4 = 0;

        i#6 = 0;

     label1:
        $i0 = lengthof doubles;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#6 >= $i0 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        if i#6 == 0 goto label2;

        $d0 = doubles[i#6];

        $b1 = $d0 cmpl maximum#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 <= 0 goto label3;

     label2:
        maxIndex#4 = i#6;

        maximum#2 = doubles[i#6];

     label3:
        i#6 = i#6 + 1;

        goto label1;

     label4:
        return maxIndex#4;
    }

    public static int[] stableSort(double[])
    {
        int[] index, newIndex, helpIndex;
        double[] array#1, array#14;
        int $i0, $i1, $i2, $i3, $i4, i#24, $i5, numEqual#29, j#33, $i6, $i7, $i8, j#53, $i9, $i10, j#68, $i11, $i12, $i13, $i14;
        java.lang.Object $r0;
        double $d0, $d1;
        boolean $z0;

        array#1 := @parameter0: double[];

        $i0 = lengthof array#1;

        index = staticinvoke <weka.core.Utils: int[] initialIndex(int)>($i0);

        $i1 = lengthof array#1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 1 goto label10;

        $i2 = lengthof array#1;

        newIndex = newarray (int)[$i2];

        $r0 = virtualinvoke array#1.<java.lang.Object: java.lang.Object clone()>();

        array#14 = (double[]) $r0;

        staticinvoke <weka.core.Utils: void replaceMissingWithMAX_VALUE(double[])>(array#14);

        $i3 = lengthof array#14;

        $i4 = $i3 - 1;

        staticinvoke <weka.core.Utils: void quickSort(double[],int[],int,int)>(array#14, index, 0, $i4);

        i#24 = 0;

     label01:
        $i5 = lengthof index;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#24);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if i#24 >= $i5 goto label09;

        numEqual#29 = 1;

        j#33 = i#24 + 1;

     label02:
        $i6 = lengthof index;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#33);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if j#33 >= $i6 goto label03;

        $i7 = index[i#24];

        $d0 = array#14[$i7];

        $i8 = index[j#33];

        $d1 = array#14[$i8];

        $z0 = staticinvoke <weka.core.Utils: boolean eq(double,double)>($d0, $d1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label03;

        numEqual#29 = numEqual#29 + 1;

        j#33 = j#33 + 1;

        goto label02;

     label03:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numEqual#29);

        if numEqual#29 <= 1 goto label08;

        helpIndex = newarray (int)[numEqual#29];

        j#53 = 0;

     label04:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#53);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numEqual#29);

        if j#53 >= numEqual#29 goto label05;

        $i9 = i#24 + j#53;

        helpIndex[j#53] = $i9;

        j#53 = j#53 + 1;

        goto label04;

     label05:
        $i10 = numEqual#29 - 1;

        staticinvoke <weka.core.Utils: void quickSort(int[],int[],int,int)>(index, helpIndex, 0, $i10);

        j#68 = 0;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#68);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numEqual#29);

        if j#68 >= numEqual#29 goto label07;

        $i11 = i#24 + j#68;

        $i12 = helpIndex[j#68];

        $i13 = index[$i12];

        newIndex[$i11] = $i13;

        j#68 = j#68 + 1;

        goto label06;

     label07:
        i#24 = i#24 + numEqual#29;

        goto label01;

     label08:
        $i14 = index[i#24];

        newIndex[i#24] = $i14;

        i#24 = i#24 + 1;

        goto label01;

     label09:
        return newIndex;

     label10:
        return index;
    }

    private static void quickSort(int[], int[], int, int)
    {
        int[] array, index;
        int left, right, middle, $i0;

        array := @parameter0: int[];

        index := @parameter1: int[];

        left := @parameter2: int;

        right := @parameter3: int;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(left);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(right);

        if left >= right goto label1;

        middle = staticinvoke <weka.core.Utils: int partition(int[],int[],int,int)>(array, index, left, right);

        staticinvoke <weka.core.Utils: void quickSort(int[],int[],int,int)>(array, index, left, middle);

        $i0 = middle + 1;

        staticinvoke <weka.core.Utils: void quickSort(int[],int[],int,int)>(array, index, $i0, right);

     label1:
        return;
    }

    private static int partition(int[], int[], int, int)
    {
        int[] array, index;
        double pivot, $d0, $d1, $d2;
        int help, l#1, r#2, $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i10, $i11, $i12;
        byte $b6, $b9, $b13;

        array := @parameter0: int[];

        index := @parameter1: int[];

        l#1 := @parameter2: int;

        r#2 := @parameter3: int;

        $i0 = l#1 + r#2;

        $i1 = $i0 / 2;

        $i2 = index[$i1];

        $i3 = array[$i2];

        pivot = (double) $i3;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#2);

        if l#1 >= r#2 goto label5;

     label2:
        $i4 = index[l#1];

        $i5 = array[$i4];

        $d0 = (double) $i5;

        $b6 = $d0 cmpg pivot;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b6);

        if $b6 >= 0 goto label3;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#2);

        if l#1 >= r#2 goto label3;

        l#1 = l#1 + 1;

        goto label2;

     label3:
        $i7 = index[r#2];

        $i8 = array[$i7];

        $d1 = (double) $i8;

        $b9 = $d1 cmpl pivot;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b9);

        if $b9 <= 0 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#2);

        if l#1 >= r#2 goto label4;

        r#2 = r#2 + -1;

        goto label3;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#2);

        if l#1 >= r#2 goto label1;

        help = index[l#1];

        $i10 = index[r#2];

        index[l#1] = $i10;

        index[r#2] = help;

        l#1 = l#1 + 1;

        r#2 = r#2 + -1;

        goto label1;

     label5:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l#1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(r#2);

        if l#1 != r#2 goto label6;

        $i11 = index[r#2];

        $i12 = array[$i11];

        $d2 = (double) $i12;

        $b13 = $d2 cmpl pivot;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b13);

        if $b13 <= 0 goto label6;

        r#2 = r#2 + -1;

     label6:
        return r#2;
    }

    public static java.lang.String joinOptions(java.lang.String[])
    {
        java.lang.String[] optionArray, l2;
        int l3, l4#7, n#19, $i0;
        java.lang.String element, optionString#2, $r3, optionString#49, $r12;
        boolean $z0, escape#17, $z1;
        char $c1, $c2, $c3;
        java.lang.StringBuilder $r0, $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        optionArray := @parameter0: java.lang.String[];

        optionString#2 = "";

        l2 = optionArray;

        l3 = lengthof l2;

        l4#7 = 0;

     label01:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l3);

        if l4#7 >= l3 goto label10;

        element = l2[l4#7];

        $z0 = virtualinvoke element.<java.lang.String: boolean equals(java.lang.Object)>("");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label02;

        goto label09;

     label02:
        escape#17 = 0;

        n#19 = 0;

     label03:
        $i0 = virtualinvoke element.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(n#19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if n#19 >= $i0 goto label06;

        $c1 = virtualinvoke element.<java.lang.String: char charAt(int)>(n#19);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 != 0 goto label04;

        $c2 = virtualinvoke element.<java.lang.String: char charAt(int)>(n#19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c2);

        if $c2 == 34 goto label04;

        $c3 = virtualinvoke element.<java.lang.String: char charAt(int)>(n#19);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($c3);

        if $c3 != 39 goto label05;

     label04:
        escape#17 = 1;

        goto label06;

     label05:
        n#19 = n#19 + 1;

        goto label03;

     label06:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(escape#17);

        if escape#17 == 0 goto label07;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(optionString#2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r3 = staticinvoke <weka.core.Utils: java.lang.String backQuoteChars(java.lang.String)>(element);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        optionString#49 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label08;

     label07:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(optionString#2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(element);

        optionString#49 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(optionString#49);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        optionString#2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        l4#7 = l4#7 + 1;

        goto label01;

     label10:
        $r12 = virtualinvoke optionString#2.<java.lang.String: java.lang.String trim()>();

        return $r12;
    }

    public static void normalize(double[])
    {
        double[] doubles, l3;
        int l4, l5#7;
        double d, sum#2;

        doubles := @parameter0: double[];

        sum#2 = 0.0;

        l3 = doubles;

        l4 = lengthof l3;

        l5#7 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l5#7 >= l4 goto label2;

        d = l3[l5#7];

        sum#2 = sum#2 + d;

        l5#7 = l5#7 + 1;

        goto label1;

     label2:
        staticinvoke <weka.core.Utils: void normalize(double[],double)>(doubles, sum#2);

        return;
    }

    public static int minIndex(double[])
    {
        double[] doubles;
        double minimum#2, $d0;
        int minIndex#4, i#6, $i0;
        byte $b1;

        doubles := @parameter0: double[];

        minimum#2 = 0.0;

        minIndex#4 = 0;

        i#6 = 0;

     label1:
        $i0 = lengthof doubles;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if i#6 >= $i0 goto label4;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#6);

        if i#6 == 0 goto label2;

        $d0 = doubles[i#6];

        $b1 = $d0 cmpg minimum#2;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 >= 0 goto label3;

     label2:
        minIndex#4 = i#6;

        minimum#2 = doubles[i#6];

     label3:
        i#6 = i#6 + 1;

        goto label1;

     label4:
        return minIndex#4;
    }

    public static void normalize(double[], double)
    {
        double[] doubles;
        double sum, $d0, $d1;
        boolean $z0;
        java.lang.IllegalArgumentException $r0, $r1;
        byte $b0;
        int i#13, $i1;

        doubles := @parameter0: double[];

        sum := @parameter1: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(sum);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 == 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t normalize array. Sum is NaN.");

        throw $r0;

     label1:
        $b0 = sum cmpl 0.0;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t normalize array. Sum is zero.");

        throw $r1;

     label2:
        i#13 = 0;

     label3:
        $i1 = lengthof doubles;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#13);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if i#13 >= $i1 goto label4;

        $d0 = doubles[i#13];

        $d1 = $d0 / sum;

        doubles[i#13] = $d1;

        i#13 = i#13 + 1;

        goto label3;

     label4:
        return;
    }

    public static double mean(double[])
    {
        double[] vector, l3;
        int l4, $i0, l5#10, $i1;
        double element, sum#2, $d0, $d1;

        vector := @parameter0: double[];

        sum#2 = 0.0;

        $i0 = lengthof vector;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 != 0 goto label1;

        return 0.0;

     label1:
        l3 = vector;

        l4 = lengthof l3;

        l5#10 = 0;

     label2:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#10);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l5#10 >= l4 goto label3;

        element = l3[l5#10];

        sum#2 = sum#2 + element;

        l5#10 = l5#10 + 1;

        goto label2;

     label3:
        $i1 = lengthof vector;

        $d0 = (double) $i1;

        $d1 = sum#2 / $d0;

        return $d1;
    }

    public static double sum(double[])
    {
        double[] doubles, l3;
        int l4, l5#7;
        double d, sum#2;

        doubles := @parameter0: double[];

        sum#2 = 0.0;

        l3 = doubles;

        l4 = lengthof l3;

        l5#7 = 0;

     label1:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l4);

        if l5#7 >= l4 goto label2;

        d = l3[l5#7];

        sum#2 = sum#2 + d;

        l5#7 = l5#7 + 1;

        goto label1;

     label2:
        return sum#2;
    }

    public static java.lang.String padLeftAndAllowOverflow(java.lang.String, int)
    {
        java.lang.String inString, $r4, $r6;
        int length;
        java.lang.StringBuilder $r0, $r1, $r2, $r3;
        java.lang.Object[] $r5;

        inString := @parameter0: java.lang.String;

        length := @parameter1: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%1$");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(length);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = inString;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r4, $r5);

        return $r6;
    }

    public static boolean grOrEq(double, double)
    {
        double a, b, $d0, $d1;
        byte $b0, $b1;
        boolean $z0;

        a := @parameter0: double;

        b := @parameter1: double;

        $d0 = b - a;

        $d1 = <weka.core.Utils: double SMALL>;

        $b0 = $d0 cmpg $d1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 < 0 goto label1;

        $b1 = a cmpl b;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b1);

        if $b1 < 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean sm(double, double)
    {
        double a, b, $d0, $d1;
        byte $b0;
        boolean $z0;

        a := @parameter0: double;

        b := @parameter1: double;

        $d0 = b - a;

        $d1 = <weka.core.Utils: double SMALL>;

        $b0 = $d0 cmpl $d1;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($b0);

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int[] sortWithNoMissingValues(double[])
    {
        double[] array;
        int[] index;
        int $i0, $i1, $i2, $i3;

        array := @parameter0: double[];

        $i0 = lengthof array;

        index = staticinvoke <weka.core.Utils: int[] initialIndex(int)>($i0);

        $i1 = lengthof array;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 1 goto label1;

        $i2 = lengthof array;

        $i3 = $i2 - 1;

        staticinvoke <weka.core.Utils: void quickSort(double[],int[],int,int)>(array, index, 0, $i3);

     label1:
        return index;
    }

    public static java.lang.Object cast(java.lang.Object)
    {
        java.lang.Object x;

        x := @parameter0: java.lang.Object;

        return x;
    }

    public static int[] sort(int[])
    {
        int[] array, index, newIndex, helpIndex;
        int $i0, $i1, $i2, $i3, i#15, $i4, numEqual#20, j#24, $i5, $i6, $i7, $i8, $i9, j#43, $i10, $i11, j#58, $i12, $i13, $i14, $i15;

        array := @parameter0: int[];

        $i0 = lengthof array;

        index = staticinvoke <weka.core.Utils: int[] initialIndex(int)>($i0);

        $i1 = lengthof array;

        newIndex = newarray (int)[$i1];

        $i2 = lengthof array;

        $i3 = $i2 - 1;

        staticinvoke <weka.core.Utils: void quickSort(int[],int[],int,int)>(array, index, 0, $i3);

        i#15 = 0;

     label1:
        $i4 = lengthof index;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#15);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if i#15 >= $i4 goto label9;

        numEqual#20 = 1;

        j#24 = i#15 + 1;

     label2:
        $i5 = lengthof index;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#24);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if j#24 >= $i5 goto label3;

        $i6 = index[i#15];

        $i7 = array[$i6];

        $i8 = index[j#24];

        $i9 = array[$i8];

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        if $i7 != $i9 goto label3;

        numEqual#20 = numEqual#20 + 1;

        j#24 = j#24 + 1;

        goto label2;

     label3:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numEqual#20);

        if numEqual#20 <= 1 goto label8;

        helpIndex = newarray (int)[numEqual#20];

        j#43 = 0;

     label4:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#43);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numEqual#20);

        if j#43 >= numEqual#20 goto label5;

        $i10 = i#15 + j#43;

        helpIndex[j#43] = $i10;

        j#43 = j#43 + 1;

        goto label4;

     label5:
        $i11 = numEqual#20 - 1;

        staticinvoke <weka.core.Utils: void quickSort(int[],int[],int,int)>(index, helpIndex, 0, $i11);

        j#58 = 0;

     label6:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(j#58);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(numEqual#20);

        if j#58 >= numEqual#20 goto label7;

        $i12 = i#15 + j#58;

        $i13 = helpIndex[j#58];

        $i14 = index[$i13];

        newIndex[$i12] = $i14;

        j#58 = j#58 + 1;

        goto label6;

     label7:
        i#15 = i#15 + numEqual#20;

        goto label1;

     label8:
        $i15 = index[i#15];

        newIndex[i#15] = $i15;

        i#15 = i#15 + 1;

        goto label1;

     label9:
        return newIndex;
    }


