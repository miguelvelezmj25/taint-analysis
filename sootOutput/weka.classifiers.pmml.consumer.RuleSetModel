    public void <init>(org.w3c.dom.Element, weka.core.Instances, weka.core.pmml.MiningSchema) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.RuleSetModel this;
        org.w3c.dom.Element model, $r4;
        weka.core.Instances dataDictionary;
        weka.core.pmml.MiningSchema miningSchema;
        java.lang.String fn, modelName, algoName, $r1;
        org.w3c.dom.NodeList ruleset;
        org.w3c.dom.Node ruleSetNode;
        weka.classifiers.pmml.consumer.TreeModel$MiningFunction $r0, $r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2;
        short $s3;
        weka.classifiers.pmml.consumer.RuleSetModel$RuleSet $r3;
        java.lang.Exception $r5;

        this := @this: weka.classifiers.pmml.consumer.RuleSetModel;

        model := @parameter0: org.w3c.dom.Element;

        dataDictionary := @parameter1: weka.core.Instances;

        miningSchema := @parameter2: weka.core.pmml.MiningSchema;

        specialinvoke this.<weka.classifiers.pmml.consumer.PMMLClassifier: void <init>(weka.core.Instances,weka.core.pmml.MiningSchema)>(dataDictionary, miningSchema);

        $r0 = <weka.classifiers.pmml.consumer.TreeModel$MiningFunction: weka.classifiers.pmml.consumer.TreeModel$MiningFunction CLASSIFICATION>;

        this.<weka.classifiers.pmml.consumer.RuleSetModel: weka.classifiers.pmml.consumer.TreeModel$MiningFunction m_functionType> = $r0;

        $r1 = virtualinvoke this.<weka.classifiers.pmml.consumer.RuleSetModel: java.lang.String getPMMLVersion()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("3.2");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

     label1:
        fn = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("functionName");

        $z1 = virtualinvoke fn.<java.lang.String: boolean equals(java.lang.Object)>("regression");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        $r2 = <weka.classifiers.pmml.consumer.TreeModel$MiningFunction: weka.classifiers.pmml.consumer.TreeModel$MiningFunction REGRESSION>;

        this.<weka.classifiers.pmml.consumer.RuleSetModel: weka.classifiers.pmml.consumer.TreeModel$MiningFunction m_functionType> = $r2;

     label2:
        modelName = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("modelName");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(modelName);

        if modelName == null goto label3;

        $i0 = virtualinvoke modelName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label3;

        this.<weka.classifiers.pmml.consumer.RuleSetModel: java.lang.String m_modelName> = modelName;

     label3:
        algoName = interfaceinvoke model.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("algorithmName");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(algoName);

        if algoName == null goto label4;

        $i1 = virtualinvoke algoName.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 <= 0 goto label4;

        this.<weka.classifiers.pmml.consumer.RuleSetModel: java.lang.String m_algorithmName> = algoName;

     label4:
        ruleset = interfaceinvoke model.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("RuleSet");

        $i2 = interfaceinvoke ruleset.<org.w3c.dom.NodeList: int getLength()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        if $i2 != 1 goto label6;

        ruleSetNode = interfaceinvoke ruleset.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        $s3 = interfaceinvoke ruleSetNode.<org.w3c.dom.Node: short getNodeType()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($s3);

        if $s3 != 1 goto label5;

        $r3 = new weka.classifiers.pmml.consumer.RuleSetModel$RuleSet;

        $r4 = (org.w3c.dom.Element) ruleSetNode;

        specialinvoke $r3.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: void <init>(org.w3c.dom.Element,weka.core.pmml.MiningSchema)>($r4, miningSchema);

        this.<weka.classifiers.pmml.consumer.RuleSetModel: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet m_ruleSet> = $r3;

     label5:
        goto label7;

     label6:
        $r5 = new java.lang.Exception;

        specialinvoke $r5.<java.lang.Exception: void <init>(java.lang.String)>("[RuleSetModel] Should only have a single RuleSet!");

        throw $r5;

     label7:
        return;
    }

    public double[] distributionForInstance(weka.core.Instance) throws java.lang.Exception
    {
        weka.classifiers.pmml.consumer.RuleSetModel this;
        weka.core.Instance inst;
        double[] incoming, preds#15, preds#22, preds#37;
        boolean $z0, $z1, $z2;
        weka.core.Instances $r0, $r2, $r5, $r11, $r14;
        weka.core.pmml.MiningSchema $r1, $r4, $r8, $r10, $r13;
        weka.core.Attribute $r3, $r6, $r12, $r15;
        int $i0;
        weka.core.pmml.MappingInfo $r7;
        weka.classifiers.pmml.consumer.RuleSetModel$RuleSet $r9;

        this := @this: weka.classifiers.pmml.consumer.RuleSetModel;

        inst := @parameter0: weka.core.Instance;

        $z0 = this.<weka.classifiers.pmml.consumer.RuleSetModel: boolean m_initialized>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r0 = interfaceinvoke inst.<weka.core.Instance: weka.core.Instances dataset()>();

        virtualinvoke this.<weka.classifiers.pmml.consumer.RuleSetModel: void mapToMiningSchema(weka.core.Instances)>($r0);

     label1:
        $r1 = this.<weka.classifiers.pmml.consumer.RuleSetModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r2 = virtualinvoke $r1.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r3 = virtualinvoke $r2.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z1 = virtualinvoke $r3.<weka.core.Attribute: boolean isNumeric()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z1);

        if $z1 == 0 goto label2;

        preds#15 = newarray (double)[1];

        goto label3;

     label2:
        $r4 = this.<weka.classifiers.pmml.consumer.RuleSetModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r5 = virtualinvoke $r4.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r6 = virtualinvoke $r5.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $i0 = virtualinvoke $r6.<weka.core.Attribute: int numValues()>();

        preds#22 = newarray (double)[$i0];

     label3:
        $r7 = this.<weka.classifiers.pmml.consumer.RuleSetModel: weka.core.pmml.MappingInfo m_fieldsMap>;

        $r8 = this.<weka.classifiers.pmml.consumer.RuleSetModel: weka.core.pmml.MiningSchema m_miningSchema>;

        incoming = virtualinvoke $r7.<weka.core.pmml.MappingInfo: double[] instanceToSchema(weka.core.Instance,weka.core.pmml.MiningSchema)>(inst, $r8);

        $r9 = this.<weka.classifiers.pmml.consumer.RuleSetModel: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet m_ruleSet>;

        $r10 = this.<weka.classifiers.pmml.consumer.RuleSetModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r11 = virtualinvoke $r10.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r12 = virtualinvoke $r11.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        preds#37 = virtualinvoke $r9.<weka.classifiers.pmml.consumer.RuleSetModel$RuleSet: double[] score(double[],weka.core.Attribute)>(incoming, $r12);

        $r13 = this.<weka.classifiers.pmml.consumer.RuleSetModel: weka.core.pmml.MiningSchema m_miningSchema>;

        $r14 = virtualinvoke $r13.<weka.core.pmml.MiningSchema: weka.core.Instances getFieldsAsInstances()>();

        $r15 = virtualinvoke $r14.<weka.core.Instances: weka.core.Attribute classAttribute()>();

        $z2 = virtualinvoke $r15.<weka.core.Attribute: boolean isNominal()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label4;

        staticinvoke <weka.core.Utils: void normalize(double[])>(preds#37);

     label4:
        return preds#37;
    }

    public java.lang.String toString()
    {
        weka.classifiers.pmml.consumer.RuleSetModel this;
        java.lang.StringBuffer temp, $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r8, $r9, $r11, $r19, $r20, $r22, $r23;
        java.lang.String $r3, $r5, $r7, $r10, $r12, $r18, $r21, $r24, $r28;
        boolean $z0;
        weka.core.pmml.MiningSchema $r16;
        weka.classifiers.pmml.consumer.RuleSetModel$RuleSet $r26;

        this := @this: weka.classifiers.pmml.consumer.RuleSetModel;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        temp = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PMML version ");

        $r3 = virtualinvoke this.<weka.classifiers.pmml.consumer.RuleSetModel: java.lang.String getPMMLVersion()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke this.<weka.classifiers.pmml.consumer.RuleSetModel: java.lang.String getCreatorApplication()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("?");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nApplication: ");

        $r10 = virtualinvoke this.<weka.classifiers.pmml.consumer.RuleSetModel: java.lang.String getCreatorApplication()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label1:
        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nPMML Model: RuleSetModel");

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n\n");

        $r16 = this.<weka.classifiers.pmml.consumer.RuleSetModel: weka.core.pmml.MiningSchema m_miningSchema>;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r16);

        $r18 = this.<weka.classifiers.pmml.consumer.RuleSetModel: java.lang.String m_algorithmName>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r18);

        if $r18 == null goto label2;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nAlgorithm: ");

        $r21 = this.<weka.classifiers.pmml.consumer.RuleSetModel: java.lang.String m_algorithmName>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

     label2:
        $r26 = this.<weka.classifiers.pmml.consumer.RuleSetModel: weka.classifiers.pmml.consumer.RuleSetModel$RuleSet m_ruleSet>;

        virtualinvoke temp.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r26);

        $r28 = virtualinvoke temp.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r28;
    }


