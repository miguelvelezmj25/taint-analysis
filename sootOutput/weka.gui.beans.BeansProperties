    static void <clinit>()
    {
        java.util.ArrayList $r0;
        weka.core.metastore.XMLFileBasedMetaStore $r1;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <weka.gui.beans.BeansProperties: java.util.ArrayList BEAN_PLUGINS_PROPERTIES> = $r0;

        <weka.gui.beans.BeansProperties: java.lang.String VISIBLE_PERSPECTIVES_PROPERTIES_FILE> = "weka/gui/beans/VisiblePerspectives.props";

        <weka.gui.beans.BeansProperties: boolean s_pluginManagerIntialized> = 0;

        $r1 = new weka.core.metastore.XMLFileBasedMetaStore;

        specialinvoke $r1.<weka.core.metastore.XMLFileBasedMetaStore: void <init>()>();

        <weka.gui.beans.BeansProperties: weka.core.metastore.MetaStore s_kfMetaStore> = $r1;

        return;
    }

    public static void addToPluginBeanProps(java.io.File) throws java.lang.Exception
    {
        java.io.File beanPropsFile;
        java.util.Properties tempP, $r0;
        java.io.FileInputStream $r1;
        java.util.ArrayList $r2, $r3;
        boolean $z0;

        beanPropsFile := @parameter0: java.io.File;

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

        tempP = $r0;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(beanPropsFile);

        virtualinvoke tempP.<java.util.Properties: void load(java.io.InputStream)>($r1);

        $r2 = <weka.gui.beans.BeansProperties: java.util.ArrayList BEAN_PLUGINS_PROPERTIES>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(tempP);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label1;

        $r3 = <weka.gui.beans.BeansProperties: java.util.ArrayList BEAN_PLUGINS_PROPERTIES>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(tempP);

     label1:
        return;
    }

    public static synchronized void loadProperties()
    {
        java.util.Enumeration keys, keys;
        java.util.Properties pp, visible, templateProps, tempP, $r0, $r2, $r3, $r7, $r15;
        java.lang.String listedPerspectives, perspectiveName, paths, descriptions, template, d, offscreenRenderers, name, templatePaths, templateDesc, pth, d, $r8, $r11, $r13, $r19, $r21, $r27, $r30, $r37, $r39, $r41, renderer#185, renderer#188, $r52, $r59, $r62, $r64;
        java.util.StringTokenizer st, $r20;
        java.lang.Exception ex, ex, $r4, $r12, ex#24, $r29, $r35, $r40, ex#146, $r53;
        java.lang.String[] templates, desc, parts, l4, templates, desc, l5#114, l5#130;
        java.lang.Object p, $r46;
        weka.core.logging.Logger$Level $r1, $r22, $r34, $r48, $r54;
        boolean $z0, $z2, $z3, $z7, $z8, $z9;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r23, $r24, $r25, $r26, $r49, $r50, $r51, $r55, $r56, $r57, $r58;
        java.util.SortedSet $r14, $r28;
        java.util.ArrayList $r17, $r32, $r33, $r42, $r43, $r44, $r45;
        java.util.TreeSet $r18;
        int $i0, $i1, $i2, $i3, l6#117, l7#119, l6#133, l7#135, $i4, i#157, $i5, $i6, l5#177, l6#179, $i7, $i8, $i9, $i10, kk#242, $i11;
        java.util.List $r31, $r36, $r38, $r60, $r61, $r63;
        weka.gui.beans.OffscreenChartRenderer $r47;

        $r0 = <weka.gui.beans.BeansProperties: java.util.Properties BEAN_PROPERTIES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r0);

        if $r0 != null goto label09;

        staticinvoke <weka.core.WekaPackageManager: void loadPackages(boolean)>(0);

        $r1 = <weka.core.logging.Logger$Level: weka.core.logging.Logger$Level INFO>;

        staticinvoke <weka.core.logging.Logger: void log(weka.core.logging.Logger$Level,java.lang.String)>($r1, "[KnowledgeFlow] Loading properties and plugins...");

     label01:
        $r2 = staticinvoke <weka.core.Utils: java.util.Properties readProperties(java.lang.String)>("weka/gui/beans/Beans.props");

        <weka.gui.beans.BeansProperties: java.util.Properties BEAN_PROPERTIES> = $r2;

        $r3 = <weka.gui.beans.BeansProperties: java.util.Properties BEAN_PROPERTIES>;

        keys = virtualinvoke $r3.<java.util.Properties: java.util.Enumeration propertyNames()>();

        $z0 = interfaceinvoke keys.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z0);

        if $z0 != 0 goto label02;

        $r4 = new java.lang.Exception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not read a configuration file for the bean\npanel. An example file is included with the Weka distribution.\nThis file should be named \"weka/gui/beans/Beans.props\" and\nshould be placed either in your user home (which is set\nto \"");

        $r7 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $r8 = virtualinvoke $r7.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("user.home");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")\nor the directory that java was started from\n");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>($r11);

        throw $r4;

     label02:
        goto label04;

     label03:
        $r12 := @caughtexception;

        ex#24 = $r12;

        $r13 = virtualinvoke ex#24.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>(null, $r13, "KnowledgeFlow", 0);

     label04:
        $r14 = <weka.gui.beans.BeansProperties: java.util.SortedSet VISIBLE_PERSPECTIVES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r14);

        if $r14 != null goto label09;

        $r15 = new java.util.Properties;

        specialinvoke $r15.<java.util.Properties: void <init>()>();

        pp = $r15;

        virtualinvoke pp.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("weka.gui.beans.KnowledgeFlow.Perspectives", "weka.gui.beans.ScatterPlotMatrix,weka.gui.beans.AttributeSummarizer,weka.gui.beans.SQLViewerPerspective");

        $r17 = <weka.gui.beans.BeansProperties: java.util.ArrayList BEAN_PLUGINS_PROPERTIES>;

        virtualinvoke $r17.<java.util.ArrayList: boolean add(java.lang.Object)>(pp);

        $r18 = new java.util.TreeSet;

        specialinvoke $r18.<java.util.TreeSet: void <init>()>();

        <weka.gui.beans.BeansProperties: java.util.SortedSet VISIBLE_PERSPECTIVES> = $r18;

     label05:
        $r19 = <weka.gui.beans.BeansProperties: java.lang.String VISIBLE_PERSPECTIVES_PROPERTIES_FILE>;

        visible = staticinvoke <weka.core.Utils: java.util.Properties readProperties(java.lang.String)>($r19);

        keys = virtualinvoke visible.<java.util.Properties: java.util.Enumeration propertyNames()>();

        $z2 = interfaceinvoke keys.<java.util.Enumeration: boolean hasMoreElements()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z2);

        if $z2 == 0 goto label07;

        listedPerspectives = virtualinvoke visible.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("weka.gui.beans.KnowledgeFlow.SelectedPerspectives");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(listedPerspectives);

        if listedPerspectives == null goto label07;

        $i0 = virtualinvoke listedPerspectives.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i0);

        if $i0 <= 0 goto label07;

        $r20 = new java.util.StringTokenizer;

        specialinvoke $r20.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(listedPerspectives, ", ");

        st = $r20;

     label06:
        $z3 = virtualinvoke st.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z3);

        if $z3 == 0 goto label07;

        $r21 = virtualinvoke st.<java.util.StringTokenizer: java.lang.String nextToken()>();

        perspectiveName = virtualinvoke $r21.<java.lang.String: java.lang.String trim()>();

        $r22 = <weka.core.logging.Logger$Level: weka.core.logging.Logger$Level INFO>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding perspective ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(perspectiveName);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to visible list");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <weka.core.logging.Logger: void log(weka.core.logging.Logger$Level,java.lang.String)>($r22, $r27);

        $r28 = <weka.gui.beans.BeansProperties: java.util.SortedSet VISIBLE_PERSPECTIVES>;

        interfaceinvoke $r28.<java.util.SortedSet: boolean add(java.lang.Object)>(perspectiveName);

        goto label06;

     label07:
        goto label09;

     label08:
        $r29 := @caughtexception;

        ex = $r29;

        $r30 = virtualinvoke ex.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>(null, $r30, "KnowledgeFlow", 0);

     label09:
        $r31 = <weka.gui.beans.BeansProperties: java.util.List TEMPLATE_PATHS>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r31);

        if $r31 != null goto label19;

        $r32 = new java.util.ArrayList;

        specialinvoke $r32.<java.util.ArrayList: void <init>()>();

        <weka.gui.beans.BeansProperties: java.util.List TEMPLATE_PATHS> = $r32;

        $r33 = new java.util.ArrayList;

        specialinvoke $r33.<java.util.ArrayList: void <init>()>();

        <weka.gui.beans.BeansProperties: java.util.List TEMPLATE_DESCRIPTIONS> = $r33;

     label10:
        templateProps = staticinvoke <weka.core.Utils: java.util.Properties readProperties(java.lang.String)>("weka/gui/beans/templates/templates.props");

        paths = virtualinvoke templateProps.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("weka.gui.beans.KnowledgeFlow.templates");

        descriptions = virtualinvoke templateProps.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("weka.gui.beans.KnowledgeFlow.templates.desc");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(paths);

        if paths == null goto label11;

        $i1 = virtualinvoke paths.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i1);

        if $i1 != 0 goto label12;

     label11:
        $r34 = <weka.core.logging.Logger$Level: weka.core.logging.Logger$Level WARNING>;

        staticinvoke <weka.core.logging.Logger: void log(weka.core.logging.Logger$Level,java.lang.String)>($r34, "[KnowledgeFlow] WARNING: no templates found in classpath");

        goto label17;

     label12:
        templates = virtualinvoke paths.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        desc = virtualinvoke descriptions.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i2 = lengthof templates;

        $i3 = lengthof desc;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i2);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i3);

        if $i2 == $i3 goto label13;

        $r35 = new java.lang.Exception;

        specialinvoke $r35.<java.lang.Exception: void <init>(java.lang.String)>("Number of template descriptions does not match number of templates.");

        throw $r35;

     label13:
        l5#114 = templates;

        l6#117 = lengthof l5#114;

        l7#119 = 0;

     label14:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#119);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#117);

        if l7#119 >= l6#117 goto label15;

        template = l5#114[l7#119];

        $r36 = <weka.gui.beans.BeansProperties: java.util.List TEMPLATE_PATHS>;

        $r37 = virtualinvoke template.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r36.<java.util.List: boolean add(java.lang.Object)>($r37);

        l7#119 = l7#119 + 1;

        goto label14;

     label15:
        l5#130 = desc;

        l6#133 = lengthof l5#130;

        l7#135 = 0;

     label16:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l7#135);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#133);

        if l7#135 >= l6#133 goto label17;

        d = l5#130[l7#135];

        $r38 = <weka.gui.beans.BeansProperties: java.util.List TEMPLATE_DESCRIPTIONS>;

        $r39 = virtualinvoke d.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r38.<java.util.List: boolean add(java.lang.Object)>($r39);

        l7#135 = l7#135 + 1;

        goto label16;

     label17:
        goto label19;

     label18:
        $r40 := @caughtexception;

        ex#146 = $r40;

        $r41 = virtualinvoke ex#146.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>(null, $r41, "KnowledgeFlow", 0);

     label19:
        $z7 = <weka.gui.beans.BeansProperties: boolean s_pluginManagerIntialized>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z7);

        if $z7 != 0 goto label31;

        $r42 = <weka.gui.beans.BeansProperties: java.util.ArrayList BEAN_PLUGINS_PROPERTIES>;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($r42);

        if $r42 == null goto label31;

        $r43 = <weka.gui.beans.BeansProperties: java.util.ArrayList BEAN_PLUGINS_PROPERTIES>;

        $i4 = virtualinvoke $r43.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i4);

        if $i4 <= 0 goto label31;

        i#157 = 0;

     label20:
        $r44 = <weka.gui.beans.BeansProperties: java.util.ArrayList BEAN_PLUGINS_PROPERTIES>;

        $i5 = virtualinvoke $r44.<java.util.ArrayList: int size()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(i#157);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i5);

        if i#157 >= $i5 goto label30;

        $r45 = <weka.gui.beans.BeansProperties: java.util.ArrayList BEAN_PLUGINS_PROPERTIES>;

        $r46 = virtualinvoke $r45.<java.util.ArrayList: java.lang.Object get(int)>(i#157);

        tempP = (java.util.Properties) $r46;

        offscreenRenderers = virtualinvoke tempP.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("weka.gui.beans.OffscreenChartRenderer");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(offscreenRenderers);

        if offscreenRenderers == null goto label26;

        $i6 = virtualinvoke offscreenRenderers.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i6);

        if $i6 <= 0 goto label26;

        parts = virtualinvoke offscreenRenderers.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        l4 = parts;

        l5#177 = lengthof l4;

        l6#179 = 0;

     label21:
        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l6#179);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(l5#177);

        if l6#179 >= l5#177 goto label26;

        renderer#185 = l4[l6#179];

        renderer#188 = virtualinvoke renderer#185.<java.lang.String: java.lang.String trim()>();

     label22:
        p = staticinvoke <weka.core.WekaPackageClassLoaderManager: java.lang.Object objectForName(java.lang.String)>(renderer#188);

        $z8 = p instanceof weka.gui.beans.OffscreenChartRenderer;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z8);

        if $z8 == 0 goto label23;

        $r47 = (weka.gui.beans.OffscreenChartRenderer) p;

        name = interfaceinvoke $r47.<weka.gui.beans.OffscreenChartRenderer: java.lang.String rendererName()>();

        staticinvoke <weka.core.PluginManager: void addPlugin(java.lang.String,java.lang.String,java.lang.String)>("weka.gui.beans.OffscreenChartRenderer", name, renderer#188);

        $r48 = <weka.core.logging.Logger$Level: weka.core.logging.Logger$Level INFO>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[KnowledgeFlow] registering chart rendering plugin: ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(renderer#188);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <weka.core.logging.Logger: void log(weka.core.logging.Logger$Level,java.lang.String)>($r48, $r52);

     label23:
        goto label25;

     label24:
        $r53 := @caughtexception;

        ex = $r53;

        $r54 = <weka.core.logging.Logger$Level: weka.core.logging.Logger$Level WARNING>;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[KnowledgeFlow] WARNING: unable to instantiate chart renderer \"");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(renderer#188);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <weka.core.logging.Logger: void log(weka.core.logging.Logger$Level,java.lang.String)>($r54, $r59);

        virtualinvoke ex.<java.lang.Exception: void printStackTrace()>();

     label25:
        l6#179 = l6#179 + 1;

        goto label21;

     label26:
        templatePaths = virtualinvoke tempP.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("weka.gui.beans.KnowledgeFlow.templates");

        templateDesc = virtualinvoke tempP.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("weka.gui.beans.KnowledgeFlow.templates.desc");

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(templatePaths);

        if templatePaths == null goto label29;

        $i7 = virtualinvoke templatePaths.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i7);

        if $i7 <= 0 goto label29;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(templateDesc);

        if templateDesc == null goto label29;

        $i8 = virtualinvoke templateDesc.<java.lang.String: int length()>();

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i8);

        if $i8 <= 0 goto label29;

        templates = virtualinvoke templatePaths.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        desc = virtualinvoke templateDesc.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i9 = lengthof templates;

        $i10 = lengthof desc;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i9);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i10);

        if $i9 != $i10 goto label29;

        kk#242 = 0;

     label27:
        $i11 = lengthof templates;

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>(kk#242);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($i11);

        if kk#242 >= $i11 goto label29;

        pth = templates[kk#242];

        d = desc[kk#242];

        $r60 = <weka.gui.beans.BeansProperties: java.util.List TEMPLATE_PATHS>;

        $z9 = interfaceinvoke $r60.<java.util.List: boolean contains(java.lang.Object)>(pth);

        staticinvoke <edu.cmu.cs.mvelezce.analysis.option.Sink: void sink(java.lang.Object)>($z9);

        if $z9 != 0 goto label28;

        $r61 = <weka.gui.beans.BeansProperties: java.util.List TEMPLATE_PATHS>;

        $r62 = virtualinvoke pth.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r61.<java.util.List: boolean add(java.lang.Object)>($r62);

        $r63 = <weka.gui.beans.BeansProperties: java.util.List TEMPLATE_DESCRIPTIONS>;

        $r64 = virtualinvoke d.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r63.<java.util.List: boolean add(java.lang.Object)>($r64);

     label28:
        kk#242 = kk#242 + 1;

        goto label27;

     label29:
        i#157 = i#157 + 1;

        goto label20;

     label30:
        <weka.gui.beans.BeansProperties: boolean s_pluginManagerIntialized> = 1;

     label31:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label07 with label08;
        catch java.lang.Exception from label10 to label17 with label18;
        catch java.lang.Exception from label22 to label23 with label24;
    }


