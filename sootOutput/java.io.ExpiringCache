    void <init>()
    {
        java.io.ExpiringCache l0;

        l0 := @this: java.io.ExpiringCache;

        specialinvoke l0.<java.io.ExpiringCache: void <init>(long)>(30000L);

        return;
    }

    void <init>(long)
    {
        java.io.ExpiringCache l0;
        long l1;
        java.io.ExpiringCache$1 $r0;

        l0 := @this: java.io.ExpiringCache;

        l1 := @parameter0: long;

        specialinvoke l0.<java.lang.Object: void <init>()>();

        l0.<java.io.ExpiringCache: int queryOverflow> = 300;

        l0.<java.io.ExpiringCache: int MAX_ENTRIES> = 200;

        l0.<java.io.ExpiringCache: long millisUntilExpiration> = l1;

        $r0 = new java.io.ExpiringCache$1;

        specialinvoke $r0.<java.io.ExpiringCache$1: void <init>(java.io.ExpiringCache)>(l0);

        l0.<java.io.ExpiringCache: java.util.Map map> = $r0;

        return;
    }

    synchronized void put(java.lang.String, java.lang.String)
    {
        java.io.ExpiringCache l0;
        java.lang.String l1, l2;
        java.io.ExpiringCache$Entry l3, $r2;
        long $l0, $l4;
        int $i1, $i2, $i3;
        java.util.Map $r1;

        l0 := @this: java.io.ExpiringCache;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: java.lang.String;

        $i1 = l0.<java.io.ExpiringCache: int queryCount>;

        $i2 = $i1 + 1;

        l0.<java.io.ExpiringCache: int queryCount> = $i2;

        $i3 = l0.<java.io.ExpiringCache: int queryOverflow>;

        if $i2 < $i3 goto label1;

        specialinvoke l0.<java.io.ExpiringCache: void cleanup()>();

     label1:
        l3 = specialinvoke l0.<java.io.ExpiringCache: java.io.ExpiringCache$Entry entryFor(java.lang.String)>(l1);

        if l3 == null goto label2;

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke l3.<java.io.ExpiringCache$Entry: void setTimestamp(long)>($l4);

        virtualinvoke l3.<java.io.ExpiringCache$Entry: void setVal(java.lang.String)>(l2);

        goto label3;

     label2:
        $r1 = l0.<java.io.ExpiringCache: java.util.Map map>;

        $r2 = new java.io.ExpiringCache$Entry;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke $r2.<java.io.ExpiringCache$Entry: void <init>(long,java.lang.String)>($l0, l2);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(l1, $r2);

     label3:
        return;
    }

    private void cleanup()
    {
        java.io.ExpiringCache l0;
        java.util.Set l1;
        java.lang.String[] l2;
        java.lang.String l5, $r2;
        java.util.Map $r0;
        int $i0, l3#8, $i1, l4#21, $i2;
        java.util.Iterator l4#11;
        boolean $z0;
        java.lang.Object $r1;

        l0 := @this: java.io.ExpiringCache;

        $r0 = l0.<java.io.ExpiringCache: java.util.Map map>;

        l1 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke l1.<java.util.Set: int size()>();

        l2 = newarray (java.lang.String)[$i0];

        l3#8 = 0;

        l4#11 = interfaceinvoke l1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4#11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke l4#11.<java.util.Iterator: java.lang.Object next()>();

        l5 = (java.lang.String) $r1;

        $i1 = l3#8;

        l3#8 = l3#8 + 1;

        l2[$i1] = l5;

        goto label1;

     label2:
        l4#21 = 0;

     label3:
        $i2 = lengthof l2;

        if l4#21 >= $i2 goto label4;

        $r2 = l2[l4#21];

        specialinvoke l0.<java.io.ExpiringCache: java.io.ExpiringCache$Entry entryFor(java.lang.String)>($r2);

        l4#21 = l4#21 + 1;

        goto label3;

     label4:
        l0.<java.io.ExpiringCache: int queryCount> = 0;

        return;
    }

    private java.io.ExpiringCache$Entry entryFor(java.lang.String)
    {
        java.io.ExpiringCache l0;
        java.lang.String l1;
        long l3, $l0, $l1, $l3;
        java.util.Map $r0, $r2;
        java.lang.Object $r1;
        java.io.ExpiringCache$Entry l2#6;
        byte $b2, $b4;

        l0 := @this: java.io.ExpiringCache;

        l1 := @parameter0: java.lang.String;

        $r0 = l0.<java.io.ExpiringCache: java.util.Map map>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(l1);

        l2#6 = (java.io.ExpiringCache$Entry) $r1;

        if l2#6 == null goto label2;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = virtualinvoke l2#6.<java.io.ExpiringCache$Entry: long timestamp()>();

        l3 = $l0 - $l1;

        $b2 = l3 cmp 0L;

        if $b2 < 0 goto label1;

        $l3 = l0.<java.io.ExpiringCache: long millisUntilExpiration>;

        $b4 = l3 cmp $l3;

        if $b4 < 0 goto label2;

     label1:
        $r2 = l0.<java.io.ExpiringCache: java.util.Map map>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(l1);

        l2#6 = null;

     label2:
        return l2#6;
    }

    synchronized java.lang.String get(java.lang.String)
    {
        java.io.ExpiringCache l0;
        java.lang.String l1, $r1;
        java.io.ExpiringCache$Entry l2;
        int $i0, $i1, $i2;

        l0 := @this: java.io.ExpiringCache;

        l1 := @parameter0: java.lang.String;

        $i0 = l0.<java.io.ExpiringCache: int queryCount>;

        $i1 = $i0 + 1;

        l0.<java.io.ExpiringCache: int queryCount> = $i1;

        $i2 = l0.<java.io.ExpiringCache: int queryOverflow>;

        if $i1 < $i2 goto label1;

        specialinvoke l0.<java.io.ExpiringCache: void cleanup()>();

     label1:
        l2 = specialinvoke l0.<java.io.ExpiringCache: java.io.ExpiringCache$Entry entryFor(java.lang.String)>(l1);

        if l2 == null goto label2;

        $r1 = virtualinvoke l2.<java.io.ExpiringCache$Entry: java.lang.String val()>();

        return $r1;

     label2:
        return null;
    }

    static int access$000(java.io.ExpiringCache)
    {
        java.io.ExpiringCache l0;
        int $i0;

        l0 := @parameter0: java.io.ExpiringCache;

        $i0 = l0.<java.io.ExpiringCache: int MAX_ENTRIES>;

        return $i0;
    }


